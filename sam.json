{
  "metadata": {
    "name": "@local/uc1porttypeaforsam",
    "version": "0.0.1",
    "description": "UC1PortTypeAforSam",
    "author": "Itential Artifacts",
    "license": "Apache-2.0",
    "repository": {
      "type": "local",
      "hostname": "localhost",
      "path": "/"
    },
    "keywords": [
      "Itential",
      "IAP",
      "artifacts"
    ],
    "IAPDependencies": {
      "@itential/app-operations_manager": "",
      "@itential/app-workflow_engine": "",
      "@itential/app-template_builder": "",
      "@itentialopensource/adapter-kafkav2": "",
      "@itential/adapter-tGNMI": "",
      "@itentialopensource/adapter-db_mongo": "",
      "@itential/app-json_forms": "",
      "@itentialopensource/adapter-netbox_v33": "",
      "@itentialopensource/adapter-iap": "",
      "@itentialopensource/adapter-tmf641_serviceOrderingManagement": "",
      "@itentialopensource/adapter-tmf639_resourceInventoryManagement": "",
      "@itentialopensource/adapter-tmf638_serviceInventoryManagement": ""
    }
  },
  "manifest": {
    "bundleName": "UC1PortTypeAforSam",
    "fingerprint": "642594dff3619a092ce73e54",
    "createdEpoch": "1680184543214",
    "artifacts": [
      {
        "id": "UC1_PTA_Create",
        "name": "UC1_PTA_Create",
        "type": "automation",
        "location": "/bundles/automations/UC1_PTA_Create.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_Main",
        "name": "PTA_Main",
        "type": "workflow",
        "location": "/bundles/workflows/PTA_Main.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_gNMI_deployment",
        "name": "PTA_gNMI_deployment",
        "type": "workflow",
        "location": "/bundles/workflows/PTA_gNMI_deployment.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_TMF_setServiceOrderErrorMessage",
        "name": "PTA_TMF_setServiceOrderErrorMessage",
        "type": "workflow",
        "location": "/bundles/workflows/PTA_TMF_setServiceOrderErrorMessage.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_orderValidation_netbox",
        "name": "PTA_orderValidation_netbox",
        "type": "workflow",
        "location": "/bundles/workflows/PTA_orderValidation_netbox.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_startServiceInventoryAllocation_netbox",
        "name": "PTA_startServiceInventoryAllocation_netbox",
        "type": "workflow",
        "location": "/bundles/workflows/PTA_startServiceInventoryAllocation_netbox.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_TMF_sendEventNotification",
        "name": "PTA_TMF_sendEventNotification",
        "type": "workflow",
        "location": "/bundles/workflows/PTA_TMF_sendEventNotification.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_InterfaceInventoryAllocation_netbox",
        "name": "PTA_InterfaceInventoryAllocation_netbox",
        "type": "workflow",
        "location": "/bundles/workflows/PTA_InterfaceInventoryAllocation_netbox.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TMF Set Service State",
        "name": "TMF Set Service State",
        "type": "workflow",
        "location": "/bundles/workflows/TMF Set Service State.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TMF Send Event Notification",
        "name": "TMF Send Event Notification",
        "type": "workflow",
        "location": "/bundles/workflows/TMF Send Event Notification.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_result_kafka_description",
        "name": "PTA_result_kafka_description",
        "type": "template",
        "location": "/bundles/templates/PTA_result_kafka_description.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "PTA_gnmi_precheck",
        "name": "PTA_gnmi_precheck",
        "type": "template",
        "location": "/bundles/templates/PTA_gnmi_precheck.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "netboxOrderModelInterfacePayload",
        "name": "netboxOrderModelInterfacePayload",
        "type": "template",
        "location": "/bundles/templates/netboxOrderModelInterfacePayload.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "642199fd3eab3f7b6d78124e",
        "name": "PTA_TMF_setServiceOrderErrorMessage",
        "type": "transformation",
        "location": "/bundles/transformations/PTA_TMF_setServiceOrderErrorMessage.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "641dfb7e3eab3f7b6d78124d",
        "name": "PTA_resultProcessing",
        "type": "transformation",
        "location": "/bundles/transformations/PTA_resultProcessing.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "642496f7a62a5209a65866db",
        "name": "PTA_InventoryAllocationPayloads",
        "type": "transformation",
        "location": "/bundles/transformations/PTA_InventoryAllocationPayloads.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6424a60ba62a5209a65866dc",
        "name": "PTA_addServiceToOrderModel",
        "type": "transformation",
        "location": "/bundles/transformations/PTA_addServiceToOrderModel.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "63d02c0fd341d802366b7c78",
        "name": "TMF Match Listener to Adapter",
        "type": "transformation",
        "location": "/bundles/transformations/TMF Match Listener to Adapter.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "63d0456dd341d802366b7c79",
        "name": "TMF Filter Adapter by Model",
        "type": "transformation",
        "location": "/bundles/transformations/TMF Filter Adapter by Model.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "63d1042dd341d802366b7c7a",
        "name": "TMF Set Event Data",
        "type": "transformation",
        "location": "/bundles/transformations/TMF Set Event Data.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "63d13c5ad341d802366b7c7c",
        "name": "TMF Send Notification Vars",
        "type": "transformation",
        "location": "/bundles/transformations/TMF Send Notification Vars.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "63d3c93414410e0246e4a3d5",
        "name": "TMF Event Notification - DB Find and Update",
        "type": "transformation",
        "location": "/bundles/transformations/TMF Event Notification - DB Find and Update.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "63d128e5d341d802366b7c7b",
        "name": "TMF Set State - DB Find and Update",
        "type": "transformation",
        "location": "/bundles/transformations/TMF Set State - DB Find and Update.json",
        "properties": {
          "entryPoint": false
        }
      }
    ]
  },
  "bundles": [
    {
      "type": "automation",
      "data": {
        "_id": "641ae6fbe246d36fb75ac737",
        "name": "UC1_PTA_Create",
        "description": "",
        "componentName": "PTA_Main",
        "componentType": "workflows",
        "gbac": {
          "write": [],
          "read": []
        },
        "created": "2023-03-22T11:31:07.917Z",
        "createdBy": "admin@pronghorn",
        "lastUpdated": "2023-03-30T13:55:09.965Z",
        "lastUpdatedBy": "admin@pronghorn",
        "triggers": [
          {
            "_id": "641ae9e2e246d36fb75ac738",
            "created": "2023-03-22T11:43:30.721Z",
            "createdBy": "admin@pronghorn",
            "lastUpdated": "2023-03-22T12:59:57.098Z",
            "lastUpdatedBy": "admin@pronghorn",
            "name": "TMF641",
            "type": "endpoint",
            "enabled": true,
            "actionType": "automations",
            "actionId": "641ae6fbe246d36fb75ac737",
            "description": "Create Service TMF 641",
            "verb": "POST",
            "routeName": "network-port",
            "schema": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            },
            "jst": null,
            "migrationVersion": 2
          }
        ]
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "PTA_Main",
        "type": "automation",
        "tasks": {
          "458": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Prep Summary",
            "description": "Jinja template will create description, kafka message, and result variable",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "PTA_result_kafka_description",
                "context": "$var.9d94.merged_object"
              },
              "outgoing": {
                "renderedTemplate": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 2.289344262295082,
            "y": 0.4930232558139535,
            "scheduled": false
          },
          "2612": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "demo",
                "value": 10
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.0858895705521472,
            "y": 0.448062015503876
          },
          "2884": {
            "name": "query",
            "canvasName": "query",
            "summary": "orderModel",
            "description": "get updated orderModel",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "orderModel",
                "obj": "$var.4e96.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.orderModel"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.2777777777777778,
            "y": 0.4941860465116279,
            "scheduled": false
          },
          "4995": {
            "name": "query",
            "canvasName": "query",
            "summary": "reason",
            "description": "get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result.reason",
                "obj": "$var.c8b0.response"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.463276836158192,
            "y": 1.0116279069767442,
            "scheduled": false
          },
          "5924": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Deploy Config",
            "description": "Deploy Config",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_gNMI_deployment",
                "variables": {
                  "orderModel": {
                    "editable": false,
                    "task": "job",
                    "value": "orderModel"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 1.0769230769230769,
            "y": 0.5022091310751104
          },
          "5926": {
            "name": "query",
            "canvasName": "query",
            "summary": "orderModel",
            "description": "get updated orderModel",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "orderModel",
                "obj": "$var.b532.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.orderModel"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9170267934312878,
            "y": 0.48748159057437407,
            "scheduled": false
          },
          "7242": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "completed Service Order",
            "description": "completed Service Order",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_TMF_setServiceOrderErrorMessage",
                "variables": {
                  "orderId": {
                    "editable": false,
                    "task": "job",
                    "value": "_id"
                  },
                  "state": {
                    "editable": false,
                    "task": "static",
                    "value": "completed"
                  },
                  "sendNotification": {
                    "editable": false,
                    "task": "job",
                    "value": "sendNotification"
                  },
                  "code": {
                    "editable": true,
                    "task": "static",
                    "value": 501
                  },
                  "message": {
                    "editable": true,
                    "task": "static",
                    "value": "Order Completed"
                  },
                  "errorReason": {
                    "editable": true,
                    "task": "static",
                    "value": "Success"
                  },
                  "rejectOrder": {
                    "editable": true,
                    "task": "static",
                    "value": false
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 1.6585998271391529,
            "y": 0.49189985272459497
          },
          "7285": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Operational Fallout",
            "description": "This Child workflow had an error in execution",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow had an error in execution"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.0828625235404896,
            "y": 1.2034883720930232,
            "scheduled": false
          },
          "7374": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "rejected"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2,
            "y": 0.7393225331369662
          },
          "9299": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Operational Fallout",
            "description": "This Child workflow had an error in execution",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow had an error in execution"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.4613935969868173,
            "y": 1.242732558139535,
            "scheduled": false
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -1.2904062229904927,
            "y": 0.4742268041237113
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 3.1295081967213116,
            "y": 0.5023255813953489
          },
          "21d7": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "4e96"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.1854990583804143,
            "y": 0.5
          },
          "cdce": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Operational Fallout",
            "description": "This Child workflow had an error in execution",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow had an error in execution"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.1902071563088512,
            "y": 1.1656976744186047,
            "scheduled": false
          },
          "195f": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Failure?",
            "description": "Evaluate if workflow ran into a failure or an error",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.status",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "4e96"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "failure",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.19014693171996544,
            "y": 0.8085419734904271
          },
          "37e9": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "success path",
            "description": "success path",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "",
                    "value": {
                      "task": "static",
                      "variable": ""
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.8755401901469317,
            "y": 0.5051546391752577
          },
          "bbd7": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "operational fallout",
            "description": "operational fallout",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "",
                    "value": {
                      "task": "static",
                      "variable": ""
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.8556611927398445,
            "y": 1.2459499263622975
          },
          "d49": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "business fallout: Rejected",
            "description": "business fallout: Rejected",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "",
                    "value": {
                      "task": "static",
                      "variable": ""
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.88504753673293,
            "y": 0.7334315169366715
          },
          "9d94": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Prep Result",
            "description": "Prep Result",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "orderModel",
                    "value": {
                      "task": "job",
                      "variable": "orderModel"
                    }
                  },
                  {
                    "key": "status",
                    "value": {
                      "task": "job",
                      "variable": "status"
                    }
                  },
                  {
                    "key": "reason",
                    "value": {
                      "task": "job",
                      "variable": "reason"
                    }
                  },
                  {
                    "key": "success",
                    "value": {
                      "task": "job",
                      "variable": "success",
                      "editable": false
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.168539325842697,
            "y": 0.5036818851251841
          },
          "d89b": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "b36a"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.08380414312617702,
            "y": 0.5058139534883721
          },
          "bb5f": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Operational Fallout",
            "description": "This Child workflow had an error in execution",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow had an error in execution"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.09227871939736347,
            "y": 1.181686046511628,
            "scheduled": false
          },
          "a957": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "b61"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.3973634651600753,
            "y": 0.49127906976744184
          },
          "521d": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Operational Fallout",
            "description": "This Child workflow had an error in execution",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow had an error in execution"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.3964218455743879,
            "y": 1.191860465116279,
            "scheduled": false
          },
          "bcb": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "ceec"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.660075329566855,
            "y": 0.4941860465116279
          },
          "d0a6": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Operational Fallout",
            "description": "This Child workflow had an error in execution",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow had an error in execution"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.667608286252354,
            "y": 1.193313953488372,
            "scheduled": false
          },
          "baed": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "b532"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9636992221261884,
            "y": 0.49779086892488955
          },
          "f35a": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.status",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "b532"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "failure",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9066551426101987,
            "y": 0.8703976435935199
          },
          "6e6a": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Operational Fallout",
            "description": "This Child workflow had an error in execution",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow had an error in execution"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.916195856873823,
            "y": 1.2034883720930232,
            "scheduled": false
          },
          "1d1a": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "5924"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.2089182493806772,
            "y": 0.49052396878483834
          },
          "2c34": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.status",
                        "operand_1": {
                          "variable": "job_details",
                          "task": "5924"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "failure",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.0715630885122411,
            "y": 0.9534883720930233
          },
          "6b7e": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "GW: Telemetry?",
            "description": "This Child workflow will set up telemetry\n\nInput: Parsed TMF641 msg,   state: InProgress\n\nOutput: \"result\" : { \"reason\": \"explaining text\", \"success\": <boolean>, \"status\": \"complete/failed/error to match the possible outputs of the workflow\" }",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "v\\n\\n\\nInput: Parsed TMF641 msg\\n\\nOutput: \"result\" : { \"reason\": \"explaining text\", \"success\": <boolean>, \"status\": \"complete/failed/error to match the possible outputs of the workflow\" }"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.463253509496284,
            "y": 0.4964622641509434,
            "scheduled": false
          },
          "1f4c": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "GW: Rollback Config",
            "description": "This Child workflow will run Rollback, postcheck\n\nInput: Parsed TMF641 msg,   state: InProgress\n\nOutput: \"result\" : { \"reason\": \"explaining text\", \"success\": <boolean>, \"status\": \"complete/failed/error to match the possible outputs of the workflow\" }",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow will run Rollback, postcheck\\n\\n\\nInput: Parsed TMF641 msg\\n\\nOutput: \"result\" : { \"reason\": \"explaining text\", \"success\": <boolean>, \"status\": \"complete/failed/error to match the possible outputs of the workflow\" }"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.17265625,
            "y": 0.9694767441860465,
            "scheduled": false
          },
          "43fa": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "response",
                          "task": "1f4c"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.2758945386064031,
            "y": 0.9767441860465116
          },
          "e385": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Operational Fallout",
            "description": "This Child workflow had an error in execution",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow had an error in execution"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.2919020715630884,
            "y": 1.2122093023255813,
            "scheduled": false
          },
          "ee3c": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "business fallout: Failed",
            "description": "business fallout: Failed",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "",
                    "value": {
                      "task": "static",
                      "variable": ""
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.898876404494382,
            "y": 0.9072164948453608
          },
          "c8b0": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "LC: Rollback Inventory",
            "description": "This Child workflow will run Rollback inventory system allocations\n\nInput: Parsed TMF641 msg,   state: InProgress\n\nOutput: \"result\" : { \"reason\": \"explaining text\", \"success\": <boolean>, \"status\": \"complete/failed/error to match the possible outputs of the workflow\" }",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "This Child workflow will run Rollback, postcheck\\n\\n\\nInput: Parsed TMF641 msg\\n\\nOutput: \"result\" : { \"reason\": \"explaining text\", \"success\": <boolean>, \"status\": \"complete/failed/error to match the possible outputs of the workflow\" }"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.362523540489642,
            "y": 0.8531976744186046,
            "scheduled": false
          },
          "9b3d": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Success?",
            "description": "Evaluate if workflow ran successfully",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": "$var.job.evaluation_groups"
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.4538606403013183,
            "y": 0.8662790697674418
          },
          "84e9": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Incoming Variables",
            "description": "Incoming Variables",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "serviceOrder",
                    "value": {
                      "task": "job",
                      "variable": "serviceOrder",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.216076058772688,
            "y": 0.4683357879234168
          },
          "be4c": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "orderModel",
                "value": "$var.84e9.merged_object"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.9844262295081967,
            "y": 0.6248062015503876
          },
          "4e96": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Site Validation",
            "description": "ensure site is valid",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_orderValidation_netbox",
                "variables": {
                  "orderModel": {
                    "editable": true,
                    "task": "job",
                    "value": "orderModel"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": -0.40535868625756266,
            "y": 0.4963181148748159
          },
          "ded2": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "TMF Schema Validation",
            "description": "TMF Schema Validation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "order is valid"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.7303980699638118,
            "y": 0.491928632115548,
            "scheduled": false
          },
          "b36a": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "acknowledged Service Order",
            "description": "acknowledged Service Order",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_TMF_setServiceOrderErrorMessage",
                "variables": {
                  "orderId": {
                    "editable": false,
                    "task": "job",
                    "value": "_id"
                  },
                  "state": {
                    "editable": true,
                    "task": "static",
                    "value": "acknowledged"
                  },
                  "sendNotification": {
                    "editable": false,
                    "task": "job",
                    "value": "sendNotification"
                  },
                  "code": {
                    "editable": true,
                    "task": "static",
                    "value": 101
                  },
                  "message": {
                    "editable": true,
                    "task": "static",
                    "value": "Validation Successful"
                  },
                  "errorReason": {
                    "editable": true,
                    "task": "static",
                    "value": "N/A"
                  },
                  "rejectOrder": {
                    "editable": true,
                    "task": "static",
                    "value": false
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": -0.05037159372419488,
            "y": 0.5
          },
          "b61": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Start Inventory Order",
            "description": "Start Inventory Order",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_startServiceInventoryAllocation_netbox",
                "variables": {
                  "orderModel": {
                    "editable": true,
                    "task": "job",
                    "value": "orderModel"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 0.23121387283236994,
            "y": 0.49764150943396224
          },
          "ceec": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "inProgress Service Order",
            "description": "inProgress Service Order",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_TMF_setServiceOrderErrorMessage",
                "variables": {
                  "orderId": {
                    "editable": false,
                    "task": "job",
                    "value": "_id"
                  },
                  "state": {
                    "editable": true,
                    "task": "static",
                    "value": "inProgress"
                  },
                  "sendNotification": {
                    "editable": false,
                    "task": "job",
                    "value": "sendNotification"
                  },
                  "code": {
                    "editable": true,
                    "task": "static",
                    "value": 101
                  },
                  "message": {
                    "editable": true,
                    "task": "static",
                    "value": "Created Service Order"
                  },
                  "errorReason": {
                    "editable": true,
                    "task": "static",
                    "value": "N/A"
                  },
                  "rejectOrder": {
                    "editable": true,
                    "task": "static",
                    "value": false
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 0.5254237288135594,
            "y": 0.502906976744186
          },
          "7e1a": {
            "name": "query",
            "canvasName": "query",
            "summary": "reason",
            "description": "get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result.reason",
                "obj": "$var.4e96.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.18745545260156807,
            "y": 0.6662591687041565,
            "scheduled": false
          },
          "663d": {
            "name": "query",
            "canvasName": "query",
            "summary": "reason",
            "description": "get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result.reason",
                "obj": "$var.b36a.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.08851224105461393,
            "y": 0.6438953488372093,
            "scheduled": false
          },
          "751d": {
            "name": "query",
            "canvasName": "query",
            "summary": "reason",
            "description": "get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result.reason",
                "obj": "$var.b61.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.3992467043314501,
            "y": 0.6511627906976745,
            "scheduled": false
          },
          "71b1": {
            "name": "query",
            "canvasName": "query",
            "summary": "reason",
            "description": "get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result.reason",
                "obj": "$var.ceec.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.6629001883239172,
            "y": 0.6424418604651163,
            "scheduled": false
          },
          "cb97": {
            "name": "query",
            "canvasName": "query",
            "summary": "reason",
            "description": "get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result.reason",
                "obj": "$var.b532.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9723422644770959,
            "y": 0.6391752577319587,
            "scheduled": false
          },
          "9a7a": {
            "name": "query",
            "canvasName": "query",
            "summary": "reason",
            "description": "get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result.reason",
                "obj": "$var.5924.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.222130470685384,
            "y": 0.6321070234113713,
            "scheduled": false
          },
          "c0ce": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "failed Service Order",
            "description": "failed Service Order",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_TMF_setServiceOrderErrorMessage",
                "variables": {
                  "orderId": {
                    "editable": false,
                    "task": "job",
                    "value": "_id"
                  },
                  "state": {
                    "editable": true,
                    "task": "static",
                    "value": "failed"
                  },
                  "sendNotification": {
                    "editable": false,
                    "task": "job",
                    "value": "sendNotification"
                  },
                  "code": {
                    "editable": false,
                    "task": "static",
                    "value": 502
                  },
                  "message": {
                    "editable": true,
                    "task": "static",
                    "value": "Config Rolled Back"
                  },
                  "errorReason": {
                    "editable": false,
                    "task": "job",
                    "value": "reason"
                  },
                  "rejectOrder": {
                    "editable": true,
                    "task": "static",
                    "value": false
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 1.6464995678478824,
            "y": 0.8954344624447718
          },
          "c4d5": {
            "name": "query",
            "canvasName": "query",
            "summary": "reason",
            "description": "get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result.reason",
                "obj": "$var.1f4c.response"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.2796610169491525,
            "y": 1.0799418604651163,
            "scheduled": false
          },
          "3ba3": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "FAILED Service Order",
            "description": "FAILED Service Order",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_TMF_setServiceOrderErrorMessage",
                "variables": {
                  "orderId": {
                    "editable": false,
                    "task": "job",
                    "value": "_id"
                  },
                  "state": {
                    "editable": true,
                    "task": "static",
                    "value": "failed"
                  },
                  "sendNotification": {
                    "editable": false,
                    "task": "job",
                    "value": "sendNotification"
                  },
                  "code": {
                    "editable": true,
                    "task": "static",
                    "value": 501
                  },
                  "message": {
                    "editable": true,
                    "task": "static",
                    "value": "Error While Execurting workflow"
                  },
                  "errorReason": {
                    "editable": true,
                    "task": "static",
                    "value": "N/A"
                  },
                  "rejectOrder": {
                    "editable": true,
                    "task": "static",
                    "value": false
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 1.6637856525496975,
            "y": 1.2547864506627393
          },
          "62b7": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Create Service",
            "description": "Create Service Event Notification",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_TMF_sendEventNotification",
                "variables": {
                  "tmfType": {
                    "editable": true,
                    "task": "static",
                    "value": "Service"
                  },
                  "eventType": {
                    "editable": true,
                    "task": "static",
                    "value": "CreateEvent"
                  },
                  "jobId": {
                    "editable": false,
                    "task": "job",
                    "value": "_id"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": -0.5834053586862575,
            "y": 0.49189985272459497
          },
          "f7d2": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Run Child Job",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_TMF_setServiceOrderErrorMessage",
                "variables": {
                  "orderId": {
                    "editable": false,
                    "task": "job",
                    "value": "_id"
                  },
                  "state": {
                    "editable": true,
                    "task": "static",
                    "value": "rejected"
                  },
                  "sendNotification": {
                    "editable": true,
                    "task": "static",
                    "value": true
                  },
                  "code": {
                    "editable": true,
                    "task": "static",
                    "value": 101
                  },
                  "message": {
                    "editable": false,
                    "task": "static",
                    "value": "Order validation error"
                  },
                  "errorReason": {
                    "editable": false,
                    "task": "job",
                    "value": "reason"
                  },
                  "rejectOrder": {
                    "editable": true,
                    "task": "static",
                    "value": true
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 0.22791081750619324,
            "y": 0.8049052396878483
          },
          "df1c": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "demo?",
            "description": "demo?",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "demo",
                          "task": "job",
                          "editable": true
                        },
                        "operator": ">",
                        "operand_2": {
                          "variable": "^swtich\\d1\\d",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.3550784475639968,
            "y": 0.4893867924528302
          },
          "73e": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "telemetryDemo",
                "value": {}
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.4549958711808422,
            "y": 0.3007075471698113
          },
          "cae9": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "verbose?",
            "description": "verbose?",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "demo",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "^swtich\\d\\d1",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.2791081750619322,
            "y": 0.4882075471698113
          },
          "faf7": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "",
                "message": "",
                "body": "",
                "variables": "",
                "btn_success": "",
                "btn_failure": ""
              },
              "outgoing": {}
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "x": 1.2923203963666392,
            "y": 0.30542452830188677
          },
          "c7be": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "sendNotification",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.9897750511247444,
            "y": 0.44031007751937984
          },
          "b532": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "PTA_InterfaceInventoryAllocation_netbox",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "PTA_InterfaceInventoryAllocation_netbox",
                "variables": {
                  "orderModel": {
                    "editable": true,
                    "task": "job",
                    "value": "orderModel"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 0.7867494824016563,
            "y": 0.4868421052631579
          },
          "ff5a": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "completed"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.9982713915298185,
            "y": 0.5110456553755522
          },
          "ff1a": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "failed"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.007778738115817,
            "y": 0.8998527245949927
          },
          "f50f": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "failed"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.007778738115817,
            "y": 1.2341678939617085
          },
          "ae88": {
            "name": "updateJobDescription",
            "canvasName": "updateJobDescription",
            "summary": "Set Descr",
            "description": "Set the job description",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "description": "$var.15b.return_data"
              },
              "outgoing": {
                "description": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 2.7147540983606557,
            "y": 0.5100775193798449,
            "scheduled": false
          },
          "95ab": {
            "name": "query",
            "canvasName": "query",
            "summary": "orderModel",
            "description": "get updated orderModel",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "orderModel",
                "obj": "$var.b61.job_details"
              },
              "outgoing": {
                "return_data": "$var.job.orderModel"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.35695764909248057,
            "y": 0.49779086892488955,
            "scheduled": false
          },
          "e90d": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.1697341513292434,
            "y": 0.7085271317829457
          },
          "e55": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.0858895705521472,
            "y": 0.6248062015503876
          },
          "53c3": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "JSONify",
            "description": "Turn output to json",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "<!renderedTemplate!>",
                "outputType": "json",
                "variables": "$var.458.renderedTemplate"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 2.4024590163934425,
            "y": 0.48527131782945737,
            "scheduled": false
          },
          "15b": {
            "name": "query",
            "canvasName": "query",
            "summary": "get Description",
            "description": "get Description",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "description",
                "obj": "$var.53c3.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 2.481967213114754,
            "y": 0.5038759689922481,
            "scheduled": false
          },
          "a7b8": {
            "name": "query",
            "canvasName": "query",
            "summary": "get result",
            "description": "get result summary",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "result",
                "obj": "$var.53c3.output"
              },
              "outgoing": {
                "return_data": "$var.job.result"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 2.6,
            "y": 0.4992248062015504,
            "scheduled": false
          },
          "e4fa": {
            "name": "query",
            "canvasName": "query",
            "summary": "get kafkaPayload",
            "description": "get kafka Payload",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "kafkaPayload",
                "obj": "$var.53c3.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 2.536065573770492,
            "y": 0.4992248062015504,
            "scheduled": false
          },
          "ee4d": {
            "name": "sendMessage",
            "canvasName": "sendMessage",
            "summary": "send message",
            "description": "send message",
            "location": "Adapter",
            "locationType": "Kafkav2",
            "app": "Kafkav2",
            "type": "automatic",
            "displayName": "Kafkav2",
            "variables": {
              "incoming": {
                "payloads": "$var.e4fa.return_data",
                "adapter_id": "Kafka"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 2.855737704918033,
            "y": 0.5069767441860465,
            "scheduled": false
          },
          "add2": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "reason",
                "value": "successfully provisioned Port Type-A"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.8868852459016393,
            "y": 0.44651162790697674
          }
        },
        "transitions": {
          "458": {
            "53c3": {
              "type": "standard",
              "state": "success"
            }
          },
          "2612": {
            "e55": {
              "type": "standard",
              "state": "success"
            }
          },
          "2884": {
            "21d7": {
              "type": "standard",
              "state": "success"
            }
          },
          "4995": {
            "9299": {
              "type": "standard",
              "state": "success"
            }
          },
          "5924": {
            "1d1a": {
              "type": "standard",
              "state": "success"
            }
          },
          "5926": {
            "baed": {
              "type": "standard",
              "state": "success"
            }
          },
          "7242": {
            "37e9": {
              "type": "standard",
              "state": "success"
            }
          },
          "7285": {
            "3ba3": {
              "type": "standard",
              "state": "success"
            }
          },
          "7374": {
            "e90d": {
              "type": "standard",
              "state": "success"
            }
          },
          "9299": {
            "3ba3": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "84e9": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "21d7": {
            "b36a": {
              "type": "standard",
              "state": "success"
            },
            "7e1a": {
              "type": "standard",
              "state": "failure"
            }
          },
          "cdce": {
            "3ba3": {
              "type": "standard",
              "state": "success"
            }
          },
          "195f": {
            "cdce": {
              "type": "standard",
              "state": "failure"
            },
            "f7d2": {
              "type": "standard",
              "state": "success"
            }
          },
          "37e9": {
            "ff5a": {
              "type": "standard",
              "state": "success"
            }
          },
          "bbd7": {
            "f50f": {
              "type": "standard",
              "state": "success"
            }
          },
          "d49": {
            "7374": {
              "type": "standard",
              "state": "success"
            }
          },
          "9d94": {
            "458": {
              "type": "standard",
              "state": "success"
            }
          },
          "d89b": {
            "b61": {
              "type": "standard",
              "state": "success"
            },
            "663d": {
              "type": "standard",
              "state": "failure"
            }
          },
          "bb5f": {
            "3ba3": {
              "type": "standard",
              "state": "success"
            }
          },
          "a957": {
            "ceec": {
              "type": "standard",
              "state": "success"
            },
            "751d": {
              "type": "standard",
              "state": "failure"
            }
          },
          "521d": {
            "3ba3": {
              "type": "standard",
              "state": "success"
            }
          },
          "bcb": {
            "71b1": {
              "type": "standard",
              "state": "failure"
            },
            "b532": {
              "type": "standard",
              "state": "success"
            }
          },
          "d0a6": {
            "3ba3": {
              "type": "standard",
              "state": "success"
            }
          },
          "baed": {
            "5924": {
              "type": "standard",
              "state": "success"
            },
            "cb97": {
              "type": "standard",
              "state": "failure"
            }
          },
          "f35a": {
            "6e6a": {
              "type": "standard",
              "state": "failure"
            },
            "c8b0": {
              "type": "standard",
              "state": "success"
            }
          },
          "6e6a": {
            "3ba3": {
              "type": "standard",
              "state": "success"
            }
          },
          "1d1a": {
            "9a7a": {
              "type": "standard",
              "state": "failure"
            },
            "cae9": {
              "type": "standard",
              "state": "success"
            }
          },
          "2c34": {
            "7285": {
              "type": "standard",
              "state": "failure"
            },
            "1f4c": {
              "type": "standard",
              "state": "success"
            }
          },
          "6b7e": {
            "7242": {
              "type": "standard",
              "state": "success"
            }
          },
          "6e70": {},
          "1f4c": {
            "43fa": {
              "type": "standard",
              "state": "success"
            }
          },
          "43fa": {
            "c8b0": {
              "type": "standard",
              "state": "success"
            },
            "c4d5": {
              "type": "standard",
              "state": "failure"
            }
          },
          "e385": {
            "3ba3": {
              "type": "standard",
              "state": "success"
            }
          },
          "ee3c": {
            "ff1a": {
              "type": "standard",
              "state": "success"
            }
          },
          "c8b0": {
            "9b3d": {
              "type": "standard",
              "state": "success"
            }
          },
          "9b3d": {
            "4995": {
              "type": "standard",
              "state": "failure"
            },
            "c0ce": {
              "type": "standard",
              "state": "success"
            }
          },
          "84e9": {
            "2612": {
              "type": "standard",
              "state": "success"
            }
          },
          "be4c": {
            "add2": {
              "type": "standard",
              "state": "success"
            }
          },
          "4e96": {
            "2884": {
              "type": "standard",
              "state": "success"
            }
          },
          "ded2": {
            "62b7": {
              "type": "standard",
              "state": "success"
            }
          },
          "b36a": {
            "d89b": {
              "type": "standard",
              "state": "success"
            }
          },
          "b61": {
            "95ab": {
              "type": "standard",
              "state": "success"
            }
          },
          "ceec": {
            "bcb": {
              "type": "standard",
              "state": "success"
            }
          },
          "7e1a": {
            "195f": {
              "type": "standard",
              "state": "success"
            }
          },
          "663d": {
            "bb5f": {
              "type": "standard",
              "state": "success"
            }
          },
          "751d": {
            "521d": {
              "type": "standard",
              "state": "success"
            }
          },
          "71b1": {
            "d0a6": {
              "type": "standard",
              "state": "success"
            }
          },
          "cb97": {
            "f35a": {
              "type": "standard",
              "state": "success"
            }
          },
          "9a7a": {
            "2c34": {
              "type": "standard",
              "state": "success"
            }
          },
          "c0ce": {
            "ee3c": {
              "type": "standard",
              "state": "success"
            }
          },
          "c4d5": {
            "e385": {
              "type": "standard",
              "state": "success"
            }
          },
          "3ba3": {
            "bbd7": {
              "type": "standard",
              "state": "success"
            }
          },
          "62b7": {
            "4e96": {
              "type": "standard",
              "state": "success"
            }
          },
          "f7d2": {
            "d49": {
              "type": "standard",
              "state": "success"
            }
          },
          "df1c": {
            "6b7e": {
              "type": "standard",
              "state": "failure"
            },
            "73e": {
              "type": "standard",
              "state": "success"
            }
          },
          "73e": {
            "7242": {
              "type": "standard",
              "state": "success"
            }
          },
          "cae9": {
            "faf7": {
              "type": "standard",
              "state": "success"
            },
            "df1c": {
              "type": "standard",
              "state": "failure"
            }
          },
          "faf7": {
            "df1c": {
              "type": "standard",
              "state": "success"
            }
          },
          "c7be": {
            "be4c": {
              "type": "standard",
              "state": "success"
            }
          },
          "b532": {
            "5926": {
              "type": "standard",
              "state": "success"
            }
          },
          "ff5a": {
            "9d94": {
              "type": "standard",
              "state": "success"
            }
          },
          "ff1a": {
            "e90d": {
              "type": "standard",
              "state": "success"
            }
          },
          "f50f": {
            "e90d": {
              "type": "standard",
              "state": "success"
            }
          },
          "ae88": {
            "ee4d": {
              "type": "standard",
              "state": "success"
            }
          },
          "95ab": {
            "a957": {
              "type": "standard",
              "state": "success"
            }
          },
          "e90d": {
            "9d94": {
              "type": "standard",
              "state": "success"
            }
          },
          "e55": {
            "c7be": {
              "type": "standard",
              "state": "success"
            }
          },
          "53c3": {
            "15b": {
              "type": "standard",
              "state": "success"
            }
          },
          "15b": {
            "e4fa": {
              "type": "standard",
              "state": "success"
            }
          },
          "a7b8": {
            "ae88": {
              "type": "standard",
              "state": "success"
            }
          },
          "e4fa": {
            "a7b8": {
              "type": "standard",
              "state": "success"
            }
          },
          "ee4d": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "add2": {
            "ded2": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "font_size": 12,
        "last_updated": "2023-03-30T10:22:16.157Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "5.44.64-2022.1.29.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "_id": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            },
            "serviceOrder": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          },
          "required": [
            "_id",
            "serviceOrder"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "serviceOrder": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "initiator": {
              "type": "string"
            },
            "demo": {
              "type": "number"
            },
            "orderModel": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "reason": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "sendNotification": {
              "type": "boolean"
            },
            "status": {
              "type": "string"
            },
            "success": {
              "type": "boolean"
            },
            "telemetryDemo": {
              "type": "object",
              "properties": {}
            },
            "result": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            }
          }
        },
        "created": "2023-03-22T22:17:51.546Z",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "createdVersion": "5.44.64-2022.1.29.0",
        "canvasVersion": 1,
        "preAutomationTime": 0,
        "sla": 0,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "PTA_gNMI_deployment",
        "type": "automation",
        "tasks": {
          "579": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Demo",
            "description": "Demo",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "demo",
                        "operand_1": {
                          "variable": "orderModel",
                          "task": "job"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 0,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.4553191489361703,
            "y": 0.4983922829581994
          },
          "965": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Start Precheck",
            "description": "Start Precheck",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "precheck"
              },
              "outgoing": {
                "response": "$var.job.rollbackStart"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.04964539007092199,
            "y": 0.49517684887459806,
            "scheduled": false
          },
          "2596": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "Prep Descr",
            "description": "Prep Descr",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "<!deviceName!>_<!status!>_<!rollbackStart!>_<!reason!>",
                "outputType": "string",
                "variables": "$var.3b0b.merged_object"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 2.533333333333333,
            "y": 0.4871382636655949,
            "scheduled": false
          },
          "3022": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Precheck Failed",
            "description": "Precheck Failed",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "precheck"
              },
              "outgoing": {
                "response": "$var.job.rollbackStart"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.7505486466715435,
            "y": 0.6768488745980707,
            "scheduled": false
          },
          "3331": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Deployment Failed",
            "description": "Deployment Failed",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "deploy"
              },
              "outgoing": {
                "response": "$var.job.rollbackStart"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.1794326241134752,
            "y": 0.6784565916398714,
            "scheduled": false
          },
          "3385": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get reason",
            "description": "Get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "reason",
                "obj": "$var.fa6f.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.7524822695035461,
            "y": 0.8938906752411575,
            "scheduled": false
          },
          "5319": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "gnmiResponse",
                "value": {
                  "notification": [
                    {
                      "alias": null,
                      "atomic": false,
                      "prefix": null,
                      "timestamp": 1679004919764826400,
                      "update_fail": [
                        {
                          "path": "interfaces/interface[name=Loopback10]",
                          "val": null
                        }
                      ],
                      "update": [
                        {
                          "path": "interfaces/interface[name=Loopback0]",
                          "val": {
                            "config": {
                              "name": "Loopback0",
                              "type": "iana-if-type:softwareLoopback"
                            },
                            "state": {
                              "admin-status": "UP",
                              "counters": {
                                "carrier-transitions": "1"
                              },
                              "enabled": true,
                              "ifindex": 6,
                              "last-change": "1678139685781596073",
                              "logical": true,
                              "loopback-mode": false,
                              "mtu": 1500,
                              "name": "Loopback0",
                              "oper-status": "UP",
                              "type": "iana-if-type:softwareLoopback"
                            },
                            "subinterfaces": {
                              "subinterface": [
                                {
                                  "index": 0,
                                  "openconfig-if-ip:ipv4": {
                                    "addresses": {
                                      "address": [
                                        {
                                          "config": {
                                            "name": "Loopback0",
                                            "type": "iana-if-type:softwareLoopback"
                                          },
                                          "state": {
                                            "admin-status": "UP",
                                            "counters": {
                                              "carrier-transitions": "1"
                                            },
                                            "enabled": true,
                                            "ifindex": 6,
                                            "last-change": "1678139685781596073",
                                            "logical": true,
                                            "loopback-mode": false,
                                            "mtu": 1500,
                                            "name": "Loopback0",
                                            "oper-status": "UP",
                                            "type": "iana-if-type:softwareLoopback"
                                          },
                                          "subinterfaces": {
                                            "subinterface": [
                                              {
                                                "index": 0,
                                                "openconfig-if-ip:ipv4": {
                                                  "addresses": {
                                                    "address": [
                                                      {
                                                        "config": {
                                                          "ip": "10.213.97.74",
                                                          "prefix-length": 32
                                                        },
                                                        "ip": "10.213.97.74",
                                                        "state": {
                                                          "ip": "10.213.97.74",
                                                          "origin": "STATIC",
                                                          "prefix-length": 32
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.39648866130212146,
            "y": 0.29260450160771706
          },
          "5904": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "reason",
                "value": "default"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.09361702127659574,
            "y": 0.4967845659163987
          },
          "5974": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Adapter Failure",
            "description": "Adapter Failure",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "$var.f2e2.error"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.0617021276595744,
            "y": 1.207395498392283,
            "scheduled": false
          },
          "8330": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Prep Precheck",
            "description": "Prep Precheck variables",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "orderModel",
                    "value": {
                      "task": "job",
                      "variable": "orderModel",
                      "editable": true
                    }
                  },
                  {
                    "key": "precheckResponse",
                    "value": {
                      "task": "job",
                      "variable": "gnmiResponse"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.450354609929078,
            "y": 0.5209003215434084
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -0.34609929078014184,
            "y": 0.49356913183279744
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 2.74468085106383,
            "y": 0.4919614147909968
          },
          "18f4": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "README",
            "description": "{ \"orderModel\": {\n   \"demo\":10,\n  \"serviceOrder\": {},\n    \"inventory\": {\n      \"deviceName\": \"samDevice\",\n        \"interfaceName\": \"samInterface/0\",\n        \"mtu\": 45,\n        \"interfaceDescription\": \"this inteface serves Sam\",\n        \"autoNegotiate\": false\n    }\n}\n}",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.349645390070922,
            "y": 0.2604501607717042,
            "scheduled": false
          },
          "c560": {
            "name": "gnmiGet",
            "canvasName": "gnmiGet",
            "summary": "Get Interface",
            "description": "Get Interface info",
            "location": "Adapter",
            "locationType": "tGNMI",
            "app": "tGNMI",
            "type": "automatic",
            "displayName": "tGNMI",
            "variables": {
              "incoming": {
                "host": "$var.job.deviceName",
                "path": "$var.88ec.output",
                "adapter_id": "AGtGNMI"
              },
              "outgoing": {
                "result": "$var.job.gnmiResponse"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.3829787234042553,
            "y": 0.4903536977491961,
            "scheduled": false
          },
          "af03": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get inventory values",
            "description": "Get inventory values",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "inventory",
                "obj": "$var.job.orderModel"
              },
              "outgoing": {
                "return_data": "$var.job.inventory"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.2680851063829787,
            "y": 0.5,
            "scheduled": false
          },
          "88ec": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "Create Path",
            "description": "Creates path for the interface",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "[\"openconfig-interfaces:interfaces/interface[name=<!interfaceName!>]/\"]",
                "outputType": "json",
                "variables": "$var.af03.return_data"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.25390070921985813,
            "y": 0.4887459807073955,
            "scheduled": false
          },
          "2f4": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Demo",
            "description": "Demo",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "demo",
                        "operand_1": {
                          "variable": "orderModel",
                          "task": "job"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 0,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.3078014184397163,
            "y": 0.48231511254019294
          },
          "f1ba": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Precheck Jinja",
            "description": "Eval precheck results",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "PTA_gnmi_precheck",
                "context": "$var.8330.merged_object"
              },
              "outgoing": {
                "renderedTemplate": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.5683979517190929,
            "y": 0.4855305466237942,
            "scheduled": false
          },
          "9c2": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Precheck Success",
            "description": "Precheck Success",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "output",
                          "task": "fa6f"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.7483540599853694,
            "y": 0.4871382636655949
          },
          "fa6f": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "JSONify",
            "description": "JSONify",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "<!renderedTemplate!>",
                "outputType": "json",
                "variables": "$var.f1ba.renderedTemplate"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.6686174103877103,
            "y": 0.4903536977491961,
            "scheduled": false
          },
          "aa35": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "failure"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.1106382978723404,
            "y": 0.9003215434083601
          },
          "504d": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.2602836879432626,
            "y": 0.9067524115755627
          },
          "f675": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.2609929078014184,
            "y": 0.4919614147909968
          },
          "41cf": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "success"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.095744680851064,
            "y": 0.4855305466237942
          },
          "f2e2": {
            "name": "gnmiSet",
            "canvasName": "gnmiSet",
            "summary": "Deploy Config",
            "description": "Deploy Config",
            "location": "Adapter",
            "locationType": "tGNMI",
            "app": "tGNMI",
            "type": "automatic",
            "displayName": "tGNMI",
            "variables": {
              "incoming": {
                "delete": "",
                "host": "$var.job.deviceName",
                "replace": "",
                "update": "$var.7add.return_data",
                "adapter_id": "AGtGNMI"
              },
              "outgoing": {
                "result": "$var.job.gnmiResponse"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.0588652482269503,
            "y": 0.4887459807073955,
            "scheduled": false
          },
          "7add": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get deployPayload",
            "description": "Get deployPayload",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "deployPayload",
                "obj": "$var.fa6f.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9092198581560283,
            "y": 0.48392282958199356,
            "scheduled": false
          },
          "dd3": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Demo",
            "description": "Demo",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "demo",
                        "operand_1": {
                          "variable": "orderModel",
                          "task": "job"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 0,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9617021276595744,
            "y": 0.4790996784565916
          },
          "99c6": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "gnmiResponse",
                "value": {
                  "prefix": null,
                  "response": [
                    {
                      "op": "UPDATE",
                      "path": "interfaces"
                    }
                  ],
                  "timestamp": 1679006821499831300
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.0680851063829788,
            "y": 0.2733118971061093
          },
          "2be3": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Deploy Success",
            "description": "Deploy Success",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "response[0].op",
                        "operand_1": {
                          "variable": "gnmiResponse",
                          "task": "job"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "UPDATE",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.176595744680851,
            "y": 0.4887459807073955
          },
          "3e6a": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Start Deployment",
            "description": "Start Deployment",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "deploy"
              },
              "outgoing": {
                "response": "$var.job.rollbackStart"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.8312056737588652,
            "y": 0.4903536977491961,
            "scheduled": false
          },
          "3d64": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get deviceName",
            "description": "Get deviceName",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "deviceName",
                "obj": "$var.af03.return_data"
              },
              "outgoing": {
                "return_data": "$var.job.deviceName"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.2,
            "y": 0.5016077170418006,
            "scheduled": false
          },
          "a976": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Deployment Failed",
            "description": "Deployment Failed",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.1815602836879433,
            "y": 0.8987138263665595,
            "scheduled": false
          },
          "a1e9": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Adapter Failure",
            "description": "Adapter Failure",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "$var.c560.error"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.38652482269503546,
            "y": 1.1945337620578778,
            "scheduled": false
          },
          "2be1": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "error"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.100709219858156,
            "y": 1.212218649517685
          },
          "7ef4": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Suggest Backup Config",
            "description": "Backup the config or save rollback info",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "Backup the config or save rollback info"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.14680851063829786,
            "y": 0.4983922829581994,
            "scheduled": false
          },
          "8bf": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Postcheck Jinja",
            "description": "Eval postcheck results",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "PTA_gnmi_precheck",
                "context": "$var.a46b.merged_object"
              },
              "outgoing": {
                "renderedTemplate": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.7460992907801418,
            "y": 0.49517684887459806,
            "scheduled": false
          },
          "ccfe": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Start Postcheck",
            "description": "Start Postcheck",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "postcheck"
              },
              "outgoing": {
                "response": "$var.job.rollbackStart"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.3283687943262412,
            "y": 0.4903536977491961,
            "scheduled": false
          },
          "a46b": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Prep Postcheck",
            "description": "Prep Postcheck variables",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "orderModel",
                    "value": {
                      "task": "job",
                      "variable": "orderModel",
                      "editable": false
                    }
                  },
                  {
                    "key": "precheckResponse",
                    "value": {
                      "task": "job",
                      "variable": "gnmiResponse"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.6262411347517731,
            "y": 0.5064308681672026
          },
          "55b6": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "JSONify",
            "description": "JSONify",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "<!renderedTemplate!>",
                "outputType": "json",
                "variables": "$var.8bf.renderedTemplate"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.852482269503546,
            "y": 0.4919614147909968,
            "scheduled": false
          },
          "68e8": {
            "name": "gnmiGet",
            "canvasName": "gnmiGet",
            "summary": "Get Interface",
            "description": "Get Interface info",
            "location": "Adapter",
            "locationType": "tGNMI",
            "app": "tGNMI",
            "type": "automatic",
            "displayName": "tGNMI",
            "variables": {
              "incoming": {
                "host": "$var.job.deviceName",
                "path": "$var.88ec.output",
                "adapter_id": "AGtGNMI"
              },
              "outgoing": {
                "result": "$var.job.gnmiResponse"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.5368794326241135,
            "y": 0.4983922829581994,
            "scheduled": false
          },
          "91f9": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "gnmiResponse",
                "value": {
                  "notification": [
                    {
                      "alias": null,
                      "atomic": false,
                      "prefix": null,
                      "timestamp": 1679004919764826400,
                      "update_fail": [
                        {
                          "path": "interfaces/interface[name=Loopback10]",
                          "val": null
                        }
                      ],
                      "update": [
                        {
                          "path": "interfaces/interface[name=Loopback0]",
                          "val": {
                            "config": {
                              "name": "Loopback0",
                              "type": "iana-if-type:softwareLoopback"
                            },
                            "state": {
                              "admin-status": "UP",
                              "counters": {
                                "carrier-transitions": "1"
                              },
                              "enabled": true,
                              "ifindex": 6,
                              "last-change": "1678139685781596073",
                              "logical": true,
                              "loopback-mode": false,
                              "mtu": 1500,
                              "name": "Loopback0",
                              "oper-status": "UP",
                              "type": "iana-if-type:softwareLoopback"
                            },
                            "subinterfaces": {
                              "subinterface": [
                                {
                                  "index": 0,
                                  "openconfig-if-ip:ipv4": {
                                    "addresses": {
                                      "address": [
                                        {
                                          "config": {
                                            "name": "Loopback0",
                                            "type": "iana-if-type:softwareLoopback"
                                          },
                                          "state": {
                                            "admin-status": "UP",
                                            "counters": {
                                              "carrier-transitions": "1"
                                            },
                                            "enabled": true,
                                            "ifindex": 6,
                                            "last-change": "1678139685781596073",
                                            "logical": true,
                                            "loopback-mode": false,
                                            "mtu": 1500,
                                            "name": "Loopback0",
                                            "oper-status": "UP",
                                            "type": "iana-if-type:softwareLoopback"
                                          },
                                          "subinterfaces": {
                                            "subinterface": [
                                              {
                                                "index": 0,
                                                "openconfig-if-ip:ipv4": {
                                                  "addresses": {
                                                    "address": [
                                                      {
                                                        "config": {
                                                          "ip": "10.213.97.74",
                                                          "prefix-length": 32
                                                        },
                                                        "ip": "10.213.97.74",
                                                        "state": {
                                                          "ip": "10.213.97.74",
                                                          "origin": "STATIC",
                                                          "prefix-length": 32
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.5326241134751772,
            "y": 0.2765273311897106
          },
          "c921": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Precheck Success",
            "description": "Precheck Success",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "result.success",
                        "operand_1": {
                          "variable": "output",
                          "task": "55b6"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.9418439716312057,
            "y": 0.48392282958199356
          },
          "aac": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Postcheck Failed",
            "description": "Postcheck Failed",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "postcheck"
              },
              "outgoing": {
                "response": "$var.job.rollbackStart"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.950354609929078,
            "y": 0.7202572347266881,
            "scheduled": false
          },
          "c386": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get reason",
            "description": "Get reason",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "reason",
                "obj": "$var.55b6.output"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.95177304964539,
            "y": 0.9083601286173634,
            "scheduled": false
          },
          "ba84": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Adapter Failure",
            "description": "Adapter Failure",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.5333333333333334,
            "y": 1.2138263665594855,
            "scheduled": false
          },
          "3b0b": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "prep Result",
            "description": "prep Result",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "success",
                    "value": {
                      "task": "job",
                      "variable": "success",
                      "editable": false
                    }
                  },
                  {
                    "key": "status",
                    "value": {
                      "task": "job",
                      "variable": "status"
                    }
                  },
                  {
                    "key": "reason",
                    "value": {
                      "task": "job",
                      "variable": "reason"
                    }
                  },
                  {
                    "key": "rollbackStart",
                    "value": {
                      "task": "job",
                      "variable": "rollbackStart"
                    }
                  },
                  {
                    "key": "deviceName",
                    "value": {
                      "task": "job",
                      "variable": "deviceName"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.350354609929078,
            "y": 0.4919614147909968
          },
          "e539": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "result",
                "value": "$var.3b0b.merged_object"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.427659574468085,
            "y": 0.4919614147909968
          },
          "fe50": {
            "name": "updateJobDescription",
            "canvasName": "updateJobDescription",
            "summary": "set Descr",
            "description": "Update description",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "description": "$var.2596.output"
              },
              "outgoing": {
                "description": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 2.645390070921986,
            "y": 0.4871382636655949,
            "scheduled": false
          }
        },
        "transitions": {
          "579": {
            "68e8": {
              "type": "standard",
              "state": "success"
            },
            "91f9": {
              "type": "standard",
              "state": "failure"
            }
          },
          "965": {
            "7ef4": {
              "type": "standard",
              "state": "success"
            }
          },
          "2596": {
            "fe50": {
              "type": "standard",
              "state": "success"
            }
          },
          "3022": {
            "3385": {
              "type": "standard",
              "state": "success"
            }
          },
          "3331": {
            "a976": {
              "type": "standard",
              "state": "success"
            }
          },
          "3385": {
            "aa35": {
              "type": "standard",
              "state": "success"
            }
          },
          "5319": {
            "8330": {
              "type": "standard",
              "state": "success"
            }
          },
          "5904": {
            "965": {
              "type": "standard",
              "state": "success"
            }
          },
          "5974": {
            "2be1": {
              "type": "standard",
              "state": "success"
            }
          },
          "8330": {
            "f1ba": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "18f4": {
              "type": "standard",
              "state": "success"
            },
            "af03": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "18f4": {},
          "c560": {
            "8330": {
              "type": "standard",
              "state": "success"
            },
            "a1e9": {
              "type": "standard",
              "state": "error"
            }
          },
          "af03": {
            "3d64": {
              "type": "standard",
              "state": "success"
            }
          },
          "88ec": {
            "2f4": {
              "type": "standard",
              "state": "success"
            }
          },
          "2f4": {
            "5319": {
              "type": "standard",
              "state": "failure"
            },
            "c560": {
              "type": "standard",
              "state": "success"
            }
          },
          "f1ba": {
            "fa6f": {
              "type": "standard",
              "state": "success"
            }
          },
          "9c2": {
            "3022": {
              "type": "standard",
              "state": "failure"
            },
            "3e6a": {
              "type": "standard",
              "state": "success"
            }
          },
          "fa6f": {
            "9c2": {
              "type": "standard",
              "state": "success"
            }
          },
          "aa35": {
            "504d": {
              "type": "standard",
              "state": "success"
            }
          },
          "504d": {
            "3b0b": {
              "type": "standard",
              "state": "success"
            }
          },
          "f675": {
            "3b0b": {
              "type": "standard",
              "state": "success"
            }
          },
          "41cf": {
            "f675": {
              "type": "standard",
              "state": "success"
            }
          },
          "f2e2": {
            "5974": {
              "type": "standard",
              "state": "error"
            },
            "2be3": {
              "type": "standard",
              "state": "success"
            }
          },
          "7add": {
            "dd3": {
              "type": "standard",
              "state": "success"
            }
          },
          "dd3": {
            "f2e2": {
              "type": "standard",
              "state": "success"
            },
            "99c6": {
              "type": "standard",
              "state": "failure"
            }
          },
          "99c6": {
            "2be3": {
              "type": "standard",
              "state": "success"
            }
          },
          "2be3": {
            "3331": {
              "type": "standard",
              "state": "failure"
            },
            "ccfe": {
              "type": "standard",
              "state": "success"
            }
          },
          "3e6a": {
            "7add": {
              "type": "standard",
              "state": "success"
            }
          },
          "3d64": {
            "5904": {
              "type": "standard",
              "state": "success"
            }
          },
          "a976": {
            "aa35": {
              "type": "standard",
              "state": "success"
            }
          },
          "a1e9": {
            "2be1": {
              "type": "standard",
              "state": "success"
            }
          },
          "2be1": {
            "504d": {
              "type": "standard",
              "state": "success"
            }
          },
          "7ef4": {
            "88ec": {
              "type": "standard",
              "state": "success"
            }
          },
          "8bf": {
            "55b6": {
              "type": "standard",
              "state": "success"
            }
          },
          "ccfe": {
            "579": {
              "type": "standard",
              "state": "success"
            }
          },
          "a46b": {
            "8bf": {
              "type": "standard",
              "state": "success"
            }
          },
          "55b6": {
            "c921": {
              "type": "standard",
              "state": "success"
            }
          },
          "68e8": {
            "a46b": {
              "type": "standard",
              "state": "success"
            },
            "ba84": {
              "type": "standard",
              "state": "error"
            }
          },
          "91f9": {
            "a46b": {
              "type": "standard",
              "state": "success"
            }
          },
          "c921": {
            "41cf": {
              "type": "standard",
              "state": "success"
            },
            "aac": {
              "type": "standard",
              "state": "failure"
            }
          },
          "aac": {
            "c386": {
              "type": "standard",
              "state": "success"
            }
          },
          "c386": {
            "aa35": {
              "type": "standard",
              "state": "success"
            }
          },
          "ba84": {
            "2be1": {
              "type": "standard",
              "state": "success"
            }
          },
          "3b0b": {
            "e539": {
              "type": "standard",
              "state": "success"
            }
          },
          "e539": {
            "2596": {
              "type": "standard",
              "state": "success"
            }
          },
          "fe50": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "font_size": 12,
        "last_updated": "2023-03-29T12:40:55.300Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "5.44.64-2022.1.29.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "orderModel": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            }
          },
          "required": [
            "orderModel"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "orderModel": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "rollbackStart": {
              "title": "response",
              "type": "string",
              "examples": [
                "awesome"
              ]
            },
            "gnmiResponse": {
              "type": "object",
              "properties": {
                "notification": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "alias": {
                        "type": [
                          "array",
                          "boolean",
                          "null",
                          "number",
                          "object",
                          "string"
                        ]
                      },
                      "atomic": {
                        "type": "boolean"
                      },
                      "prefix": {
                        "type": [
                          "array",
                          "boolean",
                          "null",
                          "number",
                          "object",
                          "string"
                        ]
                      },
                      "timestamp": {
                        "type": "number"
                      },
                      "update_fail": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string"
                            },
                            "val": {
                              "type": [
                                "array",
                                "boolean",
                                "null",
                                "number",
                                "object",
                                "string"
                              ]
                            }
                          }
                        }
                      },
                      "update": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string"
                            },
                            "val": {
                              "type": "object",
                              "properties": {
                                "config": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "state": {
                                  "type": "object",
                                  "properties": {
                                    "admin-status": {
                                      "type": "string"
                                    },
                                    "counters": {
                                      "type": "object",
                                      "properties": {
                                        "carrier-transitions": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "enabled": {
                                      "type": "boolean"
                                    },
                                    "ifindex": {
                                      "type": "number"
                                    },
                                    "last-change": {
                                      "type": "string"
                                    },
                                    "logical": {
                                      "type": "boolean"
                                    },
                                    "loopback-mode": {
                                      "type": "boolean"
                                    },
                                    "mtu": {
                                      "type": "number"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "oper-status": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "subinterfaces": {
                                  "type": "object",
                                  "properties": {
                                    "subinterface": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "index": {
                                            "type": "number"
                                          },
                                          "openconfig-if-ip:ipv4": {
                                            "type": "object",
                                            "properties": {
                                              "addresses": {
                                                "type": "object",
                                                "properties": {
                                                  "address": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "config": {
                                                          "type": "object",
                                                          "properties": {
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "state": {
                                                          "type": "object",
                                                          "properties": {
                                                            "admin-status": {
                                                              "type": "string"
                                                            },
                                                            "counters": {
                                                              "type": "object",
                                                              "properties": {
                                                                "carrier-transitions": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            "enabled": {
                                                              "type": "boolean"
                                                            },
                                                            "ifindex": {
                                                              "type": "number"
                                                            },
                                                            "last-change": {
                                                              "type": "string"
                                                            },
                                                            "logical": {
                                                              "type": "boolean"
                                                            },
                                                            "loopback-mode": {
                                                              "type": "boolean"
                                                            },
                                                            "mtu": {
                                                              "type": "number"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "oper-status": {
                                                              "type": "string"
                                                            },
                                                            "type": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "subinterfaces": {
                                                          "type": "object",
                                                          "properties": {
                                                            "subinterface": {
                                                              "type": "array",
                                                              "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                  "index": {
                                                                    "type": "number"
                                                                  },
                                                                  "openconfig-if-ip:ipv4": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                      "addresses": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                          "address": {
                                                                            "type": "array",
                                                                            "items": {
                                                                              "type": "object",
                                                                              "properties": {
                                                                                "config": {
                                                                                  "type": "object",
                                                                                  "properties": {
                                                                                    "ip": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "prefix-length": {
                                                                                      "type": "number"
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "ip": {
                                                                                  "type": "string"
                                                                                },
                                                                                "state": {
                                                                                  "type": "object",
                                                                                  "properties": {
                                                                                    "ip": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "origin": {
                                                                                      "type": "string"
                                                                                    },
                                                                                    "prefix-length": {
                                                                                      "type": "number"
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "reason": {
              "title": "response",
              "type": "string",
              "examples": [
                "awesome"
              ]
            },
            "deviceName": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "inventory": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "status": {
              "type": "string"
            },
            "success": {
              "type": "boolean"
            },
            "result": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          }
        },
        "created": "2023-03-29T02:40:41.823Z",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "createdVersion": "5.44.64-2022.1.29.0",
        "preAutomationTime": 0,
        "sla": 0,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "PTA_TMF_setServiceOrderErrorMessage",
        "type": "automation",
        "tasks": {
          "5352": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "success"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.00495458298926507,
            "y": 0.4988095238095238
          },
          "9050": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Run Child Job",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "TMF Set Service State",
                "variables": {
                  "jobId": {
                    "editable": true,
                    "task": "job",
                    "value": "orderId"
                  },
                  "state": {
                    "editable": true,
                    "task": "job",
                    "value": "state"
                  },
                  "key": {
                    "editable": true,
                    "task": "static",
                    "value": "serviceOrderItem.0.state"
                  },
                  "sendNotification": {
                    "editable": true,
                    "task": "job",
                    "value": "sendNotification"
                  },
                  "tmfType": {
                    "editable": true,
                    "task": "static",
                    "value": "ServiceOrder"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 1.151940545004129,
            "y": 0.7424749163879598
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -0.3385631709331131,
            "y": 0.5011904761904762
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 1.4459124690338563,
            "y": 0.4983277591973244
          },
          "d895": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set id Key Job Id",
            "description": "Set id Key Job Id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": {
                  "entity": "tmfOrder",
                  "filter": {
                    "id": "6f352bca-6d1a-452b-b25a-915026b67a18"
                  }
                },
                "path": [
                  "filter",
                  "id"
                ],
                "value": "$var.job.orderId"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.11230388109000826,
            "y": 0.49642857142857144,
            "scheduled": false
          },
          "8e19": {
            "name": "find",
            "canvasName": "find",
            "summary": "Find tmfOrder record in DB",
            "description": "Find tmfOrder record in DB",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "options": "$var.d895.object",
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.24277456647398843,
            "y": 0.5005574136008919,
            "scheduled": false
          },
          "4a42": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "PTA_TMF_setServiceOrderErrorMessage",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "642199fd3eab3f7b6d78124e",
                "variableMap": {
                  "serviceOrder": "$var.749d.return_data",
                  "code": "$var.job.code",
                  "message": "$var.job.message",
                  "errorReason": "$var.job.errorReason",
                  "status": "$var.job.status"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "output": null,
                "errorMessageObject": null,
                "filterObj": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.557911268158618,
            "y": 0.49872557349192864,
            "task_name": "PTA_TMF_setServiceOrderErrorMessage",
            "retrySettings": null
          },
          "c8c8": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval total == 1",
            "description": "Eval total == 1.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "total",
                        "operand_1": {
                          "variable": "result",
                          "task": "8e19"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 1,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.3699421965317919,
            "y": 0.4983277591973244
          },
          "749d": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query DB Order Response",
            "description": "Query DB Order Response",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response[0]",
                "obj": "$var.8e19.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.44424620874219445,
            "y": 0.5055225148683092,
            "scheduled": false
          },
          "349d": {
            "name": "findAndModify",
            "canvasName": "findAndModify",
            "summary": "Update Service Order with the Error Message",
            "description": "Update Service Order with the Error Message",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "collectionName": "tmfOrder",
                "filter": "$var.4a42.filterObj",
                "sort": {},
                "data": "$var.4a42.output",
                "multi": false,
                "upsert": true,
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.7415359207266722,
            "y": 0.49944258639910816,
            "scheduled": false
          },
          "eaa7": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval rejectOrder == true",
            "description": "Eval rejectOrder == true",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "rejectOrder",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9281585466556564,
            "y": 0.5016722408026756
          },
          "a0dc": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.2444260941370768,
            "y": 0.7034559643255296,
            "scheduled": false
          },
          "ac33": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.7192402972749794,
            "y": 0.7369007803790413,
            "scheduled": false
          },
          "e5e8": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "Automation error_JST"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.5334434351775392,
            "y": 0.7279821627647715,
            "scheduled": false
          },
          "15c2": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.2402972749793559,
            "y": 0.4988095238095238
          },
          "bae3": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "result",
                "value": "$var.b642.result"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.3410404624277457,
            "y": 0.4972129319955407
          },
          "625c": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge result",
            "description": "Merge result object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "success",
                    "value": {
                      "task": "b642",
                      "variable": "success"
                    }
                  },
                  {
                    "key": "state",
                    "value": {
                      "task": "b642",
                      "variable": "status",
                      "editable": true
                    }
                  },
                  {
                    "key": "reason",
                    "value": {
                      "task": "b642",
                      "variable": "reason",
                      "editable": false
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.2427745664739884,
            "y": 0.483835005574136
          },
          "45b8": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "failure"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.8604459124690339,
            "y": 0.7424749163879598
          },
          "239b": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9925681255161024,
            "y": 0.7513935340022296
          },
          "b642": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "PTA_resultProcessing",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "641dfb7e3eab3f7b6d78124d",
                "variableMap": {
                  "success": "$var.job.success",
                  "status": "$var.job.status",
                  "reason": "$var.job.reason"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "success": null,
                "status": null,
                "reason": null,
                "result": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.1123038810900083,
            "y": 0.4927536231884058,
            "task_name": "PTA_resultProcessing",
            "retrySettings": null
          },
          "44f": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.4244426094137077,
            "y": 0.7369007803790413,
            "scheduled": false
          },
          "5a33": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "reason",
                "value": "default"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.1255161023947151,
            "y": 0.49944258639910816
          }
        },
        "transitions": {
          "5352": {
            "d895": {
              "type": "standard",
              "state": "success"
            }
          },
          "9050": {
            "b642": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "15c2": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "d895": {
            "8e19": {
              "type": "standard",
              "state": "success"
            }
          },
          "8e19": {
            "c8c8": {
              "type": "standard",
              "state": "success"
            },
            "a0dc": {
              "type": "standard",
              "state": "error"
            }
          },
          "4a42": {
            "349d": {
              "type": "standard",
              "state": "success"
            },
            "e5e8": {
              "type": "standard",
              "state": "error"
            }
          },
          "c8c8": {
            "749d": {
              "type": "standard",
              "state": "success"
            }
          },
          "749d": {
            "4a42": {
              "type": "standard",
              "state": "success"
            },
            "44f": {
              "type": "standard",
              "state": "error"
            }
          },
          "349d": {
            "eaa7": {
              "type": "standard",
              "state": "success"
            },
            "ac33": {
              "type": "standard",
              "state": "error"
            }
          },
          "eaa7": {
            "9050": {
              "type": "standard",
              "state": "success"
            },
            "b642": {
              "type": "standard",
              "state": "failure"
            }
          },
          "f18d": {},
          "74c8": {},
          "a0dc": {
            "45b8": {
              "type": "standard",
              "state": "success"
            }
          },
          "ac33": {
            "45b8": {
              "type": "standard",
              "state": "success"
            }
          },
          "e5e8": {
            "45b8": {
              "type": "standard",
              "state": "success"
            }
          },
          "15c2": {
            "5a33": {
              "type": "standard",
              "state": "success"
            }
          },
          "bae3": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "625c": {
            "bae3": {
              "type": "standard",
              "state": "success"
            }
          },
          "45b8": {
            "239b": {
              "type": "standard",
              "state": "success"
            }
          },
          "239b": {
            "b642": {
              "type": "standard",
              "state": "success"
            }
          },
          "b642": {
            "625c": {
              "type": "standard",
              "state": "success"
            }
          },
          "44f": {
            "45b8": {
              "type": "standard",
              "state": "success"
            }
          },
          "5a33": {
            "5352": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "font_size": 12,
        "last_updated": "2023-03-30T01:11:41.774Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "5.44.64-2022.1.29.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "orderId": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            },
            "state": {
              "$id": "state",
              "type": "string",
              "examples": [
                "inProgress"
              ]
            },
            "sendNotification": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "code": {
              "$id": "code",
              "type": [
                "string",
                "number"
              ],
              "examples": [
                "500"
              ]
            },
            "message": {
              "$id": "message",
              "type": "string",
              "examples": [
                "Resource Failed"
              ]
            },
            "errorReason": {
              "$id": "errorReason",
              "type": "string",
              "examples": [
                "Port not available"
              ]
            },
            "rejectOrder": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          },
          "required": [
            "orderId",
            "state",
            "sendNotification",
            "code",
            "message",
            "errorReason",
            "rejectOrder"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "orderId": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            },
            "state": {
              "$id": "state",
              "type": "string",
              "examples": [
                "inProgress"
              ]
            },
            "sendNotification": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "code": {
              "$id": "code",
              "type": [
                "string",
                "number"
              ],
              "examples": [
                "500"
              ]
            },
            "message": {
              "$id": "message",
              "type": "string",
              "examples": [
                "Resource Failed"
              ]
            },
            "errorReason": {
              "$id": "errorReason",
              "type": "string",
              "examples": [
                "Port not available"
              ]
            },
            "rejectOrder": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "reason": {
              "title": "response",
              "type": "string",
              "examples": [
                "awesome"
              ]
            },
            "success": {
              "type": "boolean"
            },
            "result": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            }
          }
        },
        "created": "2023-03-24T17:58:34.180Z",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "createdVersion": "5.44.64-2022.1.29.0",
        "preAutomationTime": 0,
        "sla": 0,
        "canvasVersion": 1,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "PTA_orderValidation_netbox",
        "type": "automation",
        "tasks": {
          "119": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.11804123711340206,
            "y": 0.49502982107355864
          },
          "6031": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query response array",
            "description": "Query response array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.results",
                "obj": "$var.95df.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.6365979381443299,
            "y": 0.5049701789264414,
            "scheduled": false
          },
          "7764": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query port speed",
            "description": "Query port speed",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "serviceOrder.serviceOrderItem.service.serviceCharacteristic[name=port-speed].value",
                "obj": "$var.job.orderModel"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.477319587628866,
            "y": 0.5119284294234593,
            "scheduled": false
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -0.1854990583804143,
            "y": 0.49273255813953487
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 1.718414533443435,
            "y": 0.49056603773584906
          },
          "41b1": {
            "name": "getDcimSites",
            "canvasName": "getDcimSites",
            "summary": "Get Netbox site list",
            "description": "Get Netbox site list",
            "location": "Adapter",
            "locationType": "NetboxV33",
            "app": "NetboxV33",
            "type": "automatic",
            "displayName": "NetboxV33",
            "variables": {
              "incoming": {
                "id": "",
                "name": "$var.a787.return_data",
                "slug": "",
                "facility": "",
                "latitude": "",
                "longitude": "",
                "description": "",
                "created": "",
                "lastUpdated": "",
                "q": "",
                "tag": "",
                "tenantGroupId": "",
                "tenantGroup": "",
                "tenantId": "",
                "tenant": "",
                "contact": "",
                "contactRole": "",
                "contactGroup": "",
                "status": "",
                "regionId": "",
                "region": "",
                "groupId": "",
                "group": "",
                "asn": "",
                "asnId": "",
                "idN": "",
                "idLte": "",
                "idLt": "",
                "idGte": "",
                "idGt": "",
                "nameN": "",
                "nameIc": "",
                "nameNic": "",
                "nameIew": "",
                "nameNiew": "",
                "nameIsw": "",
                "nameNisw": "",
                "nameIe": "",
                "nameNie": "",
                "slugN": "",
                "slugIc": "",
                "slugNic": "",
                "slugIew": "",
                "slugNiew": "",
                "slugIsw": "",
                "slugNisw": "",
                "slugIe": "",
                "slugNie": "",
                "facilityN": "",
                "facilityIc": "",
                "facilityNic": "",
                "facilityIew": "",
                "facilityNiew": "",
                "facilityIsw": "",
                "facilityNisw": "",
                "facilityIe": "",
                "facilityNie": "",
                "latitudeN": "",
                "latitudeLte": "",
                "latitudeLt": "",
                "latitudeGte": "",
                "latitudeGt": "",
                "longitudeN": "",
                "longitudeLte": "",
                "longitudeLt": "",
                "longitudeGte": "",
                "longitudeGt": "",
                "descriptionN": "",
                "descriptionIc": "",
                "descriptionNic": "",
                "descriptionIew": "",
                "descriptionNiew": "",
                "descriptionIsw": "",
                "descriptionNisw": "",
                "descriptionIe": "",
                "descriptionNie": "",
                "createdN": "",
                "createdLte": "",
                "createdLt": "",
                "createdGte": "",
                "createdGt": "",
                "lastUpdatedN": "",
                "lastUpdatedLte": "",
                "lastUpdatedLt": "",
                "lastUpdatedGte": "",
                "lastUpdatedGt": "",
                "tagN": "",
                "tenantGroupIdN": "",
                "tenantGroupN": "",
                "tenantIdN": "",
                "tenantN": "",
                "contactN": "",
                "contactRoleN": "",
                "contactGroupN": "",
                "statusN": "",
                "regionIdN": "",
                "regionN": "",
                "groupIdN": "",
                "groupN": "",
                "asnN": "",
                "asnIdN": "",
                "ordering": "",
                "limit": "",
                "offset": "",
                "adapter_id": "netbox"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.01134020618556701,
            "y": 0.5059642147117296,
            "scheduled": false
          },
          "a787": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query TMF place id",
            "description": "Query TMF place id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "serviceOrder.serviceOrderItem.service.place[role=soe_site_id].id",
                "obj": "$var.job.orderModel"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.05257731958762887,
            "y": 0.49304174950298213,
            "scheduled": false
          },
          "48b8": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "Error configuring TMF payload"
              },
              "outgoing": {
                "response": null
              },
              "error": "$var.job.responseReason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.05360824742268041,
            "y": 0.9910536779324056,
            "scheduled": false
          },
          "90f1": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.004639175257732,
            "y": 1.0089463220675945
          },
          "405b": {
            "name": "updateJobDescription",
            "canvasName": "updateJobDescription",
            "summary": "Update Job Description",
            "description": "Overwrite the job description with a new one",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "description": "Order Validation Successful"
              },
              "outgoing": {
                "description": "$var.job.responseReason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.28659793814433,
            "y": 0.5014111006585137,
            "scheduled": false
          },
          "5a3b": {
            "name": "updateJobDescription",
            "canvasName": "updateJobDescription",
            "summary": "Update Job Description",
            "description": "Overwrite the job description with a new one",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "description": "$var.job.responseReason"
              },
              "outgoing": {
                "description": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9175257731958762,
            "y": 1.0099403578528827,
            "scheduled": false
          },
          "1d50": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query response array",
            "description": "Query response array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.results",
                "obj": "$var.41b1.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.0788659793814433,
            "y": 0.5019880715705766,
            "scheduled": false
          },
          "3ddf": {
            "name": "arrayLength",
            "canvasName": "length",
            "summary": "Gets the length of response array",
            "description": "Gets the length of response array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.1d50.return_data"
              },
              "outgoing": {
                "length": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.17164948453608248,
            "y": 0.5079522862823062,
            "scheduled": false
          },
          "6b3f": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "Site does not exist in Netbox"
              },
              "outgoing": {
                "response": null
              },
              "error": "$var.job.responseReason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.2634020618556701,
            "y": 0.6620278330019881,
            "scheduled": false
          },
          "3a44": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "success",
                    "value": {
                      "task": "job",
                      "variable": "success"
                    }
                  },
                  {
                    "key": "reason",
                    "value": {
                      "task": "job",
                      "variable": "responseReason"
                    }
                  },
                  {
                    "key": "status",
                    "value": {
                      "task": "job",
                      "variable": "status"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.3597938144329897,
            "y": 0.4995296331138288
          },
          "a87c": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "result",
                "value": "$var.3a44.merged_object"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.4283505154639176,
            "y": 0.5014111006585137
          },
          "be43": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "success"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.193298969072165,
            "y": 0.5032925682031985
          },
          "a5d9": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "failure"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.8185567010309278,
            "y": 1.0119284294234592
          },
          "4fc3": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "error"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.5582474226804124,
            "y": 0.9204771371769384
          },
          "92ef": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "Error retrieving netbox site"
              },
              "outgoing": {
                "response": null
              },
              "error": "$var.job.responseReason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.07474226804123711,
            "y": 0.7833001988071571,
            "scheduled": false
          },
          "afbf": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Readme",
            "description": "{\"orderModel\": {\n    \"serviceOrder\": {\n        \"description\": \"Port order details\",\n        \"externalId\": \"00019577_FR0007145\",\n        \"category\": \"global.fabricport\",\n        \"notificationContact\": \"VlocityDigico\",\n        \"@type\": \"ServiceOrder\",\n        \"serviceOrderItem\": [\n            {\n                \"id\": \"81b4970c-ce59-11ed-afa1-0242ac120002\",\n                \"action\": \"add\",\n                \"@type\": \"ServiceOrderItem\",\n                \"service\": {\n                    \"place\": [\n                        {\n                            \"id\": \"amh-eu\",\n                            \"name\": \"Amsterdam Hempoint\",\n                            \"role\": \"soe_site_id\",\n                            \"@type\": \"RelatedPlaceRefOrValue\"\n                        }\n                    ],\n                    \"category\": \"CFS\",\n                    \"name\": \"Network Port Connectivity\",\n                    \"description\": \"Network Port Connectivity Service\",\n                    \"serviceType\": \"network-port\",\n                    \"@type\": \"Service\",\n                    \"serviceCharacteristic\": [\n                        {\n                            \"name\": \"port-type\",\n                            \"valueType\": \"string\",\n                            \"value\": \"port-only\"\n                        },\n                        {\n                            \"name\": \"port-speed\",\n                            \"valueType\": \"string\",\n                            \"value\": \"25000\"\n                        },\n                        {\n                            \"name\": \"mtu\",\n                            \"valueType\": \"string\",\n                            \"value\": \"1500\"\n                        }\n                    ],\n                    \"serviceSpecification\": {\n                        \"id\": \"a2dd095e-d580-46ca-8645-1d08161d7caf\",\n                        \"name\": \"network-port\"\n                    }\n                }\n            }\n        ]\n    }\n}\n}",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.1824742268041237,
            "y": 0.37475149105367794,
            "scheduled": false
          },
          "abf1": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Run Evaluation Task",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "length",
                          "task": "3ddf"
                        },
                        "operator": ">",
                        "operand_2": {
                          "variable": 0,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.26082474226804125,
            "y": 0.5029821073558648
          },
          "312c": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query site id",
            "description": "Query site id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "[0].id",
                "obj": "$var.1d50.return_data"
              },
              "outgoing": {
                "return_data": "$var.job.netboxSiteId"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.31237113402061856,
            "y": 0.5049701789264414,
            "scheduled": false
          },
          "95df": {
            "name": "getDcimInterfaces",
            "canvasName": "getDcimInterfaces",
            "summary": "GET interfaces",
            "description": "GET interfaces",
            "location": "Adapter",
            "locationType": "NetboxV33",
            "app": "NetboxV33",
            "type": "automatic",
            "displayName": "NetboxV33",
            "variables": {
              "incoming": {
                "id": "",
                "name": "",
                "label": "",
                "type": "",
                "enabled": "",
                "mtu": "",
                "mgmtOnly": "",
                "poeMode": "",
                "poeType": "",
                "mode": "",
                "rfRole": "",
                "rfChannel": "",
                "rfChannelFrequency": "",
                "rfChannelWidth": "",
                "txPower": "",
                "description": "",
                "cableEnd": "",
                "q": "",
                "regionId": "",
                "region": "",
                "siteGroupId": "",
                "siteGroup": "",
                "siteId": "$var.2dae.numToString",
                "site": "",
                "locationId": "",
                "location": "",
                "rackId": "",
                "rack": "",
                "deviceId": "",
                "device": "",
                "virtualChassisId": "",
                "virtualChassis": "",
                "moduleId": "",
                "created": "",
                "lastUpdated": "",
                "tag": "",
                "cabled": "",
                "occupied": "",
                "connected": "",
                "kind": "",
                "parentId": "",
                "bridgeId": "",
                "lagId": "",
                "speed": "$var.7764.return_data",
                "duplex": "",
                "macAddress": "",
                "wwn": "",
                "vlanId": "",
                "vlan": "",
                "vrfId": "",
                "vrf": "",
                "idN": "",
                "idLte": "",
                "idLt": "",
                "idGte": "",
                "idGt": "",
                "nameN": "",
                "nameIc": "",
                "nameNic": "",
                "nameIew": "",
                "nameNiew": "",
                "nameIsw": "",
                "nameNisw": "",
                "nameIe": "",
                "nameNie": "",
                "labelN": "",
                "labelIc": "",
                "labelNic": "",
                "labelIew": "",
                "labelNiew": "",
                "labelIsw": "",
                "labelNisw": "",
                "labelIe": "",
                "labelNie": "",
                "typeN": "",
                "mtuN": "",
                "mtuLte": "",
                "mtuLt": "",
                "mtuGte": "",
                "mtuGt": "",
                "poeModeN": "",
                "poeTypeN": "",
                "modeN": "",
                "rfRoleN": "",
                "rfChannelN": "",
                "rfChannelFrequencyN": "",
                "rfChannelFrequencyLte": "",
                "rfChannelFrequencyLt": "",
                "rfChannelFrequencyGte": "",
                "rfChannelFrequencyGt": "",
                "rfChannelWidthN": "",
                "rfChannelWidthLte": "",
                "rfChannelWidthLt": "",
                "rfChannelWidthGte": "",
                "rfChannelWidthGt": "",
                "txPowerN": "",
                "txPowerLte": "",
                "txPowerLt": "",
                "txPowerGte": "",
                "txPowerGt": "",
                "descriptionN": "",
                "descriptionIc": "",
                "descriptionNic": "",
                "descriptionIew": "",
                "descriptionNiew": "",
                "descriptionIsw": "",
                "descriptionNisw": "",
                "descriptionIe": "",
                "descriptionNie": "",
                "cableEndN": "",
                "regionIdN": "",
                "regionN": "",
                "siteGroupIdN": "",
                "siteGroupN": "",
                "siteIdN": "",
                "siteN": "",
                "locationIdN": "",
                "locationN": "",
                "rackIdN": "",
                "rackN": "",
                "virtualChassisIdN": "",
                "virtualChassisN": "",
                "moduleIdN": "",
                "createdN": "",
                "createdLte": "",
                "createdLt": "",
                "createdGte": "",
                "createdGt": "",
                "lastUpdatedN": "",
                "lastUpdatedLte": "",
                "lastUpdatedLt": "",
                "lastUpdatedGte": "",
                "lastUpdatedGt": "",
                "tagN": "",
                "parentIdN": "",
                "bridgeIdN": "",
                "lagIdN": "",
                "speedN": "",
                "speedLte": "",
                "speedLt": "",
                "speedGte": "",
                "speedGt": "",
                "duplexN": "",
                "macAddressN": "",
                "macAddressIc": "",
                "macAddressNic": "",
                "macAddressIew": "",
                "macAddressNiew": "",
                "macAddressIsw": "",
                "macAddressNisw": "",
                "macAddressIe": "",
                "macAddressNie": "",
                "wwnN": "",
                "wwnIc": "",
                "wwnNic": "",
                "wwnIew": "",
                "wwnNiew": "",
                "wwnIsw": "",
                "wwnNisw": "",
                "wwnIe": "",
                "wwnNie": "",
                "vrfIdN": "",
                "vrfN": "",
                "ordering": "",
                "limit": "",
                "offset": "",
                "adapter_id": "netbox"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.5597938144329897,
            "y": 0.5168986083499006,
            "scheduled": false
          },
          "6b8f": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "error getting interface id"
              },
              "outgoing": {
                "response": null
              },
              "error": "$var.job.responseReason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.5597938144329897,
            "y": 0.7435387673956262,
            "scheduled": false
          },
          "cdcd": {
            "name": "arrayLength",
            "canvasName": "length",
            "summary": "Gets the length of response array",
            "description": "Gets the length of response array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.6031.return_data"
              },
              "outgoing": {
                "length": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.7268041237113402,
            "y": 0.510934393638171,
            "scheduled": false
          },
          "b2b5": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Run Evaluation Task",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "length",
                          "task": "3ddf"
                        },
                        "operator": ">",
                        "operand_2": {
                          "variable": 0,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.8164948453608247,
            "y": 0.5
          },
          "c0c1": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "error",
                "delay": "",
                "response": "Interface does not exist in Netbox"
              },
              "outgoing": {
                "response": null
              },
              "error": "$var.job.responseReason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.8164948453608247,
            "y": 0.6739562624254473,
            "scheduled": false
          },
          "2dae": {
            "name": "numberToString",
            "canvasName": "toString",
            "summary": "Convert site id to string",
            "description": "Convert site id to string",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Number",
            "variables": {
              "incoming": {
                "num": "$var.312c.return_data",
                "radix": ""
              },
              "outgoing": {
                "numToString": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.4020618556701031,
            "y": 0.5159045725646123,
            "scheduled": false
          },
          "9fff": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Render Jinja Template",
            "description": "Renders jinja template output.",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "netboxOrderModelInterfacePayload",
                "context": "$var.d5b7.merged_object"
              },
              "outgoing": {
                "renderedTemplate": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.9618556701030928,
            "y": 0.5023518344308561,
            "scheduled": false
          },
          "d172": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "Convert input into a different data type",
            "description": "This task takes an input and converts it to a different data type. For example, converting a number into a string.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": "<!renderedTemplate!>",
                "outputType": "json",
                "variables": "$var.9fff.renderedTemplate"
              },
              "outgoing": {
                "output": "$var.job.patchPayload"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.0871134020618556,
            "y": 0.4995296331138288,
            "scheduled": false
          },
          "d5b7": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "orderModel",
                    "value": {
                      "task": "job",
                      "variable": "orderModel"
                    }
                  },
                  {
                    "key": "getResponse",
                    "value": {
                      "task": "95df",
                      "variable": "result"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.8788659793814433,
            "y": 0.5023518344308561
          },
          "41e8": {
            "name": "query",
            "canvasName": "query",
            "summary": "orderModel",
            "description": "orderModel",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "orderModel",
                "obj": "$var.d172.output"
              },
              "outgoing": {
                "return_data": "$var.job.orderModel"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.5309661436829067,
            "y": 0.5153301886792453,
            "scheduled": false
          }
        },
        "transitions": {
          "119": {
            "a787": {
              "type": "standard",
              "state": "success"
            }
          },
          "4184": {},
          "6031": {
            "6b8f": {
              "type": "standard",
              "state": "failure"
            },
            "cdcd": {
              "type": "standard",
              "state": "success"
            }
          },
          "7651": {},
          "7764": {
            "95df": {
              "type": "standard",
              "state": "success"
            },
            "6b8f": {
              "type": "standard",
              "state": "failure"
            }
          },
          "workflow_start": {
            "119": {
              "type": "standard",
              "state": "success"
            },
            "afbf": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "dac7": {},
          "41b1": {
            "1d50": {
              "type": "standard",
              "state": "success"
            },
            "92ef": {
              "type": "standard",
              "state": "error"
            }
          },
          "49a": {},
          "a787": {
            "48b8": {
              "type": "standard",
              "state": "failure"
            },
            "41b1": {
              "type": "standard",
              "state": "success"
            }
          },
          "48b8": {
            "a5d9": {
              "type": "standard",
              "state": "error"
            }
          },
          "90f1": {
            "3a44": {
              "type": "standard",
              "state": "success"
            }
          },
          "405b": {
            "3a44": {
              "type": "standard",
              "state": "success"
            }
          },
          "5a3b": {
            "90f1": {
              "type": "standard",
              "state": "success"
            }
          },
          "3d2b": {},
          "4ac1": {},
          "1d50": {
            "3ddf": {
              "type": "standard",
              "state": "success"
            },
            "92ef": {
              "type": "standard",
              "state": "failure"
            }
          },
          "3ddf": {
            "92ef": {
              "type": "standard",
              "state": "error"
            },
            "abf1": {
              "type": "standard",
              "state": "success"
            }
          },
          "6b3f": {
            "a5d9": {
              "type": "standard",
              "state": "error"
            }
          },
          "3a44": {
            "a87c": {
              "type": "standard",
              "state": "success"
            }
          },
          "a87c": {
            "41e8": {
              "type": "standard",
              "state": "success"
            }
          },
          "be43": {
            "405b": {
              "type": "standard",
              "state": "success"
            }
          },
          "a5d9": {
            "5a3b": {
              "type": "standard",
              "state": "success"
            }
          },
          "4fc3": {
            "5a3b": {
              "type": "standard",
              "state": "success"
            }
          },
          "2c28": {},
          "92ef": {
            "4fc3": {
              "type": "standard",
              "state": "error"
            }
          },
          "afbf": {},
          "abf1": {
            "6b3f": {
              "type": "standard",
              "state": "failure"
            },
            "312c": {
              "type": "standard",
              "state": "success"
            }
          },
          "312c": {
            "6b8f": {
              "type": "standard",
              "state": "failure"
            },
            "2dae": {
              "type": "standard",
              "state": "success"
            }
          },
          "416e": {},
          "95df": {
            "6031": {
              "type": "standard",
              "state": "success"
            },
            "6b8f": {
              "type": "standard",
              "state": "error"
            }
          },
          "4b7c": {},
          "2d50": {},
          "65ff": {},
          "6b8f": {
            "4fc3": {
              "type": "standard",
              "state": "error"
            }
          },
          "cdcd": {
            "b2b5": {
              "type": "standard",
              "state": "success"
            },
            "6b8f": {
              "type": "standard",
              "state": "error"
            }
          },
          "b2b5": {
            "c0c1": {
              "type": "standard",
              "state": "failure"
            },
            "d5b7": {
              "type": "standard",
              "state": "success"
            }
          },
          "c0c1": {
            "a5d9": {
              "type": "standard",
              "state": "error"
            }
          },
          "2dae": {
            "7764": {
              "type": "standard",
              "state": "success"
            },
            "6b8f": {
              "type": "standard",
              "state": "error"
            }
          },
          "9fff": {
            "d172": {
              "type": "standard",
              "state": "success"
            }
          },
          "d172": {
            "be43": {
              "type": "standard",
              "state": "success"
            }
          },
          "d5b7": {
            "9fff": {
              "type": "standard",
              "state": "success"
            }
          },
          "41e8": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "font_size": 12,
        "last_updated": "2023-03-29T22:34:12.762Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "5.44.64-2022.1.29.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "orderModel": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            }
          },
          "required": [
            "orderModel"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "orderModel": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "success": {
              "type": "boolean"
            },
            "responseReason": {
              "type": "string",
              "title": "description",
              "examples": [
                "New job description"
              ]
            },
            "status": {
              "type": "string"
            },
            "result": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "netboxSiteId": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "patchPayload": {
              "title": "output",
              "type": [
                "array",
                "string",
                "boolean",
                "number",
                "object"
              ]
            }
          }
        },
        "created": "2023-03-22T23:21:03.075Z",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "createdVersion": "5.44.64-2022.1.29.0",
        "preAutomationTime": 0,
        "sla": 0,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "PTA_startServiceInventoryAllocation_netbox",
        "type": "automation",
        "tasks": {
          "119": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.0524499654934438,
            "y": 0.37721518987341773
          },
          "2398": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "postPluginsServiceOrderResponse",
                "value": {
                  "icode": "AD.201",
                  "response": {
                    "id": 5,
                    "tags": [],
                    "custom_fields": {},
                    "display": "19e67f34-b2c3-4c6d-9fad-ecca3ce63308",
                    "url": "http://172.20.102.120:8000/api/plugins/service-pools/service-order/5/",
                    "created": "2023-03-28T14:02:09.806427Z",
                    "last_updated": "2023-03-28T14:02:09.806449Z",
                    "custom_field_data": {},
                    "uuid": "19e67f34-b2c3-4c6d-9fad-ecca3ce63308",
                    "name": "Saleh",
                    "state": "open",
                    "description": "testDescription",
                    "category": "testCategory",
                    "external_id": "",
                    "tmf641_payload": {},
                    "service_name": null
                  },
                  "headers": {
                    "content-type": "application/json",
                    "location": "http://172.20.102.120:8000/api/plugins/service-pools/service-order/5/",
                    "vary": "Accept, Cookie, Origin",
                    "allow": "GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS",
                    "api-version": "3.4",
                    "x-content-type-options": "nosniff",
                    "referrer-policy": "same-origin",
                    "cross-origin-opener-policy": "same-origin",
                    "x-frame-options": "SAMEORIGIN",
                    "content-length": "463",
                    "server": "Unit/1.29.1",
                    "date": "Tue, 28 Mar 2023 14:02:09 GMT",
                    "connection": "close"
                  },
                  "metrics": {
                    "code": 201,
                    "timeouts": 0,
                    "redirects": 0,
                    "retries": 0,
                    "tripTime": 32,
                    "isThrottling": false,
                    "capabilityTime": "36ms"
                  }
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.09991742361684558,
            "y": 0.17806603773584906
          },
          "3981": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "Automation error"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.037159372419488024,
            "y": 0.8325471698113207,
            "scheduled": false
          },
          "4090": {
            "name": "postPluginsServicePoolsCustomService",
            "canvasName": "postPluginsServicePoolsCustomService",
            "summary": "POST service",
            "description": "POST service",
            "location": "Adapter",
            "locationType": "NetboxV33",
            "app": "NetboxV33",
            "type": "automatic",
            "displayName": "NetboxV33",
            "variables": {
              "incoming": {
                "data": "$var.54f6.createServicePayload",
                "adapter_id": "netbox"
              },
              "outgoing": {
                "result": "$var.job.customServiceResponse"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.4051069703243616,
            "y": 0.3594936708860759,
            "scheduled": false
          },
          "9644": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "result",
                "value": "$var.b329.result"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9730848861283644,
            "y": 0.37721518987341773
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -1.2972749793559042,
            "y": 0.375
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 1.0538302277432712,
            "y": 0.3810126582278481
          },
          "853b": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "orderModel_Readme",
            "description": "Sample payload:\n{\n\t\t\"orderModel\": {\n\t\t  \"inventory\": {\n\t\t\t\"autoNegotiate\": false,\n\t\t\t\"custom_fields\": [\n\t\t\t  {\n\t\t\t\t\"custom_fields\": {\n\t\t\t\t  \"status\": \"reserved\"\n\t\t\t\t},\n\t\t\t\t\"device\": {\n\t\t\t\t  \"id\": 3,\n\t\t\t\t  \"name\": \"PE1\"\n\t\t\t\t},\n\t\t\t\t\"display\": \"FourHundredGigE0/0/0/4\",\n\t\t\t\t\"id\": 15,\n\t\t\t\t\"url\": \"http://172.20.102.120:8000/api/dcim/interfaces/15/\",\n\t\t\t\t\"vdcs\": []\n\t\t\t  }\n\t\t\t],\n\t\t\t\"deviceName\": \"PE1\",\n\t\t\t\"interfaceDescription\": \"\",\n\t\t\t\"interfaceName\": \"FourHundredGigE0/0/0/4\",\n\t\t\t\"mtu\": 25000\n\t\t  },\n\t\t  \"serviceOrder\": {\n\t\t\t\"@type\": \"ServiceOrder\",\n\t\t\t\"category\": \"global.fabricport\",\n\t\t\t\"description\": \"Port order details\",\n\t\t\t\"externalId\": \"00019577_FR0007145\",\n\t\t\t\"notificationContact\": \"VlocityDigico\",\n\t\t\t\"serviceOrderItem\": [\n\t\t\t  {\n\t\t\t\t\"@type\": \"ServiceOrderItem\",\n\t\t\t\t\"action\": \"add\",\n\t\t\t\t\"id\": \"81b4970c-ce59-11ed-afa1-0242ac120002\",\n\t\t\t\t\"service\": {\n\t\t\t\t  \"@type\": \"Service\",\n\t\t\t\t  \"category\": \"CFS\",\n\t\t\t\t  \"description\": \"Network Port Connectivity Service\",\n\t\t\t\t  \"name\": \"Network Port Connectivity\",\n\t\t\t\t  \"place\": [\n\t\t\t\t\t{\n\t\t\t\t\t  \"@type\": \"RelatedPlaceRefOrValue\",\n\t\t\t\t\t  \"id\": \"amh-eu\",\n\t\t\t\t\t  \"name\": \"Amsterdam Hempoint\",\n\t\t\t\t\t  \"role\": \"soe_site_id\"\n\t\t\t\t\t}\n\t\t\t\t  ],\n\t\t\t\t  \"serviceCharacteristic\": [\n\t\t\t\t\t{\n\t\t\t\t\t  \"name\": \"port-type\",\n\t\t\t\t\t  \"value\": \"port-only\",\n\t\t\t\t\t  \"valueType\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t  \"name\": \"port-speed\",\n\t\t\t\t\t  \"value\": \"25000\",\n\t\t\t\t\t  \"valueType\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t  \"name\": \"mtu\",\n\t\t\t\t\t  \"value\": \"1500\",\n\t\t\t\t\t  \"valueType\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t  ],\n\t\t\t\t  \"serviceSpecification\": {\n\t\t\t\t\t\"id\": \"a2dd095e-d580-46ca-8645-1d08161d7caf\",\n\t\t\t\t\t\"name\": \"network-port\"\n\t\t\t\t  },\n\t\t\t\t  \"serviceType\": \"network-port\"\n\t\t\t\t}\n\t\t\t  }\n\t\t\t]\n\t\t  }\n\t\t}\n\t  }",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -1.1808333333333334,
            "y": 0.08038585209003216,
            "scheduled": false
          },
          "79b0": {
            "name": "postPluginsServicePoolsServiceOrder",
            "canvasName": "postPluginsServicePoolsServiceOrder",
            "summary": "create service order",
            "description": "create service order",
            "location": "Adapter",
            "locationType": "NetboxV33",
            "app": "NetboxV33",
            "type": "automatic",
            "displayName": "NetboxV33",
            "variables": {
              "incoming": {
                "data": "$var.5db8.merged_object",
                "adapter_id": "netbox"
              },
              "outgoing": {
                "result": "$var.job.postPluginsServiceOrderResponse"
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.13625103220478943,
            "y": 0.3608490566037736,
            "scheduled": false
          },
          "94c2": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "reason",
                "value": "default"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.9089026915113871,
            "y": 0.37721518987341773
          },
          "aa4e": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "success"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.7515527950310559,
            "y": 0.3670886075949367
          },
          "b329": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "PTA_resultProcessing",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "641dfb7e3eab3f7b6d78124d",
                "variableMap": {
                  "success": "$var.job.success",
                  "status": "$var.job.status",
                  "reason": "$var.job.reason"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "success": null,
                "status": null,
                "reason": null,
                "result": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.8640441683919945,
            "y": 0.379746835443038,
            "task_name": "PTA_resultProcessing",
            "retrySettings": null
          },
          "40ff": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "demo?",
            "description": "demo?",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "demo",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "^switch1\\d\\d",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.7550034506556246,
            "y": 0.3791866028708134
          },
          "6f87": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "demo?",
            "description": "demo?",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "demo",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "^switch\\d1\\d",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.00990916597853014,
            "y": 0.36202830188679247
          },
          "8af7": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "verbose?",
            "description": "verbose?",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "demo",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "^switch\\d\\d1",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.6528640441683919,
            "y": 0.37721518987341773
          },
          "54f6": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "PTA_InventoryAllocationPayloads",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "642496f7a62a5209a65866db",
                "variableMap": {
                  "orderModel": "$var.job.orderModel",
                  "TMF641": {},
                  "service_type": "PORT A",
                  "TMF638": {},
                  "state": "open"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "createServicePayload": null,
                "serviceOrderPayload": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.5866114561766735,
            "y": 0.3569620253164557,
            "task_name": "PTA_InventoryAllocationPayloads",
            "retrySettings": null
          },
          "88cd": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Demo_Readme",
            "description": "{\n        \"demo\": \"switch001\",\n\t\"uuid\": \"19e67f34-b2c3-4c6d-9fad-ecca3ce63308\",\n\t\"name\": \"demoTestService\",\n\t\"state\": \"open\",\n\t\"description\": \"testDescription\",\n\t\"category\": \"testCategory\",\n\t\"external_id\": \"\",\n\t\"tmf641_payload\": {}\n}",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -1.2891666666666666,
            "y": 0.07877813504823152,
            "scheduled": false
          },
          "e3eb": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Demo",
                "message": "Update interface response",
                "body": "$var.job.postPluginsServiceOrderResponse",
                "variables": "",
                "btn_success": "done",
                "btn_failure": ""
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "x": 0.639751552795031,
            "y": 0.1620253164556962,
            "scheduled": false
          },
          "2ddf": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.1337737407101569,
            "y": 0.8101415094339622,
            "scheduled": false
          },
          "81ca": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.34599504541701076,
            "y": 0.7275943396226415
          },
          "c9a6": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "failure"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.5383980181668043,
            "y": 0.7051886792452831
          },
          "866b": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "Automation error_JST"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.5873015873015873,
            "y": 0.7354430379746836,
            "scheduled": false
          },
          "99bb": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Error Response",
            "description": "Query Error Response",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "IAPerror.raw_response.response",
                "obj": "$var.79b0.error"
              },
              "outgoing": {
                "return_data": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.12303881090008258,
            "y": 0.6132075471698113,
            "scheduled": false
          },
          "acd9": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query response id",
            "description": "Query response id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response.id",
                "obj": "$var.4090.result"
              },
              "outgoing": {
                "return_data": "$var.job.service_name"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.18357487922705315,
            "y": 0.3569620253164557,
            "scheduled": false
          },
          "5db8": {
            "name": "deepmerge",
            "canvasName": "deepmerge",
            "summary": "Deep Merge Data",
            "description": "Merge data using extend",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "service_name",
                    "value": {
                      "task": "job",
                      "variable": "service_name"
                    }
                  },
                  {
                    "key": "",
                    "value": {
                      "task": "54f6",
                      "variable": "serviceOrderPayload"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.11870255348516218,
            "y": 0.36075949367088606
          },
          "11a7": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query newly created service",
            "description": "Query newly created service",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response",
                "obj": "$var.job.customServiceResponse"
              },
              "outgoing": {
                "return_data": "$var.job.newService"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.2587991718426501,
            "y": 0.36075949367088606,
            "scheduled": false,
            "retrySettings": null
          },
          "b149": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query new service order",
            "description": "Query new service order",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response",
                "obj": "$var.job.postPluginsServiceOrderResponse"
              },
              "outgoing": {
                "return_data": "$var.job.newServiceOrder"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.2629399585921325,
            "y": 0.3556962025316456,
            "scheduled": false
          },
          "ecc": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "PTA_addServiceToOrderModel",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6424a60ba62a5209a65866dc",
                "variableMap": {
                  "newService": "$var.job.newService",
                  "newServiceOrder": "$var.job.newServiceOrder",
                  "orderModel": "$var.job.orderModel"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "orderModel": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.3878536922015183,
            "y": 0.3632911392405063,
            "task_name": "PTA_addServiceToOrderModel",
            "retrySettings": null
          },
          "9cba": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "orderModel",
                "value": "$var.ecc.orderModel"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.5410544511668107,
            "y": 0.36229749631811486
          },
          "e1be": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "demo",
                "value": "switch000"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.1752933057280883,
            "y": 0.37559808612440193
          }
        },
        "transitions": {
          "119": {
            "94c2": {
              "type": "standard",
              "state": "success"
            }
          },
          "2398": {
            "ecc": {
              "type": "standard",
              "state": "success"
            }
          },
          "3981": {
            "81ca": {
              "type": "standard",
              "state": "success"
            }
          },
          "4090": {
            "11a7": {
              "type": "standard",
              "state": "success"
            }
          },
          "4184": {},
          "7651": {},
          "9644": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "853b": {
              "type": "standard",
              "state": "success"
            },
            "88cd": {
              "type": "standard",
              "state": "success"
            },
            "e1be": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "dac7": {},
          "49a": {},
          "5adf": {},
          "48b8": {},
          "90f1": {},
          "3d2b": {},
          "4ac1": {},
          "2c28": {},
          "853b": {},
          "79b0": {
            "99bb": {
              "type": "standard",
              "state": "error"
            },
            "b149": {
              "type": "standard",
              "state": "success"
            }
          },
          "94c2": {
            "40ff": {
              "type": "standard",
              "state": "success"
            }
          },
          "aa4e": {
            "b329": {
              "type": "standard",
              "state": "success"
            }
          },
          "b329": {
            "9644": {
              "type": "standard",
              "state": "success"
            }
          },
          "40ff": {
            "54f6": {
              "type": "standard",
              "state": "failure"
            }
          },
          "6f87": {
            "2398": {
              "type": "standard",
              "state": "success"
            },
            "79b0": {
              "type": "standard",
              "state": "failure"
            }
          },
          "8af7": {
            "e3eb": {
              "type": "standard",
              "state": "success"
            },
            "aa4e": {
              "type": "standard",
              "state": "failure"
            }
          },
          "6c9c": {},
          "54f6": {
            "4090": {
              "type": "standard",
              "state": "success"
            },
            "866b": {
              "type": "standard",
              "state": "error"
            }
          },
          "88cd": {},
          "e3eb": {
            "aa4e": {
              "type": "standard",
              "state": "success"
            }
          },
          "2ddf": {
            "81ca": {
              "type": "standard",
              "state": "success"
            }
          },
          "81ca": {
            "c9a6": {
              "type": "standard",
              "state": "success"
            }
          },
          "c9a6": {
            "b329": {
              "type": "standard",
              "state": "success"
            }
          },
          "866b": {
            "81ca": {
              "type": "standard",
              "state": "success"
            }
          },
          "99bb": {
            "3981": {
              "type": "standard",
              "state": "failure"
            },
            "2ddf": {
              "type": "standard",
              "state": "success"
            }
          },
          "da62": {},
          "acd9": {
            "5db8": {
              "type": "standard",
              "state": "success"
            }
          },
          "5db8": {
            "6f87": {
              "type": "standard",
              "state": "success"
            }
          },
          "11a7": {
            "acd9": {
              "type": "standard",
              "state": "success"
            }
          },
          "b149": {
            "ecc": {
              "type": "standard",
              "state": "success"
            }
          },
          "ecc": {
            "9cba": {
              "type": "standard",
              "state": "success"
            }
          },
          "9cba": {
            "8af7": {
              "type": "standard",
              "state": "success"
            }
          },
          "e1be": {
            "119": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "font_size": 12,
        "last_updated": "2023-03-30T02:01:13.013Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "5.44.64-2022.1.29.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "orderModel": {
              "$id": "orderModel",
              "type": "object",
              "properties": {
                "serviceOrder": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "serviceOrderItem": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "examples": [
                              "a2A3H0000003na6UAA"
                            ]
                          },
                          "service": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "Network Port Connectivity"
                                ]
                              }
                            },
                            "required": []
                          }
                        },
                        "required": []
                      }
                    }
                  },
                  "required": []
                }
              },
              "required": []
            }
          },
          "required": [
            "orderModel"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "orderModel": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "success": {
              "type": "boolean"
            },
            "postPluginsServiceOrderResponse": {
              "type": "object",
              "properties": {
                "icode": {
                  "type": "string"
                },
                "response": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "tags": {
                      "type": "array"
                    },
                    "custom_fields": {
                      "type": "object",
                      "properties": {}
                    },
                    "display": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "created": {
                      "type": "string"
                    },
                    "last_updated": {
                      "type": "string"
                    },
                    "custom_field_data": {
                      "type": "object",
                      "properties": {}
                    },
                    "uuid": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "state": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "external_id": {
                      "type": "string"
                    },
                    "tmf641_payload": {
                      "type": "object",
                      "properties": {}
                    },
                    "service_name": {
                      "type": [
                        "array",
                        "boolean",
                        "null",
                        "number",
                        "object",
                        "string"
                      ]
                    }
                  }
                },
                "headers": {
                  "type": "object",
                  "properties": {
                    "content-type": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "vary": {
                      "type": "string"
                    },
                    "allow": {
                      "type": "string"
                    },
                    "api-version": {
                      "type": "string"
                    },
                    "x-content-type-options": {
                      "type": "string"
                    },
                    "referrer-policy": {
                      "type": "string"
                    },
                    "cross-origin-opener-policy": {
                      "type": "string"
                    },
                    "x-frame-options": {
                      "type": "string"
                    },
                    "content-length": {
                      "type": "string"
                    },
                    "server": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string"
                    },
                    "connection": {
                      "type": "string"
                    }
                  }
                },
                "metrics": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "timeouts": {
                      "type": "number"
                    },
                    "redirects": {
                      "type": "number"
                    },
                    "retries": {
                      "type": "number"
                    },
                    "tripTime": {
                      "type": "number"
                    },
                    "isThrottling": {
                      "type": "boolean"
                    },
                    "capabilityTime": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "reason": {
              "title": "response",
              "type": "string",
              "examples": [
                "awesome"
              ]
            },
            "customServiceResponse": {
              "title": "result",
              "type": "object"
            },
            "result": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "status": {
              "type": "string"
            },
            "demo": {
              "type": "string"
            },
            "service_name": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "newService": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "newServiceOrder": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            }
          }
        },
        "created": "2023-03-29T17:35:20.449Z",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "createdVersion": "5.44.64-2022.1.29.0",
        "preAutomationTime": 0,
        "sla": 0,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "PTA_TMF_sendEventNotification",
        "type": "automation",
        "tasks": {
          "2309": {
            "name": "forEach",
            "canvasName": "forEach",
            "summary": "For Each Loop",
            "description": "Iterate over each item in an array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_array": "$var.77b6.matchedAdapters"
              },
              "outgoing": {
                "current_item": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9379900213827512,
            "y": 0.4669926650366748,
            "scheduled": false
          },
          "2637": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "Automation Error/JST"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.7910817506193228,
            "y": 0.9364548494983278,
            "scheduled": false
          },
          "3682": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.6399669694467383,
            "y": 0.9442586399108138,
            "scheduled": false
          },
          "4658": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "failure "
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.5350949628406276,
            "y": 1.2073578595317727
          },
          "5700": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval total == 1",
            "description": "Eval total == 1 - DB Order record found",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "total",
                        "operand_1": {
                          "variable": "result",
                          "task": "8b8b"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 1,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.5359942979330007,
            "y": 0.46943765281173594
          },
          "6610": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval tmfType == ServiceOrder",
            "description": "Eval tmfType == ServiceOrder",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "tmfType",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "ServiceOrder",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.1354252683732453,
            "y": -0.4682274247491639
          },
          "9172": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "Automation Error/JST"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.47894302229562347,
            "y": 0.9509476031215162,
            "scheduled": false
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -1.5028901734104045,
            "y": 0.4760312151616499
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 2.1511147811725846,
            "y": 0.48049052396878483
          },
          "a01f": {
            "name": "search",
            "canvasName": "search",
            "summary": "Search DB for Event Listeners",
            "description": "Search DB for Event Listeners",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "collectionName": "eventListeners",
                "filter": "$var.62fd.searchListeners",
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.27699784017278617,
            "y": 0.47323704333050126,
            "scheduled": false
          },
          "4aa2": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "Get Adapters",
            "description": "Get Adapters",
            "location": "Adapter",
            "locationType": "Iap",
            "app": "Iap",
            "type": "automatic",
            "displayName": "Iap",
            "variables": {
              "incoming": {
                "uriPath": "adapters",
                "restMethod": "GET",
                "queryData": {},
                "requestBody": {
                  "queryOptions": {
                    "equals": "@itentialopensource/adapter-apiServiceordering",
                    "equalsField": "model",
                    "limit": 5
                  }
                },
                "addlHeaders": {},
                "adapter_id": "localIap"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.4298056155507559,
            "y": 0.47323704333050126,
            "scheduled": false
          },
          "77b6": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Match Listener to Adapter",
            "description": "TMF Match Listener to Adapter",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d02c0fd341d802366b7c78",
                "variableMap": {
                  "eventListeners": "$var.a01f.result",
                  "adapters": "$var.f7a5.filteredAdapters"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "matchedAdapters": null,
                "matchedAdapterCount": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.7710583153347732,
            "y": 0.45964316057774,
            "task_name": "TMF Match Listener to Adapter",
            "retrySettings": null
          },
          "fa2f": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "tmfTypeModelMap",
                "value": [
                  {
                    "tmfType": "ServiceOrder",
                    "adapterModel": "@itentialopensource/adapter-tmf641_serviceOrderingManagement"
                  },
                  {
                    "tmfType": "Alarm",
                    "adapterModel": "@itentialopensource/adapter-tmf642_alarmManagement"
                  },
                  {
                    "tmfType": "Service",
                    "adapterModel": "@itentialopensource/adapter-tmf638_serviceInventoryManagement"
                  },
                  {
                    "tmfType": "Resource",
                    "adapterModel": "@itentialopensource/adapter-tmf639_resourceInventoryManagement"
                  }
                ]
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.393063583815029,
            "y": 0.5384615384615384
          },
          "d8a3": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get Adapter Name",
            "description": "Get Adapter Name",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "matchedAdapter[0]data.name",
                "obj": "$var.2309.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.0388109000825765,
            "y": 0.11371237458193979,
            "scheduled": false
          },
          "f7a5": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Filter Adapter by Model",
            "description": "TMF Filter Adapter by Model",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d0456dd341d802366b7c79",
                "variableMap": {
                  "adapters": "$var.4aa2.result",
                  "adapterModel": "$var.62fd.adapterModel"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "filteredAdapters": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.5836933045356372,
            "y": 0.4715378079864061,
            "task_name": "TMF Filter Adapter by Model",
            "retrySettings": null
          },
          "6fbd": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval AdapterCount == 1",
            "description": "Eval AdapterCount == 1",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "adapterCount",
                        "operand_1": {
                          "variable": "current_item",
                          "task": "2309"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 1,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9331131296449215,
            "y": 0.11817168338907469
          },
          "8b8b": {
            "name": "find",
            "canvasName": "find",
            "summary": "Find DB TMF Record",
            "description": "Find DB TMF Record",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "options": "$var.62fd.dbFindOrderQuery",
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.6797566371681416,
            "y": 0.47323704333050126,
            "scheduled": false
          },
          "7f": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Set Event Data",
            "description": "TMF Set Event Data",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d1042dd341d802366b7c7a",
                "variableMap": {
                  "eventType": "$var.job.eventType",
                  "orderDetails": "$var.cb0a.return_data",
                  "tmfType": "$var.job.tmfType"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "eventBody": null,
                "notificationURL": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.35424091233071986,
            "y": 0.4682151589242054,
            "task_name": "TMF Set Event Data",
            "retrySettings": null
          },
          "cb0a": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Order Record",
            "description": "Query Order Record",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response[0]",
                "obj": "$var.8b8b.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.46044191019244474,
            "y": 0.4718826405867971,
            "scheduled": false
          },
          "9e96": {
            "name": "create",
            "canvasName": "create",
            "summary": "Log Event in DB",
            "description": "Log Event in DB",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "collectionName": "eventNotifications",
                "data": "$var.7f.eventBody",
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.21311475409836064,
            "y": 0.47555012224938875,
            "scheduled": false
          },
          "948e": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Event DB Record",
            "description": "Query Event DB Record",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response",
                "obj": "$var.9e96.result"
              },
              "outgoing": {
                "return_data": "$var.job.eventRecord"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.11119030648610122,
            "y": 0.4731051344743276,
            "scheduled": false
          },
          "d46f": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set eventId to Event Object",
            "description": "Set eventId to Event Object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": "$var.948e.return_data",
                "path": [
                  "eventId"
                ],
                "value": "$var.fdba.return_data"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.11009667024704618,
            "y": 0.47323704333050126,
            "scheduled": false
          },
          "a16d": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "No Matching Adapter Found",
            "description": "No Matching Adapter Found",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "No Matching Adapter Found"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.9322873658133773,
            "y": -0.04124860646599777,
            "scheduled": false
          },
          "62fd": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JST TMF Send Notification Vars",
            "description": "Takes the job input parameters and constructs the various objects for DB queries and adapter execution.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d13c5ad341d802366b7c7c",
                "variableMap": {
                  "tmfType": "$var.job.tmfType",
                  "jobId": "$var.job.jobId",
                  "tmfTypeModelMap": "$var.job.tmfTypeModelMap"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "dbFindOrderQuery": null,
                "searchListeners": null,
                "adapterModel": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.8503207412687099,
            "y": 0.4779951100244499,
            "task_name": "TMF Send Notification Vars",
            "retrySettings": null
          },
          "bfa2": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query listener Name",
            "description": "Query listener Name",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "listener",
                "obj": "$var.2309.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9364161849710982,
            "y": 0.27647714604236345,
            "scheduled": false
          },
          "73b0": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "eventResultArray",
                "value": []
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.398018166804294,
            "y": 0.32998885172798215
          },
          "ae2a": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "listener",
                    "value": {
                      "task": "bfa2",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "adapter",
                    "value": {
                      "task": "d8a3",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "postResponse",
                    "value": {
                      "task": "721c",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.7539223781998348,
            "y": -0.39018952062430323
          },
          "721c": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query post Event Response",
            "description": "Query post Event Response",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response",
                "obj": "$var.job.eventResponse"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.6424442609413707,
            "y": -0.4013377926421405,
            "scheduled": false
          },
          "1d8e": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Adds an element to the end of the array.",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.job.eventResultArray",
                "elementN": "$var.ae2a.merged_object"
              },
              "outgoing": {
                "pushedArray": "$var.job.eventResultArray"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.9182493806771264,
            "y": -0.3935340022296544,
            "scheduled": false
          },
          "ec89": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "listener",
                    "value": {
                      "task": "bfa2",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "adapter",
                    "value": {
                      "task": "static",
                      "variable": "No Linked Adapter"
                    }
                  },
                  {
                    "key": "postResponse",
                    "value": {
                      "task": "static",
                      "variable": "Not Sent"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9265070189925682,
            "y": -0.1939799331103679
          },
          "f4a2": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Adds an element to the end of the array.",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.job.eventResultArray",
                "elementN": "$var.ec89.merged_object"
              },
              "outgoing": {
                "pushedArray": "$var.job.eventResultArray"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.93476465730801,
            "y": -0.3612040133779264,
            "scheduled": false
          },
          "d9ff": {
            "name": "findAndModify",
            "canvasName": "findAndModify",
            "summary": "Update an item in the collection in the database",
            "description": "Update an item item by id in the collection in the database",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "collectionName": "eventNotifications",
                "filter": "$var.800b.filter",
                "sort": {},
                "data": "$var.800b.data",
                "multi": false,
                "upsert": true,
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.3895486935866983,
            "y": 0.47833474936278675,
            "scheduled": false
          },
          "800b": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Event Notification - DB Find and Update",
            "description": "Creates the request body required to find and update the MongoDB document.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d3c93414410e0246e4a3d5",
                "variableMap": {
                  "eventId": "$var.fdba.return_data",
                  "result": "$var.job.eventResultArray"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "filter": null,
                "data": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.1493018259935552,
            "y": 0.47068819031435855,
            "task_name": "TMF Event Notification - DB Find and Update",
            "retrySettings": null
          },
          "fdba": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Event _id",
            "description": "Query Event _id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response._id",
                "obj": "$var.9e96.result"
              },
              "outgoing": {
                "return_data": "$var.job.eventRecord"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.02309344790547798,
            "y": 0.4766355140186916,
            "scheduled": false
          },
          "7ab3": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval tmfType == Service",
            "description": "Eval tmfType == Service",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "tmfType",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "Service",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.1469859620148637,
            "y": -0.3054626532887402
          },
          "8ad0": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval tmfType == Resource",
            "description": "Eval tmfType == Resource",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "tmfType",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "Resource",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.1428571428571428,
            "y": -0.1505016722408027
          },
          "b42": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "POST Event Notification Service Order",
            "description": "POST Event Notification TMF641 Service Order",
            "location": "Adapter",
            "locationType": "Tmf641ServiceOrderingManagement",
            "app": "Tmf641ServiceOrderingManagement",
            "type": "automatic",
            "displayName": "Tmf641ServiceOrderingManagement",
            "variables": {
              "incoming": {
                "uriPath": "$var.7f.notificationURL",
                "restMethod": "POST",
                "queryData": {},
                "requestBody": "$var.d46f.object",
                "addlHeaders": {},
                "adapter_id": "$var.d8a3.return_data"
              },
              "outgoing": {
                "result": "$var.job.eventResponse"
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.383980181668043,
            "y": -0.4682274247491639,
            "scheduled": false
          },
          "ec83": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "POST Event Notification Resource",
            "description": "Event Notification Resource TMF639",
            "location": "Adapter",
            "locationType": "Tmf639ResourceInventoryManagement",
            "app": "Tmf639ResourceInventoryManagement",
            "type": "automatic",
            "displayName": "Tmf639ResourceInventoryManagement",
            "variables": {
              "incoming": {
                "uriPath": "$var.7f.notificationURL",
                "restMethod": "POST",
                "queryData": {},
                "requestBody": "$var.d46f.object",
                "addlHeaders": {},
                "adapter_id": "$var.d8a3.return_data"
              },
              "outgoing": {
                "result": "$var.job.eventResponse"
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.383980181668043,
            "y": -0.16499442586399107,
            "scheduled": false
          },
          "b538": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "POST Event Notification Service",
            "description": "POST Event Notification Service TMF638",
            "location": "Adapter",
            "locationType": "Tmf638ServiceInventoryManagement",
            "app": "Tmf638ServiceInventoryManagement",
            "type": "automatic",
            "displayName": "Tmf638ServiceInventoryManagement",
            "variables": {
              "incoming": {
                "uriPath": "$var.7f.notificationURL",
                "restMethod": "POST",
                "queryData": {},
                "requestBody": "$var.d46f.object",
                "addlHeaders": {},
                "adapter_id": "$var.d8a3.return_data"
              },
              "outgoing": {
                "result": "$var.job.eventResponse"
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.3872832369942196,
            "y": -0.31549609810479373,
            "scheduled": false
          },
          "a65e": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "result",
                "value": "$var.caa3.merged_object"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 2.0066061106523536,
            "y": 0.48049052396878483
          },
          "caa3": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge result",
            "description": "Merge result object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "success",
                    "value": {
                      "task": "f31b",
                      "variable": "success"
                    }
                  },
                  {
                    "key": "status",
                    "value": {
                      "task": "f31b",
                      "variable": "status"
                    }
                  },
                  {
                    "key": "reason",
                    "value": {
                      "task": "f31b",
                      "variable": "reason"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.8620974401321222,
            "y": 0.483835005574136
          },
          "f31b": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "PTA_resultProcessing",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "641dfb7e3eab3f7b6d78124d",
                "variableMap": {
                  "success": "$var.job.success",
                  "status": "$var.job.status",
                  "reason": "$var.job.reason"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "success": null,
                "status": null,
                "reason": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.7200660611065235,
            "y": 0.4816053511705686,
            "task_name": "PTA_resultProcessing",
            "retrySettings": null
          },
          "ab71": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "reason",
                "value": "default"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.2394715111478116,
            "y": 0.3311036789297659
          },
          "25c5": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.2386457473162675,
            "y": 0.5351170568561873
          },
          "4a2a": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "success "
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.106523534269199,
            "y": 0.47268673355629875
          },
          "97ee": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.21882741535920727,
            "y": 0.9498327759197325,
            "scheduled": false
          },
          "c3df": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.2749793559042114,
            "y": 1,
            "scheduled": false
          },
          "ca62": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "Automation Error/JST"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.7795210569777044,
            "y": 1.0100334448160535,
            "scheduled": false
          },
          "f0a4": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.6919900908340215,
            "y": 1.2040133779264215
          },
          "bb9c": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Error Handling",
            "description": "Error Handling",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.4004954582989264,
            "y": 1.0590858416945375,
            "scheduled": false
          }
        },
        "transitions": {
          "2309": {
            "bfa2": {
              "type": "standard",
              "state": "loop"
            },
            "800b": {
              "type": "standard",
              "state": "success"
            }
          },
          "2637": {
            "4658": {
              "type": "standard",
              "state": "success"
            }
          },
          "3682": {
            "4658": {
              "type": "standard",
              "state": "success"
            }
          },
          "4658": {
            "f0a4": {
              "type": "standard",
              "state": "success"
            }
          },
          "5671": {},
          "5700": {
            "cb0a": {
              "type": "standard",
              "state": "success"
            }
          },
          "6610": {
            "7ab3": {
              "type": "standard",
              "state": "failure"
            },
            "b42": {
              "type": "standard",
              "state": "success"
            }
          },
          "6879": {},
          "9172": {
            "4658": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "73b0": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "a01f": {
            "4aa2": {
              "type": "standard",
              "state": "success"
            },
            "c3df": {
              "type": "standard",
              "state": "error"
            }
          },
          "4aa2": {
            "f7a5": {
              "type": "standard",
              "state": "success"
            },
            "c3df": {
              "type": "standard",
              "state": "error"
            }
          },
          "77b6": {
            "2309": {
              "type": "standard",
              "state": "success"
            },
            "ca62": {
              "type": "standard",
              "state": "error"
            }
          },
          "fa2f": {
            "25c5": {
              "type": "standard",
              "state": "success"
            }
          },
          "d8a3": {
            "6610": {
              "type": "standard",
              "state": "success"
            }
          },
          "f7a5": {
            "77b6": {
              "type": "standard",
              "state": "success"
            },
            "ca62": {
              "type": "standard",
              "state": "error"
            }
          },
          "6fbd": {
            "d8a3": {
              "type": "standard",
              "state": "success"
            },
            "a16d": {
              "type": "standard",
              "state": "failure"
            }
          },
          "1ee8": {},
          "8b8b": {
            "3682": {
              "type": "standard",
              "state": "error"
            },
            "5700": {
              "type": "standard",
              "state": "success"
            }
          },
          "7f": {
            "9172": {
              "type": "standard",
              "state": "error"
            },
            "9e96": {
              "type": "standard",
              "state": "success"
            }
          },
          "cb0a": {
            "7f": {
              "type": "standard",
              "state": "success"
            }
          },
          "9e96": {
            "948e": {
              "type": "standard",
              "state": "success"
            },
            "97ee": {
              "type": "standard",
              "state": "error"
            }
          },
          "948e": {
            "fdba": {
              "type": "standard",
              "state": "success"
            }
          },
          "d46f": {
            "a01f": {
              "type": "standard",
              "state": "success"
            }
          },
          "a16d": {
            "ec89": {
              "type": "standard",
              "state": "success"
            }
          },
          "62fd": {
            "2637": {
              "type": "standard",
              "state": "error"
            },
            "8b8b": {
              "type": "standard",
              "state": "success"
            }
          },
          "bfa2": {
            "6fbd": {
              "type": "standard",
              "state": "success"
            }
          },
          "73b0": {
            "fa2f": {
              "type": "standard",
              "state": "success"
            }
          },
          "ae2a": {
            "1d8e": {
              "type": "standard",
              "state": "success"
            }
          },
          "721c": {
            "ae2a": {
              "type": "standard",
              "state": "success"
            }
          },
          "1d8e": {},
          "ec89": {
            "f4a2": {
              "type": "standard",
              "state": "success"
            }
          },
          "f4a2": {},
          "d9ff": {
            "f31b": {
              "type": "standard",
              "state": "success"
            },
            "bb9c": {
              "type": "standard",
              "state": "error"
            }
          },
          "800b": {
            "d9ff": {
              "type": "standard",
              "state": "success"
            },
            "ca62": {
              "type": "standard",
              "state": "error"
            }
          },
          "fdba": {
            "d46f": {
              "type": "standard",
              "state": "success"
            }
          },
          "7ab3": {
            "8ad0": {
              "type": "standard",
              "state": "failure"
            },
            "b538": {
              "type": "standard",
              "state": "success"
            }
          },
          "8ad0": {
            "ec83": {
              "type": "standard",
              "state": "success"
            }
          },
          "b42": {
            "721c": {
              "type": "standard",
              "state": "success"
            },
            "bb9c": {
              "type": "standard",
              "state": "error"
            }
          },
          "ec83": {
            "721c": {
              "type": "standard",
              "state": "success"
            },
            "bb9c": {
              "type": "standard",
              "state": "error"
            }
          },
          "b538": {
            "721c": {
              "type": "standard",
              "state": "success"
            },
            "bb9c": {
              "type": "standard",
              "state": "error"
            }
          },
          "a65e": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "caa3": {
            "a65e": {
              "type": "standard",
              "state": "success"
            }
          },
          "f31b": {
            "caa3": {
              "type": "standard",
              "state": "success"
            }
          },
          "ab71": {
            "4a2a": {
              "type": "standard",
              "state": "success"
            }
          },
          "25c5": {
            "ab71": {
              "type": "standard",
              "state": "success"
            }
          },
          "4a2a": {
            "62fd": {
              "type": "standard",
              "state": "success"
            }
          },
          "97ee": {
            "4658": {
              "type": "standard",
              "state": "success"
            }
          },
          "c3df": {
            "4658": {
              "type": "standard",
              "state": "success"
            }
          },
          "ca62": {
            "4658": {
              "type": "standard",
              "state": "success"
            }
          },
          "f0a4": {
            "f31b": {
              "type": "standard",
              "state": "success"
            }
          },
          "bb9c": {
            "4658": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "font_size": 12,
        "last_updated": "2023-03-27T18:03:14.684Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "5.44.64-2022.1.29.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "tmfType": {
              "$id": "tmfType",
              "type": "string",
              "examples": [
                "serviceOrder",
                "alarm"
              ]
            },
            "eventType": {
              "$id": "eventType",
              "type": "string",
              "examples": [
                "ServiceOrderCreateEvent"
              ]
            },
            "jobId": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            }
          },
          "required": [
            "tmfType",
            "eventType",
            "jobId"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "tmfType": {
              "$id": "tmfType",
              "type": "string",
              "examples": [
                "serviceOrder",
                "alarm"
              ]
            },
            "eventType": {
              "$id": "eventType",
              "type": "string",
              "examples": [
                "ServiceOrderCreateEvent"
              ]
            },
            "jobId": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "reason": {
              "title": "response",
              "type": "string",
              "examples": [
                "awesome"
              ]
            },
            "status": {
              "type": "string"
            },
            "tmfTypeModelMap": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "tmfType": {
                    "type": "string"
                  },
                  "adapterModel": {
                    "type": "string"
                  }
                }
              }
            },
            "eventRecord": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "eventResultArray": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            },
            "eventResponse": {
              "title": "result",
              "type": "object"
            },
            "result": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "created": "2023-03-27T12:36:07.622Z",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "createdVersion": "5.44.64-2022.1.29.0",
        "preAutomationTime": 0,
        "sla": 0,
        "canvasVersion": 1,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "PTA_InterfaceInventoryAllocation_netbox",
        "type": "automation",
        "tasks": {
          "119": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": true
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.186335403726708,
            "y": 0.37320574162679426
          },
          "9644": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "result",
                "value": "$var.b329.result"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.0082815734989647,
            "y": 0.37559808612440193
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -1.2972749793559042,
            "y": 0.375
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 1.1152518978605934,
            "y": 0.37559808612440193
          },
          "853b": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "orderModel_Readme",
            "description": "Sample payload:\n{\n  \"orderModel\": {\n    \"inventory\": {\n      \"autoNegotiate\": false,\n      \"custom_fields\": [\n        {\n          \"custom_fields\": {\n            \"status\": \"reserved\"\n          },\n          \"device\": {\n            \"id\": 3,\n            \"name\": \"PE1\"\n          },\n          \"display\": \"FourHundredGigE0/0/0/4\",\n          \"id\": 15,\n          \"url\": \"http://172.20.102.120:8000/api/dcim/interfaces/15/\",\n          \"vdcs\": []\n        }\n      ],\n      \"deviceName\": \"PE1\",\n      \"interfaceDescription\": \"\",\n      \"interfaceName\": \"FourHundredGigE0/0/0/4\",\n      \"mtu\": 25000\n    },\n    \"serviceOrder\": {\n      \"@type\": \"ServiceOrder\",\n      \"category\": \"global.fabricport\",\n      \"description\": \"Port order details\",\n      \"externalId\": \"00019577_FR0007145\",\n      \"notificationContact\": \"VlocityDigico\",\n      \"serviceOrderItem\": [\n        {\n          \"@type\": \"ServiceOrderItem\",\n          \"action\": \"add\",\n          \"id\": \"a2A3H0000003na6UAA\",\n          \"service\": {\n            \"@type\": \"Service\",\n            \"category\": \"CFS\",\n            \"description\": \"Network Port Connectivity Service\",\n            \"name\": \"Network Port Connectivity\",\n            \"place\": [\n              {\n                \"@type\": \"RelatedPlaceRefOrValue\",\n                \"id\": \"amh-eu\",\n                \"name\": \"Amsterdam Hempoint\",\n                \"role\": \"soe_site_id\"\n              }\n            ],\n            \"serviceCharacteristic\": [\n              {\n                \"name\": \"port-type\",\n                \"value\": \"port-only\",\n                \"valueType\": \"string\"\n              },\n              {\n                \"name\": \"port-speed\",\n                \"value\": \"25000\",\n                \"valueType\": \"string\"\n              },\n              {\n                \"name\": \"mtu\",\n                \"value\": \"1500\",\n                \"valueType\": \"string\"\n              }\n            ],\n            \"serviceSpecification\": {\n              \"id\": \"a2dd095e-d580-46ca-8645-1d08161d7caf\",\n              \"name\": \"network-port\"\n            },\n            \"serviceType\": \"network-port\"\n          }\n        }\n      ]\n    }\n  }\n}",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -1.1808333333333334,
            "y": 0.08038585209003216,
            "scheduled": false
          },
          "94c2": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "reason",
                "value": "default"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.0793650793650793,
            "y": 0.37320574162679426
          },
          "aa4e": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "success"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.5293146160198183,
            "y": 0.3754740834386852
          },
          "b329": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "PTA_resultProcessing",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "641dfb7e3eab3f7b6d78124d",
                "variableMap": {
                  "success": "$var.job.success",
                  "status": "$var.job.status",
                  "reason": "$var.job.reason"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "success": null,
                "status": null,
                "reason": null,
                "result": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.8661145617667356,
            "y": 0.37440191387559807,
            "task_name": "PTA_resultProcessing",
            "retrySettings": null
          },
          "40ff": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "demo?",
            "description": "demo?",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "demo",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "^switch1\\d\\d",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.831608005521049,
            "y": 0.37679425837320574
          },
          "8af7": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "verbose?",
            "description": "verbose?",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "demo",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "^switch\\d\\d1",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.2708505367464905,
            "y": 0.3584905660377358
          },
          "a6e8": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "decimInterfaceResponse",
                "value": {
                  "icode": "AD.200",
                  "response": "success",
                  "headers": {
                    "content-type": "application/json",
                    "vary": "Accept, Cookie, Origin",
                    "allow": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS, TRACE",
                    "api-version": "3.4",
                    "x-content-type-options": "nosniff",
                    "referrer-policy": "same-origin",
                    "cross-origin-opener-policy": "same-origin",
                    "x-frame-options": "SAMEORIGIN",
                    "content-length": "1204",
                    "server": "Unit/1.29.1",
                    "date": "Tue, 28 Mar 2023 14:02:09 GMT",
                    "connection": "close"
                  },
                  "metrics": {
                    "code": 200,
                    "timeouts": 0,
                    "redirects": 0,
                    "retries": 0,
                    "tripTime": 133,
                    "isThrottling": false,
                    "capabilityTime": "273ms"
                  }
                }
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.15606936416184972,
            "y": 0.18278301886792453
          },
          "88cd": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Demo_Readme",
            "description": "{\n        \"demo\": \"switch001\",\n\t\"uuid\": \"19e67f34-b2c3-4c6d-9fad-ecca3ce63308\",\n\t\"name\": \"demoTestService\",\n\t\"state\": \"open\",\n\t\"description\": \"testDescription\",\n\t\"category\": \"testCategory\",\n\t\"external_id\": \"\",\n\t\"tmf641_payload\": {}\n}",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -1.2891666666666666,
            "y": 0.07877813504823152,
            "scheduled": false
          },
          "e3eb": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Data",
            "description": "Displays a message and runtime data to an operator. This can be used to request a decision, or used for acknowledgement only.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Demo",
                "message": "Update interface response",
                "body": "$var.job.decimInterfaceResponse",
                "variables": "",
                "btn_success": "done",
                "btn_failure": ""
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "deprecated": false,
            "groups": [],
            "x": 0.27663088356729976,
            "y": 0.18514150943396226,
            "scheduled": false
          },
          "ae0b": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "$var.job.reason"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.3609385783298827,
            "y": 0.7105263157894737,
            "scheduled": false
          },
          "81ca": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "success",
                "value": false
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.34599504541701076,
            "y": 0.7275943396226415
          },
          "c9a6": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "status",
                "value": "failure"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.5383980181668043,
            "y": 0.7051886792452831
          },
          "c3a0": {
            "name": "patchDcimInterfaces",
            "canvasName": "patchDcimInterfaces",
            "summary": "Update interface",
            "description": "Update interface",
            "location": "Adapter",
            "locationType": "NetboxV33",
            "app": "NetboxV33",
            "type": "automatic",
            "displayName": "NetboxV33",
            "variables": {
              "incoming": {
                "data": "$var.job.customFields",
                "adapter_id": "netbox"
              },
              "outgoing": {
                "result": "$var.job.decimInterfaceResponse"
              },
              "error": "$var.job.reason",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.3547273982056591,
            "y": 0.3827751196172249,
            "scheduled": false
          },
          "11ef": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query custom fields",
            "description": "Query custom fields",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "inventory.custom_fields",
                "obj": "$var.job.orderModel"
              },
              "outgoing": {
                "return_data": "$var.job.customFields"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.6259489302967564,
            "y": 0.39712918660287083,
            "scheduled": false
          },
          "da9c": {
            "name": "getDcimInterfaces",
            "canvasName": "getDcimInterfaces",
            "summary": "GET interface",
            "description": "GET interface",
            "location": "Adapter",
            "locationType": "NetboxV33",
            "app": "NetboxV33",
            "type": "automatic",
            "displayName": "NetboxV33",
            "variables": {
              "incoming": {
                "id": "$var.6b78.return_data",
                "name": "",
                "label": "",
                "type": "",
                "enabled": "",
                "mtu": "",
                "mgmtOnly": "",
                "poeMode": "",
                "poeType": "",
                "mode": "",
                "rfRole": "",
                "rfChannel": "",
                "rfChannelFrequency": "",
                "rfChannelWidth": "",
                "txPower": "",
                "description": "",
                "cableEnd": "",
                "q": "",
                "regionId": "",
                "region": "",
                "siteGroupId": "",
                "siteGroup": "",
                "siteId": "",
                "site": "",
                "locationId": "",
                "location": "",
                "rackId": "",
                "rack": "",
                "deviceId": "",
                "device": "",
                "virtualChassisId": "",
                "virtualChassis": "",
                "moduleId": "",
                "created": "",
                "lastUpdated": "",
                "tag": "",
                "cabled": "",
                "occupied": "",
                "connected": "",
                "kind": "",
                "parentId": "",
                "bridgeId": "",
                "lagId": "",
                "speed": "",
                "duplex": "",
                "macAddress": "",
                "wwn": "",
                "vlanId": "",
                "vlan": "",
                "vrfId": "",
                "vrf": "",
                "idN": "",
                "idLte": "",
                "idLt": "",
                "idGte": "",
                "idGt": "",
                "nameN": "",
                "nameIc": "",
                "nameNic": "",
                "nameIew": "",
                "nameNiew": "",
                "nameIsw": "",
                "nameNisw": "",
                "nameIe": "",
                "nameNie": "",
                "labelN": "",
                "labelIc": "",
                "labelNic": "",
                "labelIew": "",
                "labelNiew": "",
                "labelIsw": "",
                "labelNisw": "",
                "labelIe": "",
                "labelNie": "",
                "typeN": "",
                "mtuN": "",
                "mtuLte": "",
                "mtuLt": "",
                "mtuGte": "",
                "mtuGt": "",
                "poeModeN": "",
                "poeTypeN": "",
                "modeN": "",
                "rfRoleN": "",
                "rfChannelN": "",
                "rfChannelFrequencyN": "",
                "rfChannelFrequencyLte": "",
                "rfChannelFrequencyLt": "",
                "rfChannelFrequencyGte": "",
                "rfChannelFrequencyGt": "",
                "rfChannelWidthN": "",
                "rfChannelWidthLte": "",
                "rfChannelWidthLt": "",
                "rfChannelWidthGte": "",
                "rfChannelWidthGt": "",
                "txPowerN": "",
                "txPowerLte": "",
                "txPowerLt": "",
                "txPowerGte": "",
                "txPowerGt": "",
                "descriptionN": "",
                "descriptionIc": "",
                "descriptionNic": "",
                "descriptionIew": "",
                "descriptionNiew": "",
                "descriptionIsw": "",
                "descriptionNisw": "",
                "descriptionIe": "",
                "descriptionNie": "",
                "cableEndN": "",
                "regionIdN": "",
                "regionN": "",
                "siteGroupIdN": "",
                "siteGroupN": "",
                "siteIdN": "",
                "siteN": "",
                "locationIdN": "",
                "locationN": "",
                "rackIdN": "",
                "rackN": "",
                "virtualChassisIdN": "",
                "virtualChassisN": "",
                "moduleIdN": "",
                "createdN": "",
                "createdLte": "",
                "createdLt": "",
                "createdGte": "",
                "createdGt": "",
                "lastUpdatedN": "",
                "lastUpdatedLte": "",
                "lastUpdatedLt": "",
                "lastUpdatedGte": "",
                "lastUpdatedGt": "",
                "tagN": "",
                "parentIdN": "",
                "bridgeIdN": "",
                "lagIdN": "",
                "speedN": "",
                "speedLte": "",
                "speedLt": "",
                "speedGte": "",
                "speedGt": "",
                "duplexN": "",
                "macAddressN": "",
                "macAddressIc": "",
                "macAddressNic": "",
                "macAddressIew": "",
                "macAddressNiew": "",
                "macAddressIsw": "",
                "macAddressNisw": "",
                "macAddressIe": "",
                "macAddressNie": "",
                "wwnN": "",
                "wwnIc": "",
                "wwnNic": "",
                "wwnIew": "",
                "wwnNiew": "",
                "wwnIsw": "",
                "wwnNisw": "",
                "wwnIe": "",
                "wwnNie": "",
                "vrfIdN": "",
                "vrfN": "",
                "ordering": "",
                "limit": "",
                "offset": "",
                "adapter_id": "netbox"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.08143547273982056,
            "y": 0.3803827751196172,
            "scheduled": false
          },
          "6b78": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query interface id",
            "description": "Query interface id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "[0].id",
                "obj": "$var.job.customFields"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.21877156659765357,
            "y": 0.3827751196172249,
            "scheduled": false
          },
          "f3ef": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Run Evaluation Task",
            "description": "Run an evaluation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "response.results[0].custom_fields.status",
                        "operand_1": {
                          "variable": "result",
                          "task": "da9c"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "reserved",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.07108350586611456,
            "y": 0.3660287081339713
          },
          "951b": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "demo",
                "value": "switch000"
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.9510006901311249,
            "y": 0.37320574162679426
          },
          "f1a9": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "interface reservation failed"
              },
              "outgoing": {
                "response": "$var.job.reason"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.0738440303657695,
            "y": 0.6160287081339713,
            "scheduled": false
          }
        },
        "transitions": {
          "119": {
            "94c2": {
              "type": "standard",
              "state": "success"
            }
          },
          "4184": {},
          "7651": {},
          "9644": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "119": {
              "type": "standard",
              "state": "success"
            },
            "853b": {
              "type": "standard",
              "state": "success"
            },
            "88cd": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "dac7": {},
          "49a": {},
          "5adf": {},
          "48b8": {},
          "90f1": {},
          "3d2b": {},
          "4ac1": {},
          "2c28": {},
          "853b": {},
          "94c2": {
            "951b": {
              "type": "standard",
              "state": "success"
            }
          },
          "aa4e": {
            "b329": {
              "type": "standard",
              "state": "success"
            }
          },
          "b329": {
            "9644": {
              "type": "standard",
              "state": "success"
            }
          },
          "40ff": {
            "a6e8": {
              "type": "standard",
              "state": "success"
            },
            "11ef": {
              "type": "standard",
              "state": "failure"
            }
          },
          "8af7": {
            "e3eb": {
              "type": "standard",
              "state": "success"
            },
            "aa4e": {
              "type": "standard",
              "state": "failure"
            }
          },
          "a6e8": {
            "8af7": {
              "type": "standard",
              "state": "success"
            }
          },
          "6c9c": {},
          "88cd": {},
          "e3eb": {
            "aa4e": {
              "type": "standard",
              "state": "success"
            }
          },
          "ae0b": {
            "81ca": {
              "type": "standard",
              "state": "success"
            }
          },
          "81ca": {
            "c9a6": {
              "type": "standard",
              "state": "success"
            }
          },
          "c9a6": {
            "b329": {
              "type": "standard",
              "state": "success"
            }
          },
          "c3a0": {
            "ae0b": {
              "type": "standard",
              "state": "error"
            },
            "6b78": {
              "type": "standard",
              "state": "success"
            }
          },
          "da62": {},
          "11ef": {
            "c3a0": {
              "type": "standard",
              "state": "success"
            }
          },
          "d9f3": {},
          "da9c": {
            "f3ef": {
              "type": "standard",
              "state": "success"
            }
          },
          "6b78": {
            "da9c": {
              "type": "standard",
              "state": "success"
            }
          },
          "f3ef": {
            "8af7": {
              "type": "standard",
              "state": "success"
            },
            "f1a9": {
              "type": "standard",
              "state": "failure"
            }
          },
          "951b": {
            "40ff": {
              "type": "standard",
              "state": "success"
            }
          },
          "f1a9": {
            "81ca": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "font_size": 12,
        "last_updated": "2023-03-30T09:25:35.240Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "5.44.64-2022.1.29.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "orderModel": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            }
          },
          "required": [
            "orderModel"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "orderModel": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "success": {
              "type": "boolean"
            },
            "result": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "reason": {
              "title": "response",
              "type": "string",
              "examples": [
                "awesome"
              ]
            },
            "status": {
              "type": "string"
            },
            "demo": {
              "type": "string"
            },
            "decimInterfaceResponse": {
              "type": "object",
              "properties": {
                "icode": {
                  "type": "string"
                },
                "response": {
                  "type": "string"
                },
                "headers": {
                  "type": "object",
                  "properties": {
                    "content-type": {
                      "type": "string"
                    },
                    "vary": {
                      "type": "string"
                    },
                    "allow": {
                      "type": "string"
                    },
                    "api-version": {
                      "type": "string"
                    },
                    "x-content-type-options": {
                      "type": "string"
                    },
                    "referrer-policy": {
                      "type": "string"
                    },
                    "cross-origin-opener-policy": {
                      "type": "string"
                    },
                    "x-frame-options": {
                      "type": "string"
                    },
                    "content-length": {
                      "type": "string"
                    },
                    "server": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string"
                    },
                    "connection": {
                      "type": "string"
                    }
                  }
                },
                "metrics": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "timeouts": {
                      "type": "number"
                    },
                    "redirects": {
                      "type": "number"
                    },
                    "retries": {
                      "type": "number"
                    },
                    "tripTime": {
                      "type": "number"
                    },
                    "isThrottling": {
                      "type": "boolean"
                    },
                    "capabilityTime": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "customFields": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            }
          }
        },
        "created": "2023-03-29T17:50:02.357Z",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "createdVersion": "5.44.64-2022.1.29.0",
        "preAutomationTime": 0,
        "sla": 0,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "TMF Set Service State",
        "type": "automation",
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -0.0021382751247327157,
            "y": 0.49144254278728605
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 0.9244060475161987,
            "y": 0.3220050977060323
          },
          "45b2": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Set State - DB Find and Update",
            "description": "Creates the request body required to find and update the MongoDB document.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d128e5d341d802366b7c7b",
                "variableMap": {
                  "jobId": "$var.job.jobId",
                  "state": "$var.job.state",
                  "key": "$var.job.key"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "outgoing": null,
                "collectionName": null,
                "filter": null,
                "data": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.18528761061946902,
            "y": 0.49107901444350044,
            "task_name": "TMF Set State - DB Find and Update",
            "retrySettings": null
          },
          "35d0": {
            "name": "findAndModify",
            "canvasName": "findAndModify",
            "summary": "Update Order State",
            "description": "Update Order State",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "collectionName": "$var.45b2.collectionName",
                "filter": "$var.45b2.filter",
                "sort": {},
                "data": "$var.45b2.data",
                "multi": false,
                "upsert": true,
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.41910192444761224,
            "y": 0.49540078843626806,
            "scheduled": false
          },
          "e793": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Updated Order Object",
            "description": "Query Updated Order Object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response",
                "obj": "$var.35d0.result"
              },
              "outgoing": {
                "return_data": "$var.job.tmfOrder"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.5830363506771205,
            "y": 0.4963325183374083,
            "scheduled": false
          },
          "be3b": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval sendNotification == true",
            "description": "Eval sendNotification == true",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "sendNotification",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.7184604419101924,
            "y": 0.49877750611246946
          },
          "630c": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Run Send Event Notification",
            "description": "Run Send Event Notification",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "TMF Send Event Notification",
                "variables": {
                  "tmfType": {
                    "editable": true,
                    "task": "job",
                    "value": "tmfType"
                  },
                  "eventType": {
                    "editable": true,
                    "task": "static",
                    "value": "StateChangeEvent"
                  },
                  "jobId": {
                    "editable": true,
                    "task": "job",
                    "value": "jobId"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": null
              }
            },
            "deprecated": false,
            "groups": [],
            "actor": "job",
            "x": 0.9260259179265659,
            "y": 0.5004248088360238
          }
        },
        "transitions": {
          "workflow_start": {
            "45b2": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "45b2": {
            "35d0": {
              "type": "standard",
              "state": "success"
            }
          },
          "35d0": {
            "e793": {
              "type": "standard",
              "state": "success"
            }
          },
          "e793": {
            "be3b": {
              "type": "standard",
              "state": "success"
            }
          },
          "be3b": {
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            },
            "630c": {
              "type": "standard",
              "state": "success"
            }
          },
          "630c": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "a4b6": {}
        },
        "font_size": 12,
        "last_updated": "2023-03-22T12:48:03.646Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "4.1.2-2022.1.57.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "jobId": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            },
            "state": {
              "$id": "state",
              "type": "string",
              "examples": [
                "inProgress"
              ]
            },
            "key": {
              "$id": "key",
              "type": "string",
              "examples": [
                "serviceOrderItem%2E0%2Eservice%2Estate"
              ]
            },
            "sendNotification": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "tmfType": {
              "$id": "tmfType",
              "type": "string",
              "examples": [
                "serviceOrder",
                "alarm"
              ]
            }
          },
          "required": [
            "jobId",
            "state",
            "key",
            "sendNotification",
            "tmfType"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "jobId": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            },
            "state": {
              "$id": "state",
              "type": "string",
              "examples": [
                "inProgress"
              ]
            },
            "key": {
              "$id": "key",
              "type": "string",
              "examples": [
                "serviceOrderItem%2E0%2Eservice%2Estate"
              ]
            },
            "sendNotification": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "tmfType": {
              "$id": "tmfType",
              "type": "string",
              "examples": [
                "serviceOrder",
                "alarm"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "tmfOrder": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            }
          }
        },
        "created": "2023-01-25T12:58:15.808Z",
        "created_by": {
          "provenance": "ldap",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": true
        },
        "createdVersion": "5.44.64-2022.1.16.0",
        "canvasVersion": 1,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "TMF Send Event Notification",
        "type": "automation",
        "tasks": {
          "2309": {
            "name": "forEach",
            "canvasName": "forEach",
            "summary": "For Each Loop",
            "description": "Iterate over each item in an array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_array": "$var.77b6.matchedAdapters"
              },
              "outgoing": {
                "current_item": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9379900213827512,
            "y": 0.4669926650366748,
            "scheduled": false
          },
          "5700": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval total == 1",
            "description": "Eval total == 1 - DB Order record found",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "total",
                        "operand_1": {
                          "variable": "result",
                          "task": "8b8b"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 1,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.5359942979330007,
            "y": 0.46943765281173594
          },
          "6610": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval tmfType == ServiceOrder",
            "description": "Eval tmfType == ServiceOrder",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "tmfType",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "ServiceOrder",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.1396873424104892,
            "y": 0.7255734919286321
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "x": -1.285120532003325,
            "y": 0.4767726161369193
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "x": 1.5966702470461869,
            "y": 0.4791843670348343
          },
          "a01f": {
            "name": "search",
            "canvasName": "search",
            "summary": "Search DB for Event Listeners",
            "description": "Search DB for Event Listeners",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "collectionName": "eventListeners",
                "filter": "$var.62fd.searchListeners",
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.27699784017278617,
            "y": 0.47323704333050126,
            "scheduled": false
          },
          "4aa2": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "Get Adapters",
            "description": "Get Adapters",
            "location": "Adapter",
            "locationType": "Iap",
            "app": "Iap",
            "type": "automatic",
            "displayName": "Iap",
            "variables": {
              "incoming": {
                "uriPath": "adapters",
                "restMethod": "GET",
                "queryData": {},
                "requestBody": {
                  "queryOptions": {
                    "equals": "@itentialopensource/adapter-apiServiceordering",
                    "equalsField": "model",
                    "limit": 5
                  }
                },
                "addlHeaders": {},
                "adapter_id": "localIap"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.4298056155507559,
            "y": 0.47323704333050126,
            "scheduled": false
          },
          "77b6": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Match Listener to Adapter",
            "description": "TMF Match Listener to Adapter",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d02c0fd341d802366b7c78",
                "variableMap": {
                  "eventListeners": "$var.a01f.result",
                  "adapters": "$var.f7a5.filteredAdapters"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "matchedAdapters": null,
                "matchedAdapterCount": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.7710583153347732,
            "y": 0.45964316057774,
            "task_name": "TMF Match Listener to Adapter",
            "retrySettings": null
          },
          "fa2f": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "tmfTypeModelMap",
                "value": [
                  {
                    "tmfType": "ServiceOrder",
                    "adapterModel": "@itentialopensource/adapter-tmf641_serviceOrderingManagement"
                  },
                  {
                    "tmfType": "Alarm",
                    "adapterModel": "@itentialopensource/adapter-tmf642_alarmManagement"
                  },
                  {
                    "tmfType": "Service",
                    "adapterModel": "@itentialopensource/adapter-tmf638_serviceInventoryManagement"
                  },
                  {
                    "tmfType": "Resource",
                    "adapterModel": "@itentialopensource/adapter-tmf639_resourceInventoryManagement"
                  }
                ]
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -0.9750623441396509,
            "y": 0.2665036674816626
          },
          "d8a3": {
            "name": "query",
            "canvasName": "query",
            "summary": "Get Adapter Name",
            "description": "Get Adapter Name",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "matchedAdapter[0]data.name",
                "obj": "$var.2309.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.021684316691881,
            "y": 0.7230246389124894,
            "scheduled": false
          },
          "f7a5": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Filter Adapter by Model",
            "description": "TMF Filter Adapter by Model",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d0456dd341d802366b7c79",
                "variableMap": {
                  "adapters": "$var.4aa2.result",
                  "adapterModel": "$var.62fd.adapterModel"
                },
                "options": {
                  "extractOutput": true,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "filteredAdapters": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.5836933045356372,
            "y": 0.4715378079864061,
            "task_name": "TMF Filter Adapter by Model",
            "retrySettings": null
          },
          "6fbd": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval AdapterCount == 1",
            "description": "Eval AdapterCount == 1",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "adapterCount",
                        "operand_1": {
                          "variable": "current_item",
                          "task": "2309"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 1,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9379727685325264,
            "y": 0.7272727272727273
          },
          "8b8b": {
            "name": "find",
            "canvasName": "find",
            "summary": "Find DB TMF Record",
            "description": "Find DB TMF Record",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "options": "$var.62fd.dbFindOrderQuery",
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.6797566371681416,
            "y": 0.47323704333050126,
            "scheduled": false
          },
          "7f": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Set Event Data",
            "description": "TMF Set Event Data",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d1042dd341d802366b7c7a",
                "variableMap": {
                  "eventType": "$var.job.eventType",
                  "orderDetails": "$var.cb0a.return_data",
                  "tmfType": "$var.job.tmfType"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": false,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "eventBody": null,
                "notificationURL": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.35424091233071986,
            "y": 0.4682151589242054,
            "task_name": "TMF Set Event Data",
            "retrySettings": null
          },
          "cb0a": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Order Record",
            "description": "Query Order Record",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response[0]",
                "obj": "$var.8b8b.result"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.46044191019244474,
            "y": 0.4718826405867971,
            "scheduled": false
          },
          "9e96": {
            "name": "create",
            "canvasName": "create",
            "summary": "Log Event in DB",
            "description": "Log Event in DB",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "collectionName": "eventNotifications",
                "data": "$var.7f.eventBody",
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": -0.21311475409836064,
            "y": 0.47555012224938875,
            "scheduled": false
          },
          "948e": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Event DB Record",
            "description": "Query Event DB Record",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response",
                "obj": "$var.9e96.result"
              },
              "outgoing": {
                "return_data": "$var.job.eventRecord"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.11119030648610122,
            "y": 0.4731051344743276,
            "scheduled": false
          },
          "d46f": {
            "name": "setObjectKey",
            "canvasName": "setObjectKey",
            "summary": "Set eventId to Event Object",
            "description": "Set eventId to Event Object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Object",
            "variables": {
              "incoming": {
                "obj": "$var.948e.return_data",
                "path": [
                  "eventId"
                ],
                "value": "$var.fdba.return_data"
              },
              "outgoing": {
                "object": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.11009667024704618,
            "y": 0.47323704333050126,
            "scheduled": false
          },
          "a16d": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "No Matching Adapter Found",
            "description": "No Matching Adapter Found",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": "No Matching Adapter Found"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.9343308395677473,
            "y": 1.017114914425428,
            "scheduled": false
          },
          "62fd": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "JST TMF Send Notification Vars",
            "description": "Takes the job input parameters and constructs the various objects for DB queries and adapter execution.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d13c5ad341d802366b7c7c",
                "variableMap": {
                  "tmfType": "$var.job.tmfType",
                  "jobId": "$var.job.jobId",
                  "tmfTypeModelMap": "$var.job.tmfTypeModelMap"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "dbFindOrderQuery": null,
                "searchListeners": null,
                "adapterModel": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.8503207412687099,
            "y": 0.4779951100244499,
            "task_name": "TMF Send Notification Vars",
            "retrySettings": null
          },
          "bfa2": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query listener Name",
            "description": "Query listener Name",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "listener",
                "obj": "$var.2309.current_item"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9368250539956804,
            "y": 0.6083262531860663,
            "scheduled": false
          },
          "73b0": {
            "name": "newVariable",
            "canvasName": "newVariable",
            "summary": "Create a Job Variable",
            "description": "Create a new Job variable by Job ID and assign it a value.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "name": "eventResultArray",
                "value": []
              },
              "outgoing": {
                "value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": -1.14380714879468,
            "y": 0.265281173594132
          },
          "ae2a": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "listener",
                    "value": {
                      "task": "bfa2",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "adapter",
                    "value": {
                      "task": "d8a3",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "postResponse",
                    "value": {
                      "task": "721c",
                      "variable": "return_data"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.6840855106888362,
            "y": 0.8300764655904843
          },
          "721c": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query post Event Response",
            "description": "Query post Event Response",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response",
                "obj": "$var.job.eventResponse"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.5629453681710215,
            "y": 0.8292268479184367,
            "scheduled": false
          },
          "1d8e": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Adds an element to the end of the array.",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.job.eventResultArray",
                "elementN": "$var.ae2a.merged_object"
              },
              "outgoing": {
                "pushedArray": "$var.job.eventResultArray"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.8355106888361046,
            "y": 0.8343245539507221,
            "scheduled": false
          },
          "ec89": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Data",
            "description": "Merge data into a single object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "listener",
                    "value": {
                      "task": "bfa2",
                      "variable": "return_data"
                    }
                  },
                  {
                    "key": "adapter",
                    "value": {
                      "task": "static",
                      "variable": "No Linked Adapter"
                    }
                  },
                  {
                    "key": "postResponse",
                    "value": {
                      "task": "static",
                      "variable": "Not Sent"
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 0.9343308395677473,
            "y": 1.2273838630806846
          },
          "f4a2": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Adds an element to the end of the array.",
            "description": "Adds one element to the end of an array and returns the (newly modified) array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.job.eventResultArray",
                "elementN": "$var.ec89.merged_object"
              },
              "outgoing": {
                "pushedArray": "$var.job.eventResultArray"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 0.9294419499679282,
            "y": 1.4027187765505522,
            "scheduled": false
          },
          "d9ff": {
            "name": "findAndModify",
            "canvasName": "findAndModify",
            "summary": "Update an item in the collection in the database",
            "description": "Update an item item by id in the collection in the database",
            "location": "Adapter",
            "locationType": "DBMongo",
            "app": "DBMongo",
            "type": "automatic",
            "displayName": "DBMongo",
            "variables": {
              "incoming": {
                "collectionName": "eventNotifications",
                "filter": "$var.800b.filter",
                "sort": {},
                "data": "$var.800b.data",
                "multi": false,
                "upsert": true,
                "adapter_id": "tmfApiMongodb"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.3895486935866983,
            "y": 0.47833474936278675,
            "scheduled": false
          },
          "800b": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TMF Event Notification - DB Find and Update",
            "description": "Creates the request body required to find and update the MongoDB document.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "63d3c93414410e0246e4a3d5",
                "variableMap": {
                  "eventId": "$var.fdba.return_data",
                  "result": "$var.job.eventResultArray"
                },
                "options": {
                  "extractOutput": false,
                  "validateIncoming": true,
                  "revertToDefaultValue": true
                }
              },
              "outgoing": {
                "filter": null,
                "data": null
              },
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": 1.1493018259935552,
            "y": 0.47068819031435855,
            "task_name": "TMF Event Notification - DB Find and Update",
            "retrySettings": null
          },
          "fdba": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Event _id",
            "description": "Query Event _id",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "response._id",
                "obj": "$var.9e96.result"
              },
              "outgoing": {
                "return_data": "$var.job.eventRecord"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "x": -0.02309344790547798,
            "y": 0.4766355140186916,
            "scheduled": false
          },
          "7ab3": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval tmfType == Service",
            "description": "Eval tmfType == Service",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "tmfType",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "Service",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.13565305093293,
            "y": 0.8292268479184367
          },
          "8ad0": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Eval tmfType == Resource",
            "description": "Eval tmfType == Resource",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "tmfType",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": "Resource",
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "deprecated": false,
            "groups": [],
            "x": 1.1306101865859808,
            "y": 1.0025488530161428
          },
          "b42": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "POST Event Notification Service Order",
            "description": "POST Event Notification TMF641 Service Order",
            "location": "Adapter",
            "locationType": "Tmf641ServiceOrderingManagement",
            "app": "Tmf641ServiceOrderingManagement",
            "type": "automatic",
            "displayName": "Tmf641ServiceOrderingManagement",
            "variables": {
              "incoming": {
                "uriPath": "$var.7f.notificationURL",
                "restMethod": "POST",
                "queryData": {},
                "requestBody": "$var.d46f.object",
                "addlHeaders": {},
                "adapter_id": "$var.d8a3.return_data"
              },
              "outgoing": {
                "result": "$var.job.eventResponse"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.3827512473271562,
            "y": 0.6625916870415648,
            "scheduled": false
          },
          "ec83": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "POST Event Notification Resource",
            "description": "Event Notification Resource TMF639",
            "location": "Adapter",
            "locationType": "Tmf639ResourceInventoryManagement",
            "app": "Tmf639ResourceInventoryManagement",
            "type": "automatic",
            "displayName": "Tmf639ResourceInventoryManagement",
            "variables": {
              "incoming": {
                "uriPath": "$var.7f.notificationURL",
                "restMethod": "POST",
                "queryData": {},
                "requestBody": "$var.d46f.object",
                "addlHeaders": {},
                "adapter_id": "$var.d8a3.return_data"
              },
              "outgoing": {
                "result": "$var.job.eventResponse"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.3784746970776907,
            "y": 1.1002444987775062,
            "scheduled": false
          },
          "b538": {
            "name": "genericAdapterRequest",
            "canvasName": "genericAdapterRequest",
            "summary": "POST Event Notification Service",
            "description": "POST Event Notification Service TMF638",
            "location": "Adapter",
            "locationType": "Tmf638ServiceInventoryManagement",
            "app": "Tmf638ServiceInventoryManagement",
            "type": "automatic",
            "displayName": "Tmf638ServiceInventoryManagement",
            "variables": {
              "incoming": {
                "uriPath": "$var.7f.notificationURL",
                "restMethod": "POST",
                "queryData": {},
                "requestBody": "$var.d46f.object",
                "addlHeaders": {},
                "adapter_id": "$var.d8a3.return_data"
              },
              "outgoing": {
                "result": "$var.job.eventResponse"
              },
              "error": "",
              "decorators": []
            },
            "deprecated": false,
            "groups": [],
            "actor": "Pronghorn",
            "x": 1.3741981468282252,
            "y": 0.8655256723716381,
            "scheduled": false
          }
        },
        "transitions": {
          "2309": {
            "bfa2": {
              "type": "standard",
              "state": "loop"
            },
            "800b": {
              "type": "standard",
              "state": "success"
            }
          },
          "5671": {},
          "5700": {
            "cb0a": {
              "type": "standard",
              "state": "success"
            }
          },
          "6610": {
            "7ab3": {
              "type": "standard",
              "state": "failure"
            },
            "b42": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "73b0": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "a01f": {
            "4aa2": {
              "type": "standard",
              "state": "success"
            }
          },
          "4aa2": {
            "f7a5": {
              "type": "standard",
              "state": "success"
            }
          },
          "77b6": {
            "2309": {
              "type": "standard",
              "state": "success"
            }
          },
          "fa2f": {
            "62fd": {
              "type": "standard",
              "state": "success"
            }
          },
          "d8a3": {
            "6610": {
              "type": "standard",
              "state": "success"
            }
          },
          "f7a5": {
            "77b6": {
              "type": "standard",
              "state": "success"
            }
          },
          "6fbd": {
            "d8a3": {
              "type": "standard",
              "state": "success"
            },
            "a16d": {
              "type": "standard",
              "state": "failure"
            }
          },
          "1ee8": {},
          "8b8b": {
            "5700": {
              "type": "standard",
              "state": "success"
            }
          },
          "7f": {
            "9e96": {
              "type": "standard",
              "state": "success"
            }
          },
          "cb0a": {
            "7f": {
              "type": "standard",
              "state": "success"
            }
          },
          "9e96": {
            "948e": {
              "type": "standard",
              "state": "success"
            }
          },
          "948e": {
            "fdba": {
              "type": "standard",
              "state": "success"
            }
          },
          "d46f": {
            "a01f": {
              "type": "standard",
              "state": "success"
            }
          },
          "a16d": {
            "ec89": {
              "type": "standard",
              "state": "success"
            }
          },
          "62fd": {
            "8b8b": {
              "type": "standard",
              "state": "success"
            }
          },
          "bfa2": {
            "6fbd": {
              "type": "standard",
              "state": "success"
            }
          },
          "73b0": {
            "fa2f": {
              "type": "standard",
              "state": "success"
            }
          },
          "ae2a": {
            "1d8e": {
              "type": "standard",
              "state": "success"
            }
          },
          "721c": {
            "ae2a": {
              "type": "standard",
              "state": "success"
            }
          },
          "1d8e": {},
          "ec89": {
            "f4a2": {
              "type": "standard",
              "state": "success"
            }
          },
          "f4a2": {},
          "d9ff": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "800b": {
            "d9ff": {
              "type": "standard",
              "state": "success"
            }
          },
          "fdba": {
            "d46f": {
              "type": "standard",
              "state": "success"
            }
          },
          "7ab3": {
            "8ad0": {
              "type": "standard",
              "state": "failure"
            },
            "b538": {
              "type": "standard",
              "state": "success"
            }
          },
          "8ad0": {
            "ec83": {
              "type": "standard",
              "state": "success"
            }
          },
          "b42": {
            "721c": {
              "type": "standard",
              "state": "success"
            }
          },
          "ec83": {
            "721c": {
              "type": "standard",
              "state": "success"
            }
          },
          "b538": {
            "721c": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "font_size": 12,
        "last_updated": "2023-03-23T15:58:58.245Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedVersion": "5.44.64-2022.1.29.0",
        "inputSchema": {
          "type": "object",
          "properties": {
            "tmfType": {
              "$id": "tmfType",
              "type": "string",
              "examples": [
                "serviceOrder",
                "alarm"
              ]
            },
            "eventType": {
              "$id": "eventType",
              "type": "string",
              "examples": [
                "ServiceOrderCreateEvent"
              ]
            },
            "jobId": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            }
          },
          "required": [
            "tmfType",
            "eventType",
            "jobId"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "tmfType": {
              "$id": "tmfType",
              "type": "string",
              "examples": [
                "serviceOrder",
                "alarm"
              ]
            },
            "eventType": {
              "$id": "eventType",
              "type": "string",
              "examples": [
                "ServiceOrderCreateEvent"
              ]
            },
            "jobId": {
              "$id": "jobId",
              "type": "string",
              "examples": [
                "6f352bca-6d1a-452b-b25a-915026b67a18"
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "tmfTypeModelMap": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "tmfType": {
                    "type": "string"
                  },
                  "adapterModel": {
                    "type": "string"
                  }
                }
              }
            },
            "eventRecord": {
              "title": "return_data",
              "type": [
                "string",
                "number",
                "object",
                "integer",
                "array",
                "boolean",
                "null"
              ],
              "examples": [
                "value"
              ]
            },
            "eventResultArray": {
              "title": "pushedArray",
              "type": "array",
              "items": [
                {
                  "type": [
                    "string",
                    "number",
                    "integer",
                    "object",
                    "array",
                    "boolean",
                    "null"
                  ]
                }
              ],
              "examples": [
                [
                  "Device1",
                  "Device2",
                  "Device3"
                ]
              ]
            },
            "eventResponse": {
              "title": "result",
              "type": "object"
            }
          }
        },
        "created": "2023-01-24T18:52:52.480Z",
        "created_by": {
          "provenance": "ldap",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": true
        },
        "createdVersion": "5.44.64-2022.1.16.0",
        "preAutomationTime": 0,
        "sla": 0,
        "canvasVersion": 1,
        "tags": [],
        "groups": [],
        "migrationVersion": 1
      }
    },
    {
      "type": "template",
      "data": {
        "_id": "64254b5955eaa95725b82e19",
        "command": "",
        "template": "{% set myResult={ \"status\":status, \"reason\": reason, \"success\": success or \"\"} %}\n{% set description= orderModel.inventory.deviceName+\" Onboarding \"+ status +\" : \" + reason or \"\" %}\n{% set kmsg={} %}\n{% set kmsg=orderModel.serviceOrder.serviceOrderItem.0.service %}\n{% set _=kmsg.update( {\"summary\" : description }) %}\n{% set kafkaPayload=    [{ \"topic\": \"ServiceNotification\", \"messages\": [{ \"value\": kmsg }]}] %}\n\n\n{%- set myOutput={ \"description\": description, \"result\": myResult, \"kafkaPayload\": kafkaPayload } %}\n{{myOutput|tojson(indent=2)}}",
        "data": "{\n  \"orderModel\": {\n    \"inventory\": {\n      \"autoNegotiate\": false,\n      \"custom_fields\": [\n        {\n          \"custom_fields\": {\n            \"status\": \"reserved\"\n          },\n          \"device\": {\n            \"id\": 3,\n            \"name\": \"PE1\"\n          },\n          \"display\": \"FourHundredGigE0/0/0/4\",\n          \"id\": 15,\n          \"url\": \"http://172.20.102.120:8000/api/dcim/interfaces/15/\",\n          \"vdcs\": []\n        }\n      ],\n      \"deviceName\": \"PE1\",\n      \"interfaceDescription\": \"\",\n      \"interfaceName\": \"FourHundredGigE0/0/0/4\",\n      \"mtu\": 25000,\n      \"newService\": {\n        \"id\": 32,\n        \"tags\": [],\n        \"custom_fields\": {},\n        \"display\": \"Network Port Connectivity6\",\n        \"url\": \"http://172.20.102.120:8000/api/plugins/service-pools/custom-service/32/\",\n        \"created\": \"2023-03-30T09:18:08.451687Z\",\n        \"last_updated\": \"2023-03-30T09:18:08.451714Z\",\n        \"custom_field_data\": {},\n        \"uuid\": \"a2dd095e-d580-46ca-8645-6d08161d7caf\",\n        \"name\": \"Network Port Connectivity6\",\n        \"service_type\": \"PORT A\",\n        \"description\": null,\n        \"category\": null,\n        \"tmf638_payload\": {}\n      },\n      \"newServiceOrder\": {\n        \"id\": 35,\n        \"tags\": [],\n        \"custom_fields\": {},\n        \"display\": \"a2dd095e-d580-46ca-8645-6d08161d7caf\",\n        \"url\": \"http://172.20.102.120:8000/api/plugins/service-pools/service-order/35/\",\n        \"created\": \"2023-03-30T09:18:08.606544Z\",\n        \"last_updated\": \"2023-03-30T09:18:08.606565Z\",\n        \"custom_field_data\": {},\n        \"uuid\": \"a2dd095e-d580-46ca-8645-6d08161d7caf\",\n        \"name\": \"Network Port Connectivity6\",\n        \"state\": \"open\",\n        \"description\": \"Port order details\",\n        \"category\": \"global.fabricport\",\n        \"external_id\": \"00019577_FR0007145\",\n        \"tmf641_payload\": {},\n        \"service_name\": null\n      }\n    },\n    \"serviceOrder\": {\n      \"@type\": \"ServiceOrder\",\n      \"category\": \"global.fabricport\",\n      \"description\": \"Port order details\",\n      \"externalId\": \"00019577_FR0007145\",\n      \"notificationContact\": \"VlocityDigico\",\n      \"serviceOrderItem\": [\n        {\n          \"@type\": \"ServiceOrderItem\",\n          \"action\": \"add\",\n          \"id\": \"a2dd095e-d580-46ca-8645-6d08161d7caf\",\n          \"service\": {\n            \"@type\": \"Service\",\n            \"category\": \"CFS\",\n            \"description\": \"Network Port Connectivity Service\",\n            \"name\": \"Network Port Connectivity6\",\n            \"place\": {\n              \"@type\": \"RelatedPlaceRefOrValue\",\n              \"id\": \"43\",\n              \"name\": \"london\",\n              \"role\": \"soe-site-id\"\n            },\n            \"serviceCharacteristic\": [\n              {\n                \"name\": \"port-type\",\n                \"value\": \"port-only\",\n                \"valueType\": \"string\"\n              },\n              {\n                \"name\": \"port-speed\",\n                \"value\": \"25000\",\n                \"valueType\": \"string\"\n              },\n              {\n                \"name\": \"mtu\",\n                \"value\": \"1500\",\n                \"valueType\": \"string\"\n              }\n            ],\n            \"serviceSpecification\": {\n              \"id\": \"a2dd095e-d580-46ca-8645-1d08161d7caf\",\n              \"name\": \"network-port\"\n            },\n            \"serviceType\": \"network-port\"\n          }\n        }\n      ]\n    }\n  },\n  \"status\": \"success\",\n  \"reason\": \"Port Type-A provisioned successfully\"\n}",
        "type": "jinja2",
        "name": "PTA_result_kafka_description",
        "description": "",
        "group": "UseCase2_DeviceOnboarding",
        "created": "2023-03-30T10:18:13.369Z",
        "lastUpdated": "2023-03-30T10:18:13.369Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "tags": []
      }
    },
    {
      "type": "template",
      "data": {
        "_id": "64240fb65cfe1e0960bf6ef1",
        "command": "",
        "template": "{# This template will compare the values collected from netbox in orderModel.inventory with the response from the GNMI precheck call. It will prep the payload for the next step#}\n{# default output \"result\".  Assume success unless failure is detected #}\n{% set result = { \"success\" : true, \"status\": \"success\", \"reason\": \"default\" } %}\n{% if not precheckResponse.notification[0][\"update\"][0].val %}\n  {% set _=result.update({ \"success\" : false, \"status\": \"failure\", \"reason\": \"empty result set from GNMI\" }) %}\n{% endif %}\n{% set deployPayload = [\n    [\n      \"openconfig-interfaces:interfaces\",\n{\"interface\":[{\"name\": orderModel.inventory.interfaceName,\"config\":{\"mtu\":orderModel.inventory.mtu,\"description\":orderModel.inventory.interfaceDescription,\"name\": orderModel.inventory.interfaceName},\"openconfig-if-ethernet:ethernet\":{\"config\":{\"auto-negotiate\":orderModel.inventory.autoNegotiate}}}]}\n    ]\n  ] %}\n{%- set myOutput={ \"result\": result, \"deployPayload\": deployPayload } %}\n{{- myOutput|tojson(indent=2) }}",
        "type": "jinja2",
        "name": "PTA_gnmi_precheck",
        "created": "2023-03-29T11:07:05.573Z",
        "lastUpdated": "2023-03-29T11:07:05.573Z",
        "version": 1,
        "data": "{\n  \"orderModel\": {\n    \"serviceOrder\": {\n      \"description\": \"Port order details\",\n      \"externalId\": \"00019577_FR0007145\",\n      \"category\": \"global.fabricport\",\n      \"notificationContact\": \"VlocityDigico\",\n      \"@type\": \"ServiceOrder\",\n      \"serviceOrderItem\": [{\n        \"id\": \"a2A3H0000003na6UAA\",\n        \"action\": \"add\",\n        \"@type\": \"ServiceOrderItem\",\n        \"service\": {\n          \"place\": {\n            \"id\": \"43\",\n            \"name\": \"london\",\n            \"role\": \"soe-site-id\",\n            \"@type\": \"RelatedPlaceRefOrValue\"\n\n          },\n          \"category\": \"CFS\",\n          \"name\": \"Network Port Connectivity\",\n          \"description\": \"Network Port Connectivity Service\",\n          \"serviceType\": \"network-port\",\n          \"@type\": \"Service\",\n          \"serviceCharacteristic\": [{\n              \"name\": \"port-type\",\n              \"valueType\": \"string\",\n              \"value\": \"port-only\"\n            },\n            {\n              \"name\": \"port-speed\",\n              \"valueType\": \"string\",\n              \"value\": \"25000\"\n            },\n            {\n              \"name\": \"mtu\",\n              \"valueType\": \"string\",\n              \"value\": \"1500\"\n            }\n          ],\n          \"serviceSpecification\": {\n            \"id\": \"a2dd095e-d580-46ca-8645-1d08161d7caf\",\n            \"name\": \"network-port\"\n          }\n        }\n      }]\n    },\n    \"inventory\": {\n        \"interfaceName\": \"samInterface/0\",\n        \"mtu\": 45,\n        \"interfaceDescription\": \"this inteface serves Sam\",\n        \"autoNegotiate\": false\n    },\n    \"configuration\": {},\n    \"telemetry\": {}\n  },\n  \"precheckResponse\": {\n    \"notification\": [{\n      \"alias\": null,\n      \"atomic\": false,\n      \"prefix\": null,\n      \"timestamp\": 1679004919764826302,\n      \"update_fail\": [\n        {\n          \"path\": \"interfaces/interface[name=Loopback10]\",\n          \"val\": null\n        }\n      ],\n      \"update\": [{\n        \"path\": \"interfaces/interface[name=Loopback0]\",\n        \"val\": {\n          \"config\": {\n            \"name\": \"Loopback0\",\n            \"type\": \"iana-if-type:softwareLoopback\"\n          },\n          \"state\": {\n            \"admin-status\": \"UP\",\n            \"counters\": {\n              \"carrier-transitions\": \"1\"\n            },\n            \"enabled\": true,\n            \"ifindex\": 6,\n            \"last-change\": \"1678139685781596073\",\n            \"logical\": true,\n            \"loopback-mode\": false,\n            \"mtu\": 1500,\n            \"name\": \"Loopback0\",\n            \"oper-status\": \"UP\",\n            \"type\": \"iana-if-type:softwareLoopback\"\n          },\n          \"subinterfaces\": {\n            \"subinterface\": [{\n              \"index\": 0,\n              \"openconfig-if-ip:ipv4\": {\n                \"addresses\": {\n                  \"address\": [{\n                    \"config\": {\n                      \"name\": \"Loopback0\",\n                      \"type\": \"iana-if-type:softwareLoopback\"\n                    },\n                    \"state\": {\n                      \"admin-status\": \"UP\",\n                      \"counters\": {\n                        \"carrier-transitions\": \"1\"\n                      },\n                      \"enabled\": true,\n                      \"ifindex\": 6,\n                      \"last-change\": \"1678139685781596073\",\n                      \"logical\": true,\n                      \"loopback-mode\": false,\n                      \"mtu\": 1500,\n                      \"name\": \"Loopback0\",\n                      \"oper-status\": \"UP\",\n                      \"type\": \"iana-if-type:softwareLoopback\"\n                    },\n                    \"subinterfaces\": {\n                      \"subinterface\": [{\n                        \"index\": 0,\n                        \"openconfig-if-ip:ipv4\": {\n                          \"addresses\": {\n                            \"address\": [{\n                              \"config\": {\n                                \"ip\": \"10.213.97.74\",\n                                \"prefix-length\": 32\n                              },\n                              \"ip\": \"10.213.97.74\",\n                              \"state\": {\n                                \"ip\": \"10.213.97.74\",\n                                \"origin\": \"STATIC\",\n                                \"prefix-length\": 32\n                              }\n                            }]\n                          }\n                        }\n                      }]\n                    }\n                  }]\n                }\n              }\n            }]\n          }\n        }\n      }]\n    }]\n  }\n}",
        "group": "PortTypeA",
        "description": "",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "tags": []
      }
    },
    {
      "type": "template",
      "data": {
        "_id": "6424398d5cfe1e0960bf6ef2",
        "command": "",
        "template": "{% set interfaceName = getResponse.response.results[0].name %}\n{% set description = getResponse.response.results[0].description %}\n{% set deviceName = getResponse.response.results[0].device.name %}\n{% set mtu = orderModel.serviceOrder.serviceOrderItem[0].service.serviceCharacteristic[name==mtu].value %}\n\n{%- set deviceId = getResponse.response.results[0].device.id %}\n{% set deviceName = getResponse.response.results[0].device.name %}\n{% set display = getResponse.response.results[0].display %}\n{% set id = getResponse.response.results[0].id %}\n{% set url = getResponse.response.results[0].url %}\n{% set vdcs = getResponse.response.results[0].vdcs %}\n\n{%- set customFields = [\n    {\n        \"custom_fields\": {\n            \"status\": \"reserved\"\n        },\n        \"device\": {\n            \"id\": deviceId,\n            \"name\": deviceName\n        },\n        \"display\": display,\n        \"id\": id,\n        \"url\": url,\n        \"vdcs\": vdcs\n    }\n] %}\n\n\n{%- set inventory = {\n    \"autoNegotiate\": false,\n    \"interfaceDescription\": description,\n    \"interfaceName\": interfaceName,\n    \"mtu\": mtu|int,\n    \"deviceName\": deviceName,\n    \"custom_fields\": customFields\n} %}\n\n{%- set _ = orderModel.update({\"inventory\": inventory}) %}\n\n\n\n\n{%- set output = {} %}\n{% set _= output.update({\"orderModel\":orderModel})%}\n\n{{output|tojson(indent=2)}}\n",
        "type": "jinja2",
        "name": "netboxOrderModelInterfacePayload",
        "tags": [],
        "created": "2023-03-29T19:15:56.231Z",
        "lastUpdated": "2023-03-29T19:15:56.231Z",
        "version": 1,
        "data": "{\n    \"orderModel\": {\n    \"serviceOrder\": {\n        \"description\": \"Port order details\",\n        \"externalId\": \"00019577_FR0007145\",\n        \"category\": \"global.fabricport\",\n        \"notificationContact\": \"VlocityDigico\",\n        \"@type\": \"ServiceOrder\",\n        \"serviceOrderItem\": [\n            {\n                \"id\": \"a2A3H0000003na6UAA\",\n                \"action\": \"add\",\n                \"@type\": \"ServiceOrderItem\",\n                \"service\": {\n                    \"place\": [\n                        {\n                            \"id\": \"amh-eu\",\n                            \"name\": \"Amsterdam Hempoint\",\n                            \"role\": \"soe_site_id\",\n                            \"@type\": \"RelatedPlaceRefOrValue\"\n                        }\n                    ],\n                    \"category\": \"CFS\",\n                    \"name\": \"Network Port Connectivity\",\n                    \"description\": \"Network Port Connectivity Service\",\n                    \"serviceType\": \"network-port\",\n                    \"@type\": \"Service\",\n                    \"serviceCharacteristic\": [\n                        {\n                            \"name\": \"port-type\",\n                            \"valueType\": \"string\",\n                            \"value\": \"port-only\"\n                        },\n                        {\n                            \"name\": \"port-speed\",\n                            \"valueType\": \"string\",\n                            \"value\": \"25000\"\n                        },\n                        {\n                            \"name\": \"mtu\",\n                            \"valueType\": \"string\",\n                            \"value\": \"1500\"\n                        }\n                    ],\n                    \"serviceSpecification\": {\n                        \"id\": \"a2dd095e-d580-46ca-8645-1d08161d7caf\",\n                        \"name\": \"network-port\"\n                    }\n                }\n            }\n        ]\n    }\n},\n\"getResponse\":\n{\n      \"icode\": \"AD.200\",\n      \"response\": {\n        \"count\": 1,\n        \"next\": null,\n        \"previous\": null,\n        \"results\": [\n          {\n            \"id\": 15,\n            \"url\": \"http://172.20.102.120:8000/api/dcim/interfaces/15/\",\n            \"display\": \"FourHundredGigE0/0/0/4\",\n            \"device\": {\n              \"id\": 3,\n              \"url\": \"http://172.20.102.120:8000/api/dcim/devices/3/\",\n              \"display\": \"PE1\",\n              \"name\": \"PE1\"\n            },\n            \"vdcs\": [],\n            \"module\": null,\n            \"name\": \"FourHundredGigE0/0/0/4\",\n            \"label\": \"\",\n            \"type\": {\n              \"value\": \"100base-fx\",\n              \"label\": \"100BASE-FX (10/100ME FIBER)\"\n            },\n            \"enabled\": true,\n            \"parent\": null,\n            \"bridge\": null,\n            \"lag\": null,\n            \"mtu\": null,\n            \"mac_address\": null,\n            \"speed\": 25000,\n            \"duplex\": null,\n            \"wwn\": null,\n            \"mgmt_only\": false,\n            \"description\": \"\",\n            \"mode\": null,\n            \"rf_role\": null,\n            \"rf_channel\": null,\n            \"poe_mode\": null,\n            \"poe_type\": null,\n            \"rf_channel_frequency\": null,\n            \"rf_channel_width\": null,\n            \"tx_power\": null,\n            \"untagged_vlan\": null,\n            \"tagged_vlans\": [],\n            \"mark_connected\": false,\n            \"cable\": null,\n            \"cable_end\": \"\",\n            \"wireless_link\": null,\n            \"link_peers\": [],\n            \"link_peers_type\": null,\n            \"wireless_lans\": [],\n            \"vrf\": null,\n            \"l2vpn_termination\": null,\n            \"connected_endpoints\": null,\n            \"connected_endpoints_type\": null,\n            \"connected_endpoints_reachable\": null,\n            \"tags\": [],\n            \"custom_fields\": {\n              \"interface_type\": \"port-only\",\n              \"service\": null,\n              \"service_type\": null,\n              \"status\": \"available\"\n            },\n            \"created\": \"2023-03-24T12:32:14.673192Z\",\n            \"last_updated\": \"2023-03-28T14:02:09.702376Z\",\n            \"count_ipaddresses\": 0,\n            \"count_fhrp_groups\": 0,\n            \"_occupied\": false\n          }\n        ]\n      },\n      \"headers\": {\n        \"content-type\": \"application/json\",\n        \"vary\": \"Accept, Cookie, Origin\",\n        \"allow\": \"GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS, TRACE\",\n        \"api-version\": \"3.4\",\n        \"x-content-type-options\": \"nosniff\",\n        \"referrer-policy\": \"same-origin\",\n        \"cross-origin-opener-policy\": \"same-origin\",\n        \"x-frame-options\": \"SAMEORIGIN\",\n        \"content-length\": \"1256\",\n        \"server\": \"Unit/1.29.1\",\n        \"date\": \"Tue, 28 Mar 2023 14:02:19 GMT\",\n        \"connection\": \"close\"\n      },\n      \"metrics\": {\n        \"code\": 200,\n        \"timeouts\": 0,\n        \"redirects\": 0,\n        \"retries\": 0,\n        \"tripTime\": 160,\n        \"isThrottling\": false,\n        \"capabilityTime\": \"377ms\"\n      }\n    }\n}",
        "group": "netbox",
        "description": "",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        },
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false
        }
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "642199fd3eab3f7b6d78124e",
        "name": "PTA_TMF_setServiceOrderErrorMessage",
        "description": "",
        "incoming": [
          {
            "$id": "serviceOrder",
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "examples": [
                  "ed0dc86c-53dd-48a3-8e9a-6ede65c8a7a3"
                ],
                "format": "uuid"
              },
              "description": {
                "type": "string",
                "examples": [
                  "Port order details"
                ]
              },
              "externalId": {
                "type": "string",
                "examples": [
                  "00019577_FR0007145"
                ]
              },
              "category": {
                "type": "string",
                "examples": [
                  "global%2Efabricport"
                ]
              },
              "notificationContact": {
                "type": "string",
                "examples": [
                  "VlocityDigico"
                ]
              },
              "@type": {
                "type": "string",
                "examples": [
                  "ServiceOrder"
                ]
              },
              "serviceOrderItem": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "a2A3H0000003na6UAA"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "examples": [
                        "add"
                      ]
                    },
                    "@type": {
                      "type": "string",
                      "examples": [
                        "ServiceOrderItem"
                      ]
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "serviceState": {
                          "type": "string",
                          "examples": [
                            "active"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "CFS"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "Network Port Connectivity Service"
                          ]
                        },
                        "description": {
                          "type": "string",
                          "examples": [
                            "Network Port Connectivity Service"
                          ]
                        },
                        "serviceType": {
                          "type": "string",
                          "examples": [
                            "allocateIpAddress"
                          ]
                        },
                        "@type": {
                          "type": "string",
                          "examples": [
                            "allocateIpAddress"
                          ]
                        },
                        "serviceCharacteristic": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "parent"
                                ]
                              },
                              "valueType": {
                                "type": "string",
                                "examples": [
                                  "string"
                                ]
                              },
                              "value": {
                                "type": "string",
                                "examples": [
                                  "10%2E1%2E0%2E0/16"
                                ]
                              }
                            },
                            "required": []
                          }
                        },
                        "serviceSpecification": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "examples": [
                                "a2dd095e-d580-46ca-8645-1d08161d7caf"
                              ],
                              "format": "uuid"
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                }
              },
              "startDate": {
                "type": "string",
                "examples": [
                  "2023-03-20T11:25:16%2E712Z"
                ],
                "format": "date-time"
              },
              "state": {
                "type": "string",
                "examples": [
                  "completed"
                ]
              },
              "id": {
                "type": "string",
                "examples": [
                  "a73c525c0af446e28956b01c"
                ]
              },
              "href": {
                "type": "string",
                "examples": [
                  "https://localhost:3443/serviceOrder/v4/serviceOrder/a73c525c0af446e28956b01c"
                ]
              }
            },
            "required": []
          },
          {
            "$id": "code",
            "type": [
              "string",
              "number"
            ],
            "examples": [
              "500"
            ]
          },
          {
            "$id": "message",
            "type": "string",
            "examples": [
              "Resource Failed"
            ]
          },
          {
            "$id": "errorReason",
            "type": "string",
            "examples": [
              "Port not available"
            ]
          },
          {
            "$id": "status",
            "type": "string",
            "examples": [
              "ERROR-003"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "output",
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "examples": [
                  "Port order details"
                ]
              },
              "externalId": {
                "type": "string",
                "examples": [
                  "00019577_FR0007145"
                ]
              },
              "category": {
                "type": "string",
                "examples": [
                  "global%2Efabricport"
                ]
              },
              "notificationContact": {
                "type": "string",
                "examples": [
                  "VlocityDigico"
                ]
              },
              "@type": {
                "type": "string",
                "examples": [
                  "ServiceOrder"
                ]
              },
              "serviceOrderItem": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "a2A3H0000003na6UAA"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "examples": [
                        "add"
                      ]
                    },
                    "@type": {
                      "type": "string",
                      "examples": [
                        "ServiceOrderItem"
                      ]
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "serviceState": {
                          "type": "string",
                          "examples": [
                            "active"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "CFS"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "Network Port Connectivity Service"
                          ]
                        },
                        "description": {
                          "type": "string",
                          "examples": [
                            "Network Port Connectivity Service"
                          ]
                        },
                        "serviceType": {
                          "type": "string",
                          "examples": [
                            "allocateIpAddress"
                          ]
                        },
                        "@type": {
                          "type": "string",
                          "examples": [
                            "allocateIpAddress"
                          ]
                        },
                        "serviceCharacteristic": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "parent"
                                ]
                              },
                              "valueType": {
                                "type": "string",
                                "examples": [
                                  "string"
                                ]
                              },
                              "value": {
                                "type": "string",
                                "examples": [
                                  "10%2E1%2E0%2E0/16"
                                ]
                              }
                            },
                            "required": []
                          }
                        },
                        "serviceSpecification": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "examples": [
                                "a2dd095e-d580-46ca-8645-1d08161d7caf"
                              ],
                              "format": "uuid"
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                }
              }
            },
            "required": []
          },
          {
            "$id": "errorMessageObject",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "filterObj",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "a73c525c0af446e28956b01c"
                ]
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "ƒ_map_1",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "serviceOrder",
              "ptr": "/serviceOrderItem"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "output",
              "ptr": "/serviceOrderItem"
            },
            "context": "#"
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "serviceOrder",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "output",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 5,
            "type": "function",
            "function": "errorMessageObj",
            "args": [
              "",
              null,
              "",
              ""
            ],
            "view": {
              "row": 2,
              "col": 1
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "code",
              "ptr": ""
            },
            "to": {
              "location": "function",
              "name": 5,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "message",
              "ptr": ""
            },
            "to": {
              "location": "function",
              "name": 5,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "status",
              "ptr": ""
            },
            "to": {
              "location": "function",
              "name": 5,
              "ptr": "/args/3/value"
            },
            "context": "#"
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "function",
              "name": 5,
              "ptr": "/return/errorMessageItem"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "function",
              "name": 5,
              "ptr": "/return/errorMessageItem"
            },
            "to": {
              "location": "outgoing",
              "name": "errorMessageObject",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "serviceOrder",
              "ptr": "/id"
            },
            "to": {
              "location": "outgoing",
              "name": "filterObj",
              "ptr": "/id"
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "errorReason",
              "ptr": ""
            },
            "to": {
              "location": "function",
              "name": 5,
              "ptr": "/args/1/value"
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "a2A3H0000003na6UAA"
                    ]
                  },
                  "action": {
                    "type": "string",
                    "examples": [
                      "add"
                    ]
                  },
                  "@type": {
                    "type": "string",
                    "examples": [
                      "ServiceOrderItem"
                    ]
                  },
                  "service": {
                    "type": "object",
                    "properties": {
                      "serviceState": {
                        "type": "string",
                        "examples": [
                          "active"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "examples": [
                          "CFS"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "examples": [
                          "Network Port Connectivity Service"
                        ]
                      },
                      "description": {
                        "type": "string",
                        "examples": [
                          "Network Port Connectivity Service"
                        ]
                      },
                      "serviceType": {
                        "type": "string",
                        "examples": [
                          "allocateIpAddress"
                        ]
                      },
                      "@type": {
                        "type": "string",
                        "examples": [
                          "allocateIpAddress"
                        ]
                      },
                      "serviceCharacteristic": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "examples": [
                                "parent"
                              ]
                            },
                            "valueType": {
                              "type": "string",
                              "examples": [
                                "string"
                              ]
                            },
                            "value": {
                              "type": "string",
                              "examples": [
                                "10%2E1%2E0%2E0/16"
                              ]
                            }
                          },
                          "required": []
                        }
                      },
                      "serviceSpecification": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "examples": [
                              "a2dd095e-d580-46ca-8645-1d08161d7caf"
                            ],
                            "format": "uuid"
                          }
                        },
                        "required": []
                      }
                    },
                    "required": []
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "examples": [
                        "a2A3H0000003na6UAA"
                      ]
                    },
                    "action": {
                      "type": "string",
                      "examples": [
                        "add"
                      ]
                    },
                    "@type": {
                      "type": "string",
                      "examples": [
                        "ServiceOrderItem"
                      ]
                    },
                    "service": {
                      "type": "object",
                      "properties": {
                        "serviceState": {
                          "type": "string",
                          "examples": [
                            "active"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "CFS"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "examples": [
                            "Network Port Connectivity Service"
                          ]
                        },
                        "description": {
                          "type": "string",
                          "examples": [
                            "Network Port Connectivity Service"
                          ]
                        },
                        "serviceType": {
                          "type": "string",
                          "examples": [
                            "allocateIpAddress"
                          ]
                        },
                        "@type": {
                          "type": "string",
                          "examples": [
                            "allocateIpAddress"
                          ]
                        },
                        "serviceCharacteristic": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "examples": [
                                  "parent"
                                ]
                              },
                              "valueType": {
                                "type": "string",
                                "examples": [
                                  "string"
                                ]
                              },
                              "value": {
                                "type": "string",
                                "examples": [
                                  "10%2E1%2E0%2E0/16"
                                ]
                              }
                            },
                            "required": []
                          }
                        },
                        "serviceSpecification": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "examples": [
                                "a2dd095e-d580-46ca-8645-1d08161d7caf"
                              ],
                              "format": "uuid"
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              },
              {
                "$id": "thisArg",
                "type": "object",
                "properties": {
                  "0_errorMessageItem": {
                    "$id": "errorMessageItem",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "examples": [
                          "500"
                        ]
                      },
                      "message": {
                        "type": "string",
                        "examples": [
                          "Resource Fallout"
                        ]
                      },
                      "reason": {
                        "type": "string",
                        "examples": [
                          "IP address not available"
                        ]
                      },
                      "referenceError": {
                        "type": "string",
                        "examples": [
                          "http://serverlocation:port/serviceOrdering/v4/errorMessage/500"
                        ]
                      },
                      "status": {
                        "type": "string",
                        "examples": [
                          "ERROR-003"
                        ]
                      },
                      "timestamp": {
                        "type": "string",
                        "examples": [
                          "2020-08-27T23:17:45%2E450Z"
                        ],
                        "format": "date-time"
                      },
                      "@type": {
                        "type": "string",
                        "examples": [
                          "ServiceOrderItemErrorMessage"
                        ],
                        "default": "ServiceOrderItemErrorMessage"
                      }
                    },
                    "required": []
                  }
                },
                "isContext": true,
                "isIndexed": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "steps": [
              {
                "id": 1,
                "type": "declaration",
                "library": "Array",
                "method": "new Array",
                "args": [],
                "view": {
                  "row": 3,
                  "col": 1
                },
                "context": "#/8[1]",
                "polymorphIndex": 0
              },
              {
                "id": 6,
                "type": "method",
                "library": "Object",
                "method": "hasOwnProperty",
                "args": [
                  null,
                  "errorMessage"
                ],
                "view": {
                  "row": 1,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 8,
                "type": "context",
                "library": "Conditional",
                "method": "if...else",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "context",
                  "name": 8,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "context",
                  "name": 8,
                  "ptr": "/return/else"
                },
                "to": {
                  "location": "declaration",
                  "name": 1,
                  "ptr": "/context"
                },
                "context": "#/8[1]"
              },
              {
                "id": 11,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 2
                },
                "context": "#/8[1]"
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/0/value"
                },
                "context": "#/8[1]"
              },
              {
                "id": 13,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "thisArg",
                  "ptr": "/0_errorMessageItem"
                },
                "to": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/args/1/value"
                },
                "context": "#/8[1]"
              },
              {
                "id": 14,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "errorMessage",
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 3
                },
                "context": "#/8[1]"
              },
              {
                "id": 15,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 11,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/args/2/value"
                },
                "context": "#/8[1]"
              },
              {
                "id": 17,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 14,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                },
                "context": "#/8[1]"
              },
              {
                "id": 22,
                "type": "method",
                "library": "WorkFlowEngine",
                "method": "query",
                "args": [
                  false,
                  "errorMessage",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                },
                "context": "#/8[0]"
              },
              {
                "id": 23,
                "type": "assign",
                "from": {
                  "location": "context",
                  "name": 8,
                  "ptr": "/return/if"
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/context"
                },
                "context": "#/8[0]"
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/args/2/value"
                },
                "context": "#/8[0]"
              },
              {
                "id": 25,
                "type": "method",
                "library": "Array",
                "method": "push",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                },
                "context": "#/8[0]"
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 22,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/0/value"
                },
                "context": "#/8[0]"
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "thisArg",
                  "ptr": "/0_errorMessageItem"
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/1/value"
                },
                "context": "#/8[0]"
              },
              {
                "id": 28,
                "type": "method",
                "library": "Object",
                "method": "setProperty",
                "args": [
                  null,
                  "errorMessage",
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 4
                },
                "context": "#/8[0]"
              },
              {
                "id": 29,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 28,
                  "ptr": "/args/2/value"
                },
                "context": "#/8[0]"
              },
              {
                "id": 30,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 28,
                  "ptr": "/args/0/value"
                },
                "context": "#/8[0]"
              },
              {
                "id": 31,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 28,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                },
                "context": "#/8[0]"
              }
            ],
            "view": {
              "col": 4,
              "row": 4
            },
            "id": "ƒ_map_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "code",
                "type": "string",
                "examples": [
                  "500"
                ]
              },
              {
                "$id": "reason",
                "type": "string",
                "examples": [
                  "Resource Fallout"
                ]
              },
              {
                "$id": "message",
                "type": "string",
                "examples": [
                  "Port not available"
                ]
              },
              {
                "$id": "status",
                "type": "string",
                "examples": [
                  "ERROR-003"
                ]
              }
            ],
            "outgoing": [
              {
                "$id": "errorMessageItem",
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "examples": [
                      "500"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "examples": [
                      "Resource Fallout"
                    ]
                  },
                  "reason": {
                    "type": "string",
                    "examples": [
                      "IP address not available"
                    ]
                  },
                  "referenceError": {
                    "type": "string",
                    "examples": [
                      "http://serverlocation:port/serviceOrdering/v4/errorMessage/500"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "examples": [
                      "ERROR-003"
                    ]
                  },
                  "timestamp": {
                    "type": "string",
                    "examples": [
                      "2020-08-27T23:17:45%2E450Z"
                    ],
                    "format": "date-time"
                  },
                  "@type": {
                    "type": "string",
                    "examples": [
                      "ServiceOrderItemErrorMessage"
                    ],
                    "default": "ServiceOrderItemErrorMessage"
                  }
                },
                "required": []
              }
            ],
            "functions": [],
            "name": "errorMessageObj",
            "steps": [
              {
                "id": 1,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "code",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "errorMessageItem",
                  "ptr": "/code"
                },
                "context": "#"
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "message",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "errorMessageItem",
                  "ptr": "/message"
                },
                "context": "#"
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "reason",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "errorMessageItem",
                  "ptr": "/reason"
                },
                "context": "#"
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "status",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "errorMessageItem",
                  "ptr": "/status"
                },
                "context": "#"
              },
              {
                "id": 5,
                "type": "declaration",
                "library": "Date",
                "method": "new Date",
                "args": [],
                "view": {
                  "row": 1,
                  "col": 1
                },
                "context": "#",
                "polymorphIndex": 0
              },
              {
                "id": 6,
                "type": "method",
                "library": "Date",
                "method": "toISOString",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 6,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "errorMessageItem",
                  "ptr": "/timestamp"
                },
                "context": "#"
              },
              {
                "id": 9,
                "type": "declaration",
                "library": "String",
                "method": "new String",
                "args": [
                  "ServiceOrderItemErrorMessage"
                ],
                "view": {
                  "row": 3,
                  "col": 3
                },
                "context": "#"
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "declaration",
                  "name": 9,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "errorMessageItem",
                  "ptr": "/@type"
                },
                "context": "#"
              }
            ],
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "errorMessageObj",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2023-03-27T13:28:29.092Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-27T13:35:47.877Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "641dfb7e3eab3f7b6d78124d",
        "name": "PTA_resultProcessing",
        "description": "",
        "incoming": [
          {
            "$id": "success",
            "type": "boolean"
          },
          {
            "$id": "status",
            "type": [
              "string",
              "object",
              "null",
              "number",
              "integer",
              "array"
            ]
          },
          {
            "$id": "reason",
            "type": [
              "string",
              "object",
              "null",
              "number",
              "integer",
              "array"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "success",
            "type": "boolean"
          },
          {
            "$id": "status",
            "type": "string"
          },
          {
            "$id": "reason",
            "type": "string"
          },
          {
            "$id": "result",
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "examples": [
                  true,
                  false
                ]
              },
              "status": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 5,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "status",
              "ptr": ""
            },
            "to": {
              "location": "declaration",
              "name": 5,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 5,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "status",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "success",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "success",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 10,
            "type": "method",
            "library": "JSON",
            "method": "stringify",
            "args": [
              null,
              null,
              null
            ],
            "view": {
              "row": 2,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "reason",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 10,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 10,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "reason",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 10,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "result",
              "ptr": "/reason"
            },
            "context": "#"
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "success",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "result",
              "ptr": "/success"
            },
            "context": "#"
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "status",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "result",
              "ptr": "/status"
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [],
            "outgoing": [],
            "functions": [],
            "name": "userFunc_1",
            "steps": [],
            "view": {
              "col": 2,
              "row": 4
            },
            "id": "userFunc_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "$id": "reason",
                "type": [
                  "string",
                  "object",
                  "null",
                  "number",
                  "integer",
                  "array"
                ]
              }
            ],
            "outgoing": [
              {
                "$id": "reason",
                "type": "string"
              }
            ],
            "functions": [],
            "name": "toString",
            "steps": [
              {
                "id": 13,
                "type": "method",
                "library": "JSON",
                "method": "type of",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 14,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "reason",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 15,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  "string"
                ],
                "view": {
                  "row": 1,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 16,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 13,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 17,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                },
                "context": "#"
              },
              {
                "id": 18,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 15,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 19,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "reason",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 20,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "reason",
                  "ptr": ""
                },
                "context": "#"
              },
              {
                "id": 21,
                "type": "method",
                "library": "Array",
                "method": "isArray",
                "args": [
                  null
                ],
                "view": {
                  "row": 3,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 22,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "reason",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 23,
                "type": "method",
                "library": "Conditional",
                "method": "ternary",
                "args": [
                  null,
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 3
                },
                "context": "#"
              },
              {
                "id": 24,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 21,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 25,
                "type": "method",
                "library": "Array",
                "method": "toString",
                "args": [
                  null
                ],
                "view": {
                  "row": 4,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 26,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "reason",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 27,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 25,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 31,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 17,
                  "ptr": "/args/2/value"
                },
                "context": "#"
              },
              {
                "id": 32,
                "type": "method",
                "library": "Object",
                "method": "values",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 33,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "reason",
                  "ptr": ""
                },
                "to": {
                  "location": "method",
                  "name": 32,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 34,
                "type": "method",
                "library": "Array",
                "method": "toString",
                "args": [
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 35,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 32,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 34,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 36,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 34,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 23,
                  "ptr": "/args/2/value"
                },
                "context": "#"
              }
            ],
            "view": {
              "col": 4,
              "row": 6
            },
            "id": "toString.jst",
            "description": "",
            "comments": [],
            "version": "3.23.3-2022.1.14"
          }
        ],
        "comments": [],
        "view": {
          "col": 2,
          "row": 6
        },
        "created": "2023-03-24T19:35:26.672Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-28T13:10:13.466Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "642496f7a62a5209a65866db",
        "name": "PTA_InventoryAllocationPayloads",
        "description": "",
        "incoming": [
          {
            "$id": "orderModel",
            "type": "object",
            "properties": {
              "serviceOrder": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "externalId": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "serviceOrderItem": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "a2A3H0000003na6UAA"
                          ]
                        },
                        "service": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "examples": [
                                "Network Port Connectivity"
                              ]
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    }
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "TMF641",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "service_type",
            "type": "string"
          },
          {
            "$id": "TMF638",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "state",
            "type": "string"
          }
        ],
        "outgoing": [
          {
            "$id": "createServicePayload",
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "examples": [
                  "19e67f34-b2c3-4c6d-9fad-ecca3ce63308"
                ],
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "examples": [
                  "demoTestService"
                ]
              },
              "service_type": {
                "type": "string",
                "examples": [
                  "PORT A"
                ]
              },
              "tmf638_payload": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "serviceOrderPayload",
            "type": "object",
            "properties": {},
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "function",
            "function": "PTA_inventoryOrderPayload.jst",
            "args": [
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            "view": {
              "row": 1,
              "col": 4
            }
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "TMF641",
              "ptr": ""
            },
            "to": {
              "location": "function",
              "name": 1,
              "ptr": "/args/7/value"
            },
            "context": "#"
          },
          {
            "id": 3,
            "type": "method",
            "library": "Array",
            "method": "getIndex",
            "args": [
              null,
              0
            ],
            "view": {
              "row": 1,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "orderModel",
              "ptr": "/serviceOrder/serviceOrderItem"
            },
            "to": {
              "location": "method",
              "name": 3,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 5,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "id"
            ],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 5,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 5,
              "ptr": "/return"
            },
            "to": {
              "location": "function",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 9,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "service"
            ],
            "view": {
              "row": 2,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 9,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 11,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "name"
            ],
            "view": {
              "row": 2,
              "col": 3
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 9,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 11,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 11,
              "ptr": "/return"
            },
            "to": {
              "location": "function",
              "name": 1,
              "ptr": "/args/1/value"
            },
            "context": "#"
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "function",
              "name": 1,
              "ptr": "/return/postPluginsServiceOrderPayload"
            },
            "to": {
              "location": "outgoing",
              "name": "serviceOrderPayload",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 5,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "createServicePayload",
              "ptr": "/uuid"
            },
            "context": "#"
          },
          {
            "id": 16,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 11,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "createServicePayload",
              "ptr": "/name"
            },
            "context": "#"
          },
          {
            "id": 17,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "service_type",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "createServicePayload",
              "ptr": "/service_type"
            },
            "context": "#"
          },
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "TMF638",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "createServicePayload",
              "ptr": "/tmf638_payload"
            },
            "context": "#"
          },
          {
            "id": 19,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "state",
              "ptr": ""
            },
            "to": {
              "location": "function",
              "name": 1,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 20,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "orderModel",
              "ptr": "/serviceOrder/description"
            },
            "to": {
              "location": "function",
              "name": 1,
              "ptr": "/args/3/value"
            },
            "context": "#"
          },
          {
            "id": 21,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "orderModel",
              "ptr": "/serviceOrder/category"
            },
            "to": {
              "location": "function",
              "name": 1,
              "ptr": "/args/4/value"
            },
            "context": "#"
          },
          {
            "id": 22,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "orderModel",
              "ptr": "/serviceOrder/externalId"
            },
            "to": {
              "location": "function",
              "name": 1,
              "ptr": "/args/5/value"
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "$id": "uuid",
                "type": "string"
              },
              {
                "$id": "name",
                "type": "string"
              },
              {
                "$id": "state",
                "type": "string"
              },
              {
                "$id": "description",
                "type": "string"
              },
              {
                "$id": "category",
                "type": "string"
              },
              {
                "$id": "external_id",
                "type": "string"
              },
              {
                "$id": "service_name",
                "type": [
                  "integer"
                ]
              },
              {
                "$id": "tmf641_payload",
                "type": "object"
              }
            ],
            "outgoing": [
              {
                "$id": "postPluginsServiceOrderPayload",
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "examples": [
                      "string"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "string"
                    ]
                  },
                  "state": {
                    "type": "string",
                    "examples": [
                      "open"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "examples": [
                      "string"
                    ]
                  },
                  "category": {
                    "type": "string",
                    "examples": [
                      "string"
                    ]
                  },
                  "external_id": {
                    "type": "string",
                    "examples": [
                      "string"
                    ]
                  },
                  "tmf641_payload": {
                    "type": "object",
                    "properties": {},
                    "required": []
                  },
                  "service_name": {
                    "type": [
                      "integer"
                    ],
                    "examples": [
                      0
                    ]
                  }
                },
                "required": []
              }
            ],
            "functions": [],
            "name": "PTA_inventoryOrderPayload",
            "steps": [
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "uuid",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "postPluginsServiceOrderPayload",
                  "ptr": "/uuid"
                },
                "context": "#"
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "name",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "postPluginsServiceOrderPayload",
                  "ptr": "/name"
                },
                "context": "#"
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "state",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "postPluginsServiceOrderPayload",
                  "ptr": "/state"
                },
                "context": "#"
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "description",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "postPluginsServiceOrderPayload",
                  "ptr": "/description"
                },
                "context": "#"
              },
              {
                "id": 8,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "category",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "postPluginsServiceOrderPayload",
                  "ptr": "/category"
                },
                "context": "#"
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "external_id",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "postPluginsServiceOrderPayload",
                  "ptr": "/external_id"
                },
                "context": "#"
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "tmf641_payload",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "postPluginsServiceOrderPayload",
                  "ptr": "/tmf641_payload"
                },
                "context": "#"
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "service_name",
                  "ptr": ""
                },
                "to": {
                  "location": "outgoing",
                  "name": "postPluginsServiceOrderPayload",
                  "ptr": "/service_name"
                },
                "context": "#"
              }
            ],
            "view": {
              "col": 1,
              "row": 5
            },
            "id": "PTA_inventoryOrderPayload.jst",
            "_id": "6422ec0ea62a5209a65866d8",
            "description": "",
            "comments": [],
            "version": "3.23.3-2022.1.14"
          }
        ],
        "comments": [],
        "view": {
          "col": 4,
          "row": 5
        },
        "created": "2023-03-29T19:52:23.034Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-29T20:39:04.475Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6424a60ba62a5209a65866dc",
        "name": "PTA_addServiceToOrderModel",
        "description": "",
        "incoming": [
          {
            "$id": "newService",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "newServiceOrder",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "orderModel",
            "type": "object",
            "properties": {},
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "orderModel",
            "type": "object",
            "properties": {},
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Object",
            "method": "optional chaining",
            "args": [
              null,
              "inventory"
            ],
            "view": {
              "row": 1,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "orderModel",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 6,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "newServiceOrder",
              null
            ],
            "view": {
              "row": 2,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "newServiceOrder",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 11,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "inventory",
              null
            ],
            "view": {
              "row": 2,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "orderModel",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 11,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 11,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 11,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "orderModel",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 15,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              "newService",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 16,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "newService",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 15,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 15,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 19,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              null
            ],
            "view": {
              "row": 3,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 20,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "declaration",
              "name": 19,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 21,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 19,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 15,
              "ptr": "/args/0/value"
            },
            "context": "#"
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 2,
          "row": 5
        },
        "created": "2023-03-29T20:56:43.662Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-29T21:16:52.752Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "63d02c0fd341d802366b7c78",
        "name": "TMF Match Listener to Adapter",
        "description": "",
        "incoming": [
          {
            "$id": "eventListeners",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "examples": [
                  "success"
                ]
              },
              "code": {
                "type": "integer",
                "examples": [
                  200
                ]
              },
              "response": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "examples": [
                        "78ca9756-0df4-4f6c-bdfb-7d223cfbd590"
                      ],
                      "format": "uuid"
                    },
                    "callback": {
                      "type": "string",
                      "examples": [
                        "http://localhost"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "ServiceOrder"
                      ]
                    },
                    "dateCreated": {
                      "type": [
                        "integer",
                        "number"
                      ],
                      "examples": [
                        1674577463137
                      ]
                    }
                  },
                  "required": []
                }
              }
            },
            "required": []
          },
          {
            "$id": "adapters",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "metadata": {
                  "type": "object",
                  "properties": {
                    "isActive": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "activeSync": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    }
                  },
                  "required": []
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "examples": [
                        "vlocityServiceOrdering"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "examples": [
                        "@itentialopensource/adapter-apiServiceordering"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "Adapter"
                      ]
                    },
                    "properties": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "examples": [
                            "vlocityServiceOrdering"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "ApiServiceordering"
                          ]
                        },
                        "brokers": {
                          "type": "array"
                        },
                        "groups": {
                          "type": "array"
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "host": {
                              "type": "string",
                              "examples": [
                                "localhost"
                              ]
                            },
                            "port": {
                              "type": "integer",
                              "examples": [
                                443
                              ]
                            },
                            "base_path": {
                              "type": "string",
                              "examples": [
                                "/tmf-api/serviceOrdering/v4"
                              ]
                            },
                            "version": {
                              "type": "string"
                            },
                            "cache_location": {
                              "type": "string",
                              "examples": [
                                "none"
                              ]
                            },
                            "encode_pathvars": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            },
                            "encode_queryvars": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            },
                            "save_metric": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            },
                            "stub": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            },
                            "protocol": {
                              "type": "string",
                              "examples": [
                                "https"
                              ]
                            },
                            "authentication": {
                              "type": "object",
                              "properties": {
                                "auth_method": {
                                  "type": "string",
                                  "examples": [
                                    "no_authentication"
                                  ]
                                },
                                "username": {
                                  "type": "string",
                                  "examples": [
                                    "username"
                                  ]
                                },
                                "password": {
                                  "type": "string",
                                  "examples": [
                                    "password"
                                  ]
                                },
                                "token": {
                                  "type": "string",
                                  "examples": [
                                    "token"
                                  ]
                                },
                                "token_timeout": {
                                  "type": "integer",
                                  "examples": [
                                    600000
                                  ]
                                },
                                "token_cache": {
                                  "type": "string",
                                  "examples": [
                                    "local"
                                  ]
                                },
                                "invalid_token_error": {
                                  "type": "integer",
                                  "examples": [
                                    401
                                  ]
                                },
                                "auth_field": {
                                  "type": "string",
                                  "examples": [
                                    "header%2Eheaders%2EAuthorization"
                                  ]
                                },
                                "auth_field_format": {
                                  "type": "string",
                                  "examples": [
                                    "Basic {b64}{username}:{password}{/b64}"
                                  ]
                                },
                                "auth_logging": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "client_id": {
                                  "type": "string"
                                },
                                "client_secret": {
                                  "type": "string"
                                },
                                "grant_type": {
                                  "type": "string"
                                }
                              },
                              "required": []
                            },
                            "healthcheck": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "none"
                                  ]
                                },
                                "frequency": {
                                  "type": "integer",
                                  "examples": [
                                    60000
                                  ]
                                },
                                "query_object": {
                                  "type": "object",
                                  "properties": {},
                                  "required": []
                                }
                              },
                              "required": []
                            },
                            "throttle": {
                              "type": "object",
                              "properties": {
                                "throttle_enabled": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "number_pronghorns": {
                                  "type": "integer",
                                  "examples": [
                                    1
                                  ]
                                },
                                "sync_async": {
                                  "type": "string",
                                  "examples": [
                                    "sync"
                                  ]
                                },
                                "max_in_queue": {
                                  "type": "integer",
                                  "examples": [
                                    1000
                                  ]
                                },
                                "concurrent_max": {
                                  "type": "integer",
                                  "examples": [
                                    1
                                  ]
                                },
                                "expire_timeout": {
                                  "type": "integer",
                                  "examples": [
                                    0
                                  ]
                                },
                                "avg_runtime": {
                                  "type": "integer",
                                  "examples": [
                                    200
                                  ]
                                },
                                "priorities": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "value": {
                                        "type": "integer",
                                        "examples": [
                                          0
                                        ]
                                      },
                                      "percent": {
                                        "type": "integer",
                                        "examples": [
                                          100
                                        ]
                                      }
                                    },
                                    "required": []
                                  }
                                }
                              },
                              "required": []
                            },
                            "request": {
                              "type": "object",
                              "properties": {
                                "number_redirects": {
                                  "type": "integer",
                                  "examples": [
                                    0
                                  ]
                                },
                                "number_retries": {
                                  "type": "integer",
                                  "examples": [
                                    3
                                  ]
                                },
                                "limit_retry_error": {
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "examples": [
                                      0
                                    ]
                                  }
                                },
                                "failover_codes": {
                                  "type": "array"
                                },
                                "attempt_timeout": {
                                  "type": "integer",
                                  "examples": [
                                    5000
                                  ]
                                },
                                "global_request": {
                                  "type": "object",
                                  "properties": {
                                    "payload": {
                                      "type": "object",
                                      "properties": {},
                                      "required": []
                                    },
                                    "uriOptions": {
                                      "type": "object",
                                      "properties": {},
                                      "required": []
                                    },
                                    "addlHeaders": {
                                      "type": "object",
                                      "properties": {},
                                      "required": []
                                    },
                                    "authData": {
                                      "type": "object",
                                      "properties": {},
                                      "required": []
                                    }
                                  },
                                  "required": []
                                },
                                "healthcheck_on_timeout": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "return_raw": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "archiving": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "return_request": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                }
                              },
                              "required": []
                            },
                            "proxy": {
                              "type": "object",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "host": {
                                  "type": "string"
                                },
                                "port": {
                                  "type": "integer",
                                  "examples": [
                                    1
                                  ]
                                },
                                "protocol": {
                                  "type": "string",
                                  "examples": [
                                    "http"
                                  ]
                                },
                                "username": {
                                  "type": "string"
                                },
                                "password": {
                                  "type": "string"
                                }
                              },
                              "required": []
                            },
                            "ssl": {
                              "type": "object",
                              "properties": {
                                "ecdhCurve": {
                                  "type": "string"
                                },
                                "enabled": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "accept_invalid_cert": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "ca_file": {
                                  "type": "string"
                                },
                                "key_file": {
                                  "type": "string"
                                },
                                "cert_file": {
                                  "type": "string"
                                },
                                "secure_protocol": {
                                  "type": "string"
                                },
                                "ciphers": {
                                  "type": "string"
                                }
                              },
                              "required": []
                            },
                            "mongo": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string"
                                },
                                "port": {
                                  "type": "integer",
                                  "examples": [
                                    0
                                  ]
                                },
                                "database": {
                                  "type": "string"
                                },
                                "username": {
                                  "type": "string"
                                },
                                "password": {
                                  "type": "string"
                                },
                                "replSet": {
                                  "type": "string"
                                },
                                "db_ssl": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "accept_invalid_cert": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "ca_file": {
                                      "type": "string"
                                    },
                                    "key_file": {
                                      "type": "string"
                                    },
                                    "cert_file": {
                                      "type": "string"
                                    }
                                  },
                                  "required": []
                                }
                              },
                              "required": []
                            },
                            "devicebroker": {
                              "type": "object",
                              "properties": {
                                "getDevice": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "examples": [
                                          "/get/devices/{id}"
                                        ]
                                      },
                                      "method": {
                                        "type": "string",
                                        "examples": [
                                          "GET"
                                        ]
                                      },
                                      "query": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "body": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "headers": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "handleFailure": {
                                        "type": "string",
                                        "examples": [
                                          "ignore"
                                        ]
                                      },
                                      "requestFields": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "examples": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": []
                                      },
                                      "responseDatakey": {
                                        "type": "string"
                                      },
                                      "responseFields": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "examples": [
                                              "host"
                                            ]
                                          },
                                          "ostype": {
                                            "type": "string",
                                            "examples": [
                                              "os"
                                            ]
                                          },
                                          "ostypePrefix": {
                                            "type": "string",
                                            "examples": [
                                              "system-"
                                            ]
                                          },
                                          "ipaddress": {
                                            "type": "string",
                                            "examples": [
                                              "attributes%2Eipaddr"
                                            ]
                                          },
                                          "port": {
                                            "type": "string",
                                            "examples": [
                                              "443"
                                            ]
                                          }
                                        },
                                        "required": []
                                      }
                                    },
                                    "required": []
                                  }
                                },
                                "getDevicesFiltered": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "examples": [
                                          "/get/devices"
                                        ]
                                      },
                                      "method": {
                                        "type": "string",
                                        "examples": [
                                          "GET"
                                        ]
                                      },
                                      "query": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "body": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "headers": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "handleFailure": {
                                        "type": "string",
                                        "examples": [
                                          "ignore"
                                        ]
                                      },
                                      "requestFields": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "responseDatakey": {
                                        "type": "string"
                                      },
                                      "responseFields": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "examples": [
                                              "host"
                                            ]
                                          },
                                          "ostype": {
                                            "type": "string",
                                            "examples": [
                                              "os"
                                            ]
                                          },
                                          "ostypePrefix": {
                                            "type": "string",
                                            "examples": [
                                              "system-"
                                            ]
                                          },
                                          "ipaddress": {
                                            "type": "string",
                                            "examples": [
                                              "attributes%2Eipaddr"
                                            ]
                                          },
                                          "port": {
                                            "type": "string",
                                            "examples": [
                                              "443"
                                            ]
                                          }
                                        },
                                        "required": []
                                      }
                                    },
                                    "required": []
                                  }
                                },
                                "isAlive": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "examples": [
                                          "/get/devices/{id}/status"
                                        ]
                                      },
                                      "method": {
                                        "type": "string",
                                        "examples": [
                                          "GET"
                                        ]
                                      },
                                      "query": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "body": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "headers": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "handleFailure": {
                                        "type": "string",
                                        "examples": [
                                          "ignore"
                                        ]
                                      },
                                      "requestFields": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "examples": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": []
                                      },
                                      "responseDatakey": {
                                        "type": "string"
                                      },
                                      "responseFields": {
                                        "type": "object",
                                        "properties": {
                                          "status": {
                                            "type": "string",
                                            "examples": [
                                              "status"
                                            ]
                                          },
                                          "statusValue": {
                                            "type": "string",
                                            "examples": [
                                              "online"
                                            ]
                                          }
                                        },
                                        "required": []
                                      }
                                    },
                                    "required": []
                                  }
                                },
                                "getConfig": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "examples": [
                                          "/get/devices/{id}/configPart1"
                                        ]
                                      },
                                      "method": {
                                        "type": "string",
                                        "examples": [
                                          "GET"
                                        ]
                                      },
                                      "query": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "body": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "headers": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "handleFailure": {
                                        "type": "string",
                                        "examples": [
                                          "ignore"
                                        ]
                                      },
                                      "requestFields": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "examples": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": []
                                      },
                                      "responseDatakey": {
                                        "type": "string"
                                      },
                                      "responseFields": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      }
                                    },
                                    "required": []
                                  }
                                },
                                "getCount": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "path": {
                                        "type": "string",
                                        "examples": [
                                          "/get/devices"
                                        ]
                                      },
                                      "method": {
                                        "type": "string",
                                        "examples": [
                                          "GET"
                                        ]
                                      },
                                      "query": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "body": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "headers": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "handleFailure": {
                                        "type": "string",
                                        "examples": [
                                          "ignore"
                                        ]
                                      },
                                      "requestFields": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "responseDatakey": {
                                        "type": "string"
                                      },
                                      "responseFields": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      }
                                    },
                                    "required": []
                                  }
                                }
                              },
                              "required": []
                            }
                          },
                          "required": []
                        },
                        "logLevel": {
                          "type": "string",
                          "examples": [
                            "none"
                          ]
                        },
                        "timeout": {
                          "type": "integer",
                          "examples": [
                            120000
                          ]
                        }
                      },
                      "required": []
                    },
                    "isEncrypted": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "loggerProps": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "examples": [
                            "Logging"
                          ]
                        },
                        "log_max_files": {
                          "type": "integer",
                          "examples": [
                            10
                          ]
                        },
                        "log_max_file_size": {
                          "type": "integer",
                          "examples": [
                            10485760
                          ]
                        },
                        "log_level": {
                          "type": "string",
                          "examples": [
                            "info"
                          ]
                        },
                        "log_directory": {
                          "type": "string",
                          "examples": [
                            "/opt/itential/logs"
                          ]
                        },
                        "log_filename": {
                          "type": "string",
                          "examples": [
                            "vlocityServiceOrdering%2Elog"
                          ]
                        },
                        "log_timezone_offset": {
                          "type": "integer",
                          "examples": [
                            0
                          ]
                        },
                        "console_level": {
                          "type": "string",
                          "examples": [
                            "info"
                          ]
                        },
                        "syslog": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "string",
                              "examples": [
                                "warning"
                              ]
                            },
                            "host": {
                              "type": "string",
                              "examples": [
                                "127%2E0%2E0%2E1"
                              ],
                              "format": "ipv4"
                            },
                            "port": {
                              "type": "integer",
                              "examples": [
                                514
                              ]
                            },
                            "protocol": {
                              "type": "string",
                              "examples": [
                                "udp4"
                              ]
                            },
                            "facility": {
                              "type": "string",
                              "examples": [
                                "local0"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "examples": [
                                "BSD"
                              ]
                            },
                            "path": {
                              "type": "string"
                            },
                            "pid": {
                              "type": "string",
                              "examples": [
                                "process%2Epid"
                              ]
                            },
                            "localhost": {
                              "type": "string"
                            },
                            "app_name": {
                              "type": "string"
                            },
                            "eol": {
                              "type": "string"
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    },
                    "virtual": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    }
                  },
                  "required": []
                }
              },
              "required": []
            }
          }
        ],
        "outgoing": [
          {
            "$id": "matchedAdapters",
            "type": "array"
          },
          {
            "$id": "matchedAdapterCount",
            "type": "number",
            "examples": [
              2
            ]
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "ƒ_map_1",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "eventListeners",
              "ptr": "/response"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "adapters",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "matchedAdapters",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 5,
            "type": "method",
            "library": "Array",
            "method": "length",
            "args": [
              null
            ],
            "view": {
              "row": 2,
              "col": 3
            },
            "context": "#"
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 5,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 5,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "matchedAdapterCount",
              "ptr": ""
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "examples": [
                      "78ca9756-0df4-4f6c-bdfb-7d223cfbd590"
                    ],
                    "format": "uuid"
                  },
                  "callback": {
                    "type": "string",
                    "examples": [
                      "http://localhost"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "ServiceOrder"
                    ]
                  },
                  "dateCreated": {
                    "type": [
                      "integer",
                      "number"
                    ],
                    "examples": [
                      1674577463137
                    ]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "examples": [
                        "78ca9756-0df4-4f6c-bdfb-7d223cfbd590"
                      ],
                      "format": "uuid"
                    },
                    "callback": {
                      "type": "string",
                      "examples": [
                        "http://localhost"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "ServiceOrder"
                      ]
                    },
                    "dateCreated": {
                      "type": [
                        "integer",
                        "number"
                      ],
                      "examples": [
                        1674577463137
                      ]
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              },
              {
                "$id": "thisArg",
                "type": "object",
                "properties": {
                  "0_adapters": {
                    "$id": "adapters",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "isActive": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            },
                            "activeSync": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            }
                          },
                          "required": []
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "examples": [
                                "vlocityServiceOrdering"
                              ]
                            },
                            "model": {
                              "type": "string",
                              "examples": [
                                "@itentialopensource/adapter-apiServiceordering"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "examples": [
                                "Adapter"
                              ]
                            },
                            "properties": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "examples": [
                                    "vlocityServiceOrdering"
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "ApiServiceordering"
                                  ]
                                },
                                "brokers": {
                                  "type": "array"
                                },
                                "groups": {
                                  "type": "array"
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "host": {
                                      "type": "string",
                                      "examples": [
                                        "localhost"
                                      ]
                                    },
                                    "port": {
                                      "type": "integer",
                                      "examples": [
                                        443
                                      ]
                                    },
                                    "base_path": {
                                      "type": "string",
                                      "examples": [
                                        "/tmf-api/serviceOrdering/v4"
                                      ]
                                    },
                                    "version": {
                                      "type": "string"
                                    },
                                    "cache_location": {
                                      "type": "string",
                                      "examples": [
                                        "none"
                                      ]
                                    },
                                    "encode_pathvars": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "encode_queryvars": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "save_metric": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "stub": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "examples": [
                                        "https"
                                      ]
                                    },
                                    "authentication": {
                                      "type": "object",
                                      "properties": {
                                        "auth_method": {
                                          "type": "string",
                                          "examples": [
                                            "no_authentication"
                                          ]
                                        },
                                        "username": {
                                          "type": "string",
                                          "examples": [
                                            "username"
                                          ]
                                        },
                                        "password": {
                                          "type": "string",
                                          "examples": [
                                            "password"
                                          ]
                                        },
                                        "token": {
                                          "type": "string",
                                          "examples": [
                                            "token"
                                          ]
                                        },
                                        "token_timeout": {
                                          "type": "integer",
                                          "examples": [
                                            600000
                                          ]
                                        },
                                        "token_cache": {
                                          "type": "string",
                                          "examples": [
                                            "local"
                                          ]
                                        },
                                        "invalid_token_error": {
                                          "type": "integer",
                                          "examples": [
                                            401
                                          ]
                                        },
                                        "auth_field": {
                                          "type": "string",
                                          "examples": [
                                            "header%2Eheaders%2EAuthorization"
                                          ]
                                        },
                                        "auth_field_format": {
                                          "type": "string",
                                          "examples": [
                                            "Basic {b64}{username}:{password}{/b64}"
                                          ]
                                        },
                                        "auth_logging": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "client_id": {
                                          "type": "string"
                                        },
                                        "client_secret": {
                                          "type": "string"
                                        },
                                        "grant_type": {
                                          "type": "string"
                                        }
                                      },
                                      "required": []
                                    },
                                    "healthcheck": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "examples": [
                                            "none"
                                          ]
                                        },
                                        "frequency": {
                                          "type": "integer",
                                          "examples": [
                                            60000
                                          ]
                                        },
                                        "query_object": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    },
                                    "throttle": {
                                      "type": "object",
                                      "properties": {
                                        "throttle_enabled": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "number_pronghorns": {
                                          "type": "integer",
                                          "examples": [
                                            1
                                          ]
                                        },
                                        "sync_async": {
                                          "type": "string",
                                          "examples": [
                                            "sync"
                                          ]
                                        },
                                        "max_in_queue": {
                                          "type": "integer",
                                          "examples": [
                                            1000
                                          ]
                                        },
                                        "concurrent_max": {
                                          "type": "integer",
                                          "examples": [
                                            1
                                          ]
                                        },
                                        "expire_timeout": {
                                          "type": "integer",
                                          "examples": [
                                            0
                                          ]
                                        },
                                        "avg_runtime": {
                                          "type": "integer",
                                          "examples": [
                                            200
                                          ]
                                        },
                                        "priorities": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "value": {
                                                "type": "integer",
                                                "examples": [
                                                  0
                                                ]
                                              },
                                              "percent": {
                                                "type": "integer",
                                                "examples": [
                                                  100
                                                ]
                                              }
                                            },
                                            "required": []
                                          }
                                        }
                                      },
                                      "required": []
                                    },
                                    "request": {
                                      "type": "object",
                                      "properties": {
                                        "number_redirects": {
                                          "type": "integer",
                                          "examples": [
                                            0
                                          ]
                                        },
                                        "number_retries": {
                                          "type": "integer",
                                          "examples": [
                                            3
                                          ]
                                        },
                                        "limit_retry_error": {
                                          "type": "array",
                                          "items": {
                                            "type": "integer",
                                            "examples": [
                                              0
                                            ]
                                          }
                                        },
                                        "failover_codes": {
                                          "type": "array"
                                        },
                                        "attempt_timeout": {
                                          "type": "integer",
                                          "examples": [
                                            5000
                                          ]
                                        },
                                        "global_request": {
                                          "type": "object",
                                          "properties": {
                                            "payload": {
                                              "type": "object",
                                              "properties": {},
                                              "required": []
                                            },
                                            "uriOptions": {
                                              "type": "object",
                                              "properties": {},
                                              "required": []
                                            },
                                            "addlHeaders": {
                                              "type": "object",
                                              "properties": {},
                                              "required": []
                                            },
                                            "authData": {
                                              "type": "object",
                                              "properties": {},
                                              "required": []
                                            }
                                          },
                                          "required": []
                                        },
                                        "healthcheck_on_timeout": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "return_raw": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "archiving": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "return_request": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        }
                                      },
                                      "required": []
                                    },
                                    "proxy": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "host": {
                                          "type": "string"
                                        },
                                        "port": {
                                          "type": "integer",
                                          "examples": [
                                            1
                                          ]
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "examples": [
                                            "http"
                                          ]
                                        },
                                        "username": {
                                          "type": "string"
                                        },
                                        "password": {
                                          "type": "string"
                                        }
                                      },
                                      "required": []
                                    },
                                    "ssl": {
                                      "type": "object",
                                      "properties": {
                                        "ecdhCurve": {
                                          "type": "string"
                                        },
                                        "enabled": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "accept_invalid_cert": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "ca_file": {
                                          "type": "string"
                                        },
                                        "key_file": {
                                          "type": "string"
                                        },
                                        "cert_file": {
                                          "type": "string"
                                        },
                                        "secure_protocol": {
                                          "type": "string"
                                        },
                                        "ciphers": {
                                          "type": "string"
                                        }
                                      },
                                      "required": []
                                    },
                                    "mongo": {
                                      "type": "object",
                                      "properties": {
                                        "host": {
                                          "type": "string"
                                        },
                                        "port": {
                                          "type": "integer",
                                          "examples": [
                                            0
                                          ]
                                        },
                                        "database": {
                                          "type": "string"
                                        },
                                        "username": {
                                          "type": "string"
                                        },
                                        "password": {
                                          "type": "string"
                                        },
                                        "replSet": {
                                          "type": "string"
                                        },
                                        "db_ssl": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "boolean",
                                              "examples": [
                                                true,
                                                false
                                              ]
                                            },
                                            "accept_invalid_cert": {
                                              "type": "boolean",
                                              "examples": [
                                                true,
                                                false
                                              ]
                                            },
                                            "ca_file": {
                                              "type": "string"
                                            },
                                            "key_file": {
                                              "type": "string"
                                            },
                                            "cert_file": {
                                              "type": "string"
                                            }
                                          },
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    },
                                    "devicebroker": {
                                      "type": "object",
                                      "properties": {
                                        "getDevice": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "path": {
                                                "type": "string",
                                                "examples": [
                                                  "/get/devices/{id}"
                                                ]
                                              },
                                              "method": {
                                                "type": "string",
                                                "examples": [
                                                  "GET"
                                                ]
                                              },
                                              "query": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "body": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "headers": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "handleFailure": {
                                                "type": "string",
                                                "examples": [
                                                  "ignore"
                                                ]
                                              },
                                              "requestFields": {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "type": "string",
                                                    "examples": [
                                                      "name"
                                                    ]
                                                  }
                                                },
                                                "required": []
                                              },
                                              "responseDatakey": {
                                                "type": "string"
                                              },
                                              "responseFields": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "examples": [
                                                      "host"
                                                    ]
                                                  },
                                                  "ostype": {
                                                    "type": "string",
                                                    "examples": [
                                                      "os"
                                                    ]
                                                  },
                                                  "ostypePrefix": {
                                                    "type": "string",
                                                    "examples": [
                                                      "system-"
                                                    ]
                                                  },
                                                  "ipaddress": {
                                                    "type": "string",
                                                    "examples": [
                                                      "attributes%2Eipaddr"
                                                    ]
                                                  },
                                                  "port": {
                                                    "type": "string",
                                                    "examples": [
                                                      "443"
                                                    ]
                                                  }
                                                },
                                                "required": []
                                              }
                                            },
                                            "required": []
                                          }
                                        },
                                        "getDevicesFiltered": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "path": {
                                                "type": "string",
                                                "examples": [
                                                  "/get/devices"
                                                ]
                                              },
                                              "method": {
                                                "type": "string",
                                                "examples": [
                                                  "GET"
                                                ]
                                              },
                                              "query": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "body": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "headers": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "handleFailure": {
                                                "type": "string",
                                                "examples": [
                                                  "ignore"
                                                ]
                                              },
                                              "requestFields": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "responseDatakey": {
                                                "type": "string"
                                              },
                                              "responseFields": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "examples": [
                                                      "host"
                                                    ]
                                                  },
                                                  "ostype": {
                                                    "type": "string",
                                                    "examples": [
                                                      "os"
                                                    ]
                                                  },
                                                  "ostypePrefix": {
                                                    "type": "string",
                                                    "examples": [
                                                      "system-"
                                                    ]
                                                  },
                                                  "ipaddress": {
                                                    "type": "string",
                                                    "examples": [
                                                      "attributes%2Eipaddr"
                                                    ]
                                                  },
                                                  "port": {
                                                    "type": "string",
                                                    "examples": [
                                                      "443"
                                                    ]
                                                  }
                                                },
                                                "required": []
                                              }
                                            },
                                            "required": []
                                          }
                                        },
                                        "isAlive": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "path": {
                                                "type": "string",
                                                "examples": [
                                                  "/get/devices/{id}/status"
                                                ]
                                              },
                                              "method": {
                                                "type": "string",
                                                "examples": [
                                                  "GET"
                                                ]
                                              },
                                              "query": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "body": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "headers": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "handleFailure": {
                                                "type": "string",
                                                "examples": [
                                                  "ignore"
                                                ]
                                              },
                                              "requestFields": {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "type": "string",
                                                    "examples": [
                                                      "name"
                                                    ]
                                                  }
                                                },
                                                "required": []
                                              },
                                              "responseDatakey": {
                                                "type": "string"
                                              },
                                              "responseFields": {
                                                "type": "object",
                                                "properties": {
                                                  "status": {
                                                    "type": "string",
                                                    "examples": [
                                                      "status"
                                                    ]
                                                  },
                                                  "statusValue": {
                                                    "type": "string",
                                                    "examples": [
                                                      "online"
                                                    ]
                                                  }
                                                },
                                                "required": []
                                              }
                                            },
                                            "required": []
                                          }
                                        },
                                        "getConfig": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "path": {
                                                "type": "string",
                                                "examples": [
                                                  "/get/devices/{id}/configPart1"
                                                ]
                                              },
                                              "method": {
                                                "type": "string",
                                                "examples": [
                                                  "GET"
                                                ]
                                              },
                                              "query": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "body": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "headers": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "handleFailure": {
                                                "type": "string",
                                                "examples": [
                                                  "ignore"
                                                ]
                                              },
                                              "requestFields": {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "type": "string",
                                                    "examples": [
                                                      "name"
                                                    ]
                                                  }
                                                },
                                                "required": []
                                              },
                                              "responseDatakey": {
                                                "type": "string"
                                              },
                                              "responseFields": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              }
                                            },
                                            "required": []
                                          }
                                        },
                                        "getCount": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "path": {
                                                "type": "string",
                                                "examples": [
                                                  "/get/devices"
                                                ]
                                              },
                                              "method": {
                                                "type": "string",
                                                "examples": [
                                                  "GET"
                                                ]
                                              },
                                              "query": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "body": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "headers": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "handleFailure": {
                                                "type": "string",
                                                "examples": [
                                                  "ignore"
                                                ]
                                              },
                                              "requestFields": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              },
                                              "responseDatakey": {
                                                "type": "string"
                                              },
                                              "responseFields": {
                                                "type": "object",
                                                "properties": {},
                                                "required": []
                                              }
                                            },
                                            "required": []
                                          }
                                        }
                                      },
                                      "required": []
                                    }
                                  },
                                  "required": []
                                },
                                "logLevel": {
                                  "type": "string",
                                  "examples": [
                                    "none"
                                  ]
                                },
                                "timeout": {
                                  "type": "integer",
                                  "examples": [
                                    120000
                                  ]
                                }
                              },
                              "required": []
                            },
                            "isEncrypted": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            },
                            "loggerProps": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "examples": [
                                    "Logging"
                                  ]
                                },
                                "log_max_files": {
                                  "type": "integer",
                                  "examples": [
                                    10
                                  ]
                                },
                                "log_max_file_size": {
                                  "type": "integer",
                                  "examples": [
                                    10485760
                                  ]
                                },
                                "log_level": {
                                  "type": "string",
                                  "examples": [
                                    "info"
                                  ]
                                },
                                "log_directory": {
                                  "type": "string",
                                  "examples": [
                                    "/opt/itential/logs"
                                  ]
                                },
                                "log_filename": {
                                  "type": "string",
                                  "examples": [
                                    "vlocityServiceOrdering%2Elog"
                                  ]
                                },
                                "log_timezone_offset": {
                                  "type": "integer",
                                  "examples": [
                                    0
                                  ]
                                },
                                "console_level": {
                                  "type": "string",
                                  "examples": [
                                    "info"
                                  ]
                                },
                                "syslog": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "type": "string",
                                      "examples": [
                                        "warning"
                                      ]
                                    },
                                    "host": {
                                      "type": "string",
                                      "examples": [
                                        "127%2E0%2E0%2E1"
                                      ],
                                      "format": "ipv4"
                                    },
                                    "port": {
                                      "type": "integer",
                                      "examples": [
                                        514
                                      ]
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "examples": [
                                        "udp4"
                                      ]
                                    },
                                    "facility": {
                                      "type": "string",
                                      "examples": [
                                        "local0"
                                      ]
                                    },
                                    "type": {
                                      "type": "string",
                                      "examples": [
                                        "BSD"
                                      ]
                                    },
                                    "path": {
                                      "type": "string"
                                    },
                                    "pid": {
                                      "type": "string",
                                      "examples": [
                                        "process%2Epid"
                                      ]
                                    },
                                    "localhost": {
                                      "type": "string"
                                    },
                                    "app_name": {
                                      "type": "string"
                                    },
                                    "eol": {
                                      "type": "string"
                                    }
                                  },
                                  "required": []
                                }
                              },
                              "required": []
                            },
                            "virtual": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    }
                  }
                },
                "isContext": true,
                "isThis": true,
                "isIndexed": true
              }
            ],
            "outgoing": [
              {
                "$id": "newValue",
                "type": "object",
                "properties": {
                  "matchedAdapter": {
                    "type": "array"
                  },
                  "listener": {
                    "type": "string",
                    "examples": [
                      "matchedAdapters"
                    ]
                  },
                  "adapterCount": {
                    "type": "number",
                    "examples": [
                      1
                    ]
                  }
                },
                "required": []
              }
            ],
            "functions": [],
            "name": "ƒ_map_1",
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Array",
                "method": "getIndex",
                "args": [
                  null,
                  1
                ],
                "view": {
                  "row": 1,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 2,
                "type": "method",
                "library": "String",
                "method": "split",
                "args": [
                  null,
                  "://",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/callback"
                },
                "to": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 2,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 5,
                "type": "method",
                "library": "Array",
                "method": "filter",
                "args": [
                  null,
                  "ƒ_query_1",
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 3
                },
                "context": "#"
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/2/value"
                },
                "context": "#"
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "thisArg",
                  "ptr": "/0_adapters"
                },
                "to": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 8,
                "type": "method",
                "library": "Array",
                "method": "length",
                "args": [
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 4
                },
                "context": "#"
              },
              {
                "id": 9,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 10,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 8,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": "/adapterCount"
                },
                "context": "#"
              },
              {
                "id": 11,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 5,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": "/matchedAdapter"
                },
                "context": "#"
              },
              {
                "id": 12,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/callback"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": "/listener"
                },
                "context": "#"
              }
            ],
            "view": {
              "col": 4,
              "row": 4
            },
            "id": "ƒ_map_1",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "isActive": {
                        "type": "boolean",
                        "examples": [
                          true,
                          false
                        ]
                      },
                      "activeSync": {
                        "type": "boolean",
                        "examples": [
                          true,
                          false
                        ]
                      }
                    },
                    "required": []
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "examples": [
                          "vlocityServiceOrdering"
                        ]
                      },
                      "model": {
                        "type": "string",
                        "examples": [
                          "@itentialopensource/adapter-apiServiceordering"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "examples": [
                          "Adapter"
                        ]
                      },
                      "properties": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "examples": [
                              "vlocityServiceOrdering"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "ApiServiceordering"
                            ]
                          },
                          "brokers": {
                            "type": "array"
                          },
                          "groups": {
                            "type": "array"
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "host": {
                                "type": "string",
                                "examples": [
                                  "localhost"
                                ]
                              },
                              "port": {
                                "type": "integer",
                                "examples": [
                                  443
                                ]
                              },
                              "base_path": {
                                "type": "string",
                                "examples": [
                                  "/tmf-api/serviceOrdering/v4"
                                ]
                              },
                              "version": {
                                "type": "string"
                              },
                              "cache_location": {
                                "type": "string",
                                "examples": [
                                  "none"
                                ]
                              },
                              "encode_pathvars": {
                                "type": "boolean",
                                "examples": [
                                  true,
                                  false
                                ]
                              },
                              "encode_queryvars": {
                                "type": "boolean",
                                "examples": [
                                  true,
                                  false
                                ]
                              },
                              "save_metric": {
                                "type": "boolean",
                                "examples": [
                                  true,
                                  false
                                ]
                              },
                              "stub": {
                                "type": "boolean",
                                "examples": [
                                  true,
                                  false
                                ]
                              },
                              "protocol": {
                                "type": "string",
                                "examples": [
                                  "https"
                                ]
                              },
                              "authentication": {
                                "type": "object",
                                "properties": {
                                  "auth_method": {
                                    "type": "string",
                                    "examples": [
                                      "no_authentication"
                                    ]
                                  },
                                  "username": {
                                    "type": "string",
                                    "examples": [
                                      "username"
                                    ]
                                  },
                                  "password": {
                                    "type": "string",
                                    "examples": [
                                      "password"
                                    ]
                                  },
                                  "token": {
                                    "type": "string",
                                    "examples": [
                                      "token"
                                    ]
                                  },
                                  "token_timeout": {
                                    "type": "integer",
                                    "examples": [
                                      600000
                                    ]
                                  },
                                  "token_cache": {
                                    "type": "string",
                                    "examples": [
                                      "local"
                                    ]
                                  },
                                  "invalid_token_error": {
                                    "type": "integer",
                                    "examples": [
                                      401
                                    ]
                                  },
                                  "auth_field": {
                                    "type": "string",
                                    "examples": [
                                      "header%2Eheaders%2EAuthorization"
                                    ]
                                  },
                                  "auth_field_format": {
                                    "type": "string",
                                    "examples": [
                                      "Basic {b64}{username}:{password}{/b64}"
                                    ]
                                  },
                                  "auth_logging": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "client_id": {
                                    "type": "string"
                                  },
                                  "client_secret": {
                                    "type": "string"
                                  },
                                  "grant_type": {
                                    "type": "string"
                                  }
                                },
                                "required": []
                              },
                              "healthcheck": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "none"
                                    ]
                                  },
                                  "frequency": {
                                    "type": "integer",
                                    "examples": [
                                      60000
                                    ]
                                  },
                                  "query_object": {
                                    "type": "object",
                                    "properties": {},
                                    "required": []
                                  }
                                },
                                "required": []
                              },
                              "throttle": {
                                "type": "object",
                                "properties": {
                                  "throttle_enabled": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "number_pronghorns": {
                                    "type": "integer",
                                    "examples": [
                                      1
                                    ]
                                  },
                                  "sync_async": {
                                    "type": "string",
                                    "examples": [
                                      "sync"
                                    ]
                                  },
                                  "max_in_queue": {
                                    "type": "integer",
                                    "examples": [
                                      1000
                                    ]
                                  },
                                  "concurrent_max": {
                                    "type": "integer",
                                    "examples": [
                                      1
                                    ]
                                  },
                                  "expire_timeout": {
                                    "type": "integer",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "avg_runtime": {
                                    "type": "integer",
                                    "examples": [
                                      200
                                    ]
                                  },
                                  "priorities": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "integer",
                                          "examples": [
                                            0
                                          ]
                                        },
                                        "percent": {
                                          "type": "integer",
                                          "examples": [
                                            100
                                          ]
                                        }
                                      },
                                      "required": []
                                    }
                                  }
                                },
                                "required": []
                              },
                              "request": {
                                "type": "object",
                                "properties": {
                                  "number_redirects": {
                                    "type": "integer",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "number_retries": {
                                    "type": "integer",
                                    "examples": [
                                      3
                                    ]
                                  },
                                  "limit_retry_error": {
                                    "type": "array",
                                    "items": {
                                      "type": "integer",
                                      "examples": [
                                        0
                                      ]
                                    }
                                  },
                                  "failover_codes": {
                                    "type": "array"
                                  },
                                  "attempt_timeout": {
                                    "type": "integer",
                                    "examples": [
                                      5000
                                    ]
                                  },
                                  "global_request": {
                                    "type": "object",
                                    "properties": {
                                      "payload": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "uriOptions": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "addlHeaders": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "authData": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      }
                                    },
                                    "required": []
                                  },
                                  "healthcheck_on_timeout": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "return_raw": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "archiving": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "return_request": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  }
                                },
                                "required": []
                              },
                              "proxy": {
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "host": {
                                    "type": "string"
                                  },
                                  "port": {
                                    "type": "integer",
                                    "examples": [
                                      1
                                    ]
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "examples": [
                                      "http"
                                    ]
                                  },
                                  "username": {
                                    "type": "string"
                                  },
                                  "password": {
                                    "type": "string"
                                  }
                                },
                                "required": []
                              },
                              "ssl": {
                                "type": "object",
                                "properties": {
                                  "ecdhCurve": {
                                    "type": "string"
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "accept_invalid_cert": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "ca_file": {
                                    "type": "string"
                                  },
                                  "key_file": {
                                    "type": "string"
                                  },
                                  "cert_file": {
                                    "type": "string"
                                  },
                                  "secure_protocol": {
                                    "type": "string"
                                  },
                                  "ciphers": {
                                    "type": "string"
                                  }
                                },
                                "required": []
                              },
                              "mongo": {
                                "type": "object",
                                "properties": {
                                  "host": {
                                    "type": "string"
                                  },
                                  "port": {
                                    "type": "integer",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "database": {
                                    "type": "string"
                                  },
                                  "username": {
                                    "type": "string"
                                  },
                                  "password": {
                                    "type": "string"
                                  },
                                  "replSet": {
                                    "type": "string"
                                  },
                                  "db_ssl": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "boolean",
                                        "examples": [
                                          true,
                                          false
                                        ]
                                      },
                                      "accept_invalid_cert": {
                                        "type": "boolean",
                                        "examples": [
                                          true,
                                          false
                                        ]
                                      },
                                      "ca_file": {
                                        "type": "string"
                                      },
                                      "key_file": {
                                        "type": "string"
                                      },
                                      "cert_file": {
                                        "type": "string"
                                      }
                                    },
                                    "required": []
                                  }
                                },
                                "required": []
                              },
                              "devicebroker": {
                                "type": "object",
                                "properties": {
                                  "getDevice": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "path": {
                                          "type": "string",
                                          "examples": [
                                            "/get/devices/{id}"
                                          ]
                                        },
                                        "method": {
                                          "type": "string",
                                          "examples": [
                                            "GET"
                                          ]
                                        },
                                        "query": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "body": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "headers": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "handleFailure": {
                                          "type": "string",
                                          "examples": [
                                            "ignore"
                                          ]
                                        },
                                        "requestFields": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "examples": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": []
                                        },
                                        "responseDatakey": {
                                          "type": "string"
                                        },
                                        "responseFields": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "examples": [
                                                "host"
                                              ]
                                            },
                                            "ostype": {
                                              "type": "string",
                                              "examples": [
                                                "os"
                                              ]
                                            },
                                            "ostypePrefix": {
                                              "type": "string",
                                              "examples": [
                                                "system-"
                                              ]
                                            },
                                            "ipaddress": {
                                              "type": "string",
                                              "examples": [
                                                "attributes%2Eipaddr"
                                              ]
                                            },
                                            "port": {
                                              "type": "string",
                                              "examples": [
                                                "443"
                                              ]
                                            }
                                          },
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    }
                                  },
                                  "getDevicesFiltered": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "path": {
                                          "type": "string",
                                          "examples": [
                                            "/get/devices"
                                          ]
                                        },
                                        "method": {
                                          "type": "string",
                                          "examples": [
                                            "GET"
                                          ]
                                        },
                                        "query": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "body": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "headers": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "handleFailure": {
                                          "type": "string",
                                          "examples": [
                                            "ignore"
                                          ]
                                        },
                                        "requestFields": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "responseDatakey": {
                                          "type": "string"
                                        },
                                        "responseFields": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "examples": [
                                                "host"
                                              ]
                                            },
                                            "ostype": {
                                              "type": "string",
                                              "examples": [
                                                "os"
                                              ]
                                            },
                                            "ostypePrefix": {
                                              "type": "string",
                                              "examples": [
                                                "system-"
                                              ]
                                            },
                                            "ipaddress": {
                                              "type": "string",
                                              "examples": [
                                                "attributes%2Eipaddr"
                                              ]
                                            },
                                            "port": {
                                              "type": "string",
                                              "examples": [
                                                "443"
                                              ]
                                            }
                                          },
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    }
                                  },
                                  "isAlive": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "path": {
                                          "type": "string",
                                          "examples": [
                                            "/get/devices/{id}/status"
                                          ]
                                        },
                                        "method": {
                                          "type": "string",
                                          "examples": [
                                            "GET"
                                          ]
                                        },
                                        "query": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "body": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "headers": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "handleFailure": {
                                          "type": "string",
                                          "examples": [
                                            "ignore"
                                          ]
                                        },
                                        "requestFields": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "examples": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": []
                                        },
                                        "responseDatakey": {
                                          "type": "string"
                                        },
                                        "responseFields": {
                                          "type": "object",
                                          "properties": {
                                            "status": {
                                              "type": "string",
                                              "examples": [
                                                "status"
                                              ]
                                            },
                                            "statusValue": {
                                              "type": "string",
                                              "examples": [
                                                "online"
                                              ]
                                            }
                                          },
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    }
                                  },
                                  "getConfig": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "path": {
                                          "type": "string",
                                          "examples": [
                                            "/get/devices/{id}/configPart1"
                                          ]
                                        },
                                        "method": {
                                          "type": "string",
                                          "examples": [
                                            "GET"
                                          ]
                                        },
                                        "query": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "body": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "headers": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "handleFailure": {
                                          "type": "string",
                                          "examples": [
                                            "ignore"
                                          ]
                                        },
                                        "requestFields": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "examples": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": []
                                        },
                                        "responseDatakey": {
                                          "type": "string"
                                        },
                                        "responseFields": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    }
                                  },
                                  "getCount": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "path": {
                                          "type": "string",
                                          "examples": [
                                            "/get/devices"
                                          ]
                                        },
                                        "method": {
                                          "type": "string",
                                          "examples": [
                                            "GET"
                                          ]
                                        },
                                        "query": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "body": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "headers": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "handleFailure": {
                                          "type": "string",
                                          "examples": [
                                            "ignore"
                                          ]
                                        },
                                        "requestFields": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "responseDatakey": {
                                          "type": "string"
                                        },
                                        "responseFields": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    }
                                  }
                                },
                                "required": []
                              }
                            },
                            "required": []
                          },
                          "logLevel": {
                            "type": "string",
                            "examples": [
                              "none"
                            ]
                          },
                          "timeout": {
                            "type": "integer",
                            "examples": [
                              120000
                            ]
                          }
                        },
                        "required": []
                      },
                      "isEncrypted": {
                        "type": "boolean",
                        "examples": [
                          true,
                          false
                        ]
                      },
                      "loggerProps": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string",
                            "examples": [
                              "Logging"
                            ]
                          },
                          "log_max_files": {
                            "type": "integer",
                            "examples": [
                              10
                            ]
                          },
                          "log_max_file_size": {
                            "type": "integer",
                            "examples": [
                              10485760
                            ]
                          },
                          "log_level": {
                            "type": "string",
                            "examples": [
                              "info"
                            ]
                          },
                          "log_directory": {
                            "type": "string",
                            "examples": [
                              "/opt/itential/logs"
                            ]
                          },
                          "log_filename": {
                            "type": "string",
                            "examples": [
                              "vlocityServiceOrdering%2Elog"
                            ]
                          },
                          "log_timezone_offset": {
                            "type": "integer",
                            "examples": [
                              0
                            ]
                          },
                          "console_level": {
                            "type": "string",
                            "examples": [
                              "info"
                            ]
                          },
                          "syslog": {
                            "type": "object",
                            "properties": {
                              "level": {
                                "type": "string",
                                "examples": [
                                  "warning"
                                ]
                              },
                              "host": {
                                "type": "string",
                                "examples": [
                                  "127%2E0%2E0%2E1"
                                ],
                                "format": "ipv4"
                              },
                              "port": {
                                "type": "integer",
                                "examples": [
                                  514
                                ]
                              },
                              "protocol": {
                                "type": "string",
                                "examples": [
                                  "udp4"
                                ]
                              },
                              "facility": {
                                "type": "string",
                                "examples": [
                                  "local0"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "examples": [
                                  "BSD"
                                ]
                              },
                              "path": {
                                "type": "string"
                              },
                              "pid": {
                                "type": "string",
                                "examples": [
                                  "process%2Epid"
                                ]
                              },
                              "localhost": {
                                "type": "string"
                              },
                              "app_name": {
                                "type": "string"
                              },
                              "eol": {
                                "type": "string"
                              }
                            },
                            "required": []
                          }
                        },
                        "required": []
                      },
                      "virtual": {
                        "type": "boolean",
                        "examples": [
                          true,
                          false
                        ]
                      }
                    },
                    "required": []
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "isActive": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        },
                        "activeSync": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        }
                      },
                      "required": []
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "vlocityServiceOrdering"
                          ]
                        },
                        "model": {
                          "type": "string",
                          "examples": [
                            "@itentialopensource/adapter-apiServiceordering"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "Adapter"
                          ]
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "examples": [
                                "vlocityServiceOrdering"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "examples": [
                                "ApiServiceordering"
                              ]
                            },
                            "brokers": {
                              "type": "array"
                            },
                            "groups": {
                              "type": "array"
                            },
                            "properties": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "examples": [
                                    "localhost"
                                  ]
                                },
                                "port": {
                                  "type": "integer",
                                  "examples": [
                                    443
                                  ]
                                },
                                "base_path": {
                                  "type": "string",
                                  "examples": [
                                    "/tmf-api/serviceOrdering/v4"
                                  ]
                                },
                                "version": {
                                  "type": "string"
                                },
                                "cache_location": {
                                  "type": "string",
                                  "examples": [
                                    "none"
                                  ]
                                },
                                "encode_pathvars": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "encode_queryvars": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "save_metric": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "stub": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "protocol": {
                                  "type": "string",
                                  "examples": [
                                    "https"
                                  ]
                                },
                                "authentication": {
                                  "type": "object",
                                  "properties": {
                                    "auth_method": {
                                      "type": "string",
                                      "examples": [
                                        "no_authentication"
                                      ]
                                    },
                                    "username": {
                                      "type": "string",
                                      "examples": [
                                        "username"
                                      ]
                                    },
                                    "password": {
                                      "type": "string",
                                      "examples": [
                                        "password"
                                      ]
                                    },
                                    "token": {
                                      "type": "string",
                                      "examples": [
                                        "token"
                                      ]
                                    },
                                    "token_timeout": {
                                      "type": "integer",
                                      "examples": [
                                        600000
                                      ]
                                    },
                                    "token_cache": {
                                      "type": "string",
                                      "examples": [
                                        "local"
                                      ]
                                    },
                                    "invalid_token_error": {
                                      "type": "integer",
                                      "examples": [
                                        401
                                      ]
                                    },
                                    "auth_field": {
                                      "type": "string",
                                      "examples": [
                                        "header%2Eheaders%2EAuthorization"
                                      ]
                                    },
                                    "auth_field_format": {
                                      "type": "string",
                                      "examples": [
                                        "Basic {b64}{username}:{password}{/b64}"
                                      ]
                                    },
                                    "auth_logging": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "client_id": {
                                      "type": "string"
                                    },
                                    "client_secret": {
                                      "type": "string"
                                    },
                                    "grant_type": {
                                      "type": "string"
                                    }
                                  },
                                  "required": []
                                },
                                "healthcheck": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "examples": [
                                        "none"
                                      ]
                                    },
                                    "frequency": {
                                      "type": "integer",
                                      "examples": [
                                        60000
                                      ]
                                    },
                                    "query_object": {
                                      "type": "object",
                                      "properties": {},
                                      "required": []
                                    }
                                  },
                                  "required": []
                                },
                                "throttle": {
                                  "type": "object",
                                  "properties": {
                                    "throttle_enabled": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "number_pronghorns": {
                                      "type": "integer",
                                      "examples": [
                                        1
                                      ]
                                    },
                                    "sync_async": {
                                      "type": "string",
                                      "examples": [
                                        "sync"
                                      ]
                                    },
                                    "max_in_queue": {
                                      "type": "integer",
                                      "examples": [
                                        1000
                                      ]
                                    },
                                    "concurrent_max": {
                                      "type": "integer",
                                      "examples": [
                                        1
                                      ]
                                    },
                                    "expire_timeout": {
                                      "type": "integer",
                                      "examples": [
                                        0
                                      ]
                                    },
                                    "avg_runtime": {
                                      "type": "integer",
                                      "examples": [
                                        200
                                      ]
                                    },
                                    "priorities": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "value": {
                                            "type": "integer",
                                            "examples": [
                                              0
                                            ]
                                          },
                                          "percent": {
                                            "type": "integer",
                                            "examples": [
                                              100
                                            ]
                                          }
                                        },
                                        "required": []
                                      }
                                    }
                                  },
                                  "required": []
                                },
                                "request": {
                                  "type": "object",
                                  "properties": {
                                    "number_redirects": {
                                      "type": "integer",
                                      "examples": [
                                        0
                                      ]
                                    },
                                    "number_retries": {
                                      "type": "integer",
                                      "examples": [
                                        3
                                      ]
                                    },
                                    "limit_retry_error": {
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "examples": [
                                          0
                                        ]
                                      }
                                    },
                                    "failover_codes": {
                                      "type": "array"
                                    },
                                    "attempt_timeout": {
                                      "type": "integer",
                                      "examples": [
                                        5000
                                      ]
                                    },
                                    "global_request": {
                                      "type": "object",
                                      "properties": {
                                        "payload": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "uriOptions": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "addlHeaders": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "authData": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    },
                                    "healthcheck_on_timeout": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "return_raw": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "archiving": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "return_request": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    }
                                  },
                                  "required": []
                                },
                                "proxy": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "host": {
                                      "type": "string"
                                    },
                                    "port": {
                                      "type": "integer",
                                      "examples": [
                                        1
                                      ]
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "examples": [
                                        "http"
                                      ]
                                    },
                                    "username": {
                                      "type": "string"
                                    },
                                    "password": {
                                      "type": "string"
                                    }
                                  },
                                  "required": []
                                },
                                "ssl": {
                                  "type": "object",
                                  "properties": {
                                    "ecdhCurve": {
                                      "type": "string"
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "accept_invalid_cert": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "ca_file": {
                                      "type": "string"
                                    },
                                    "key_file": {
                                      "type": "string"
                                    },
                                    "cert_file": {
                                      "type": "string"
                                    },
                                    "secure_protocol": {
                                      "type": "string"
                                    },
                                    "ciphers": {
                                      "type": "string"
                                    }
                                  },
                                  "required": []
                                },
                                "mongo": {
                                  "type": "object",
                                  "properties": {
                                    "host": {
                                      "type": "string"
                                    },
                                    "port": {
                                      "type": "integer",
                                      "examples": [
                                        0
                                      ]
                                    },
                                    "database": {
                                      "type": "string"
                                    },
                                    "username": {
                                      "type": "string"
                                    },
                                    "password": {
                                      "type": "string"
                                    },
                                    "replSet": {
                                      "type": "string"
                                    },
                                    "db_ssl": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "accept_invalid_cert": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "ca_file": {
                                          "type": "string"
                                        },
                                        "key_file": {
                                          "type": "string"
                                        },
                                        "cert_file": {
                                          "type": "string"
                                        }
                                      },
                                      "required": []
                                    }
                                  },
                                  "required": []
                                },
                                "devicebroker": {
                                  "type": "object",
                                  "properties": {
                                    "getDevice": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "path": {
                                            "type": "string",
                                            "examples": [
                                              "/get/devices/{id}"
                                            ]
                                          },
                                          "method": {
                                            "type": "string",
                                            "examples": [
                                              "GET"
                                            ]
                                          },
                                          "query": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "body": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "headers": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "handleFailure": {
                                            "type": "string",
                                            "examples": [
                                              "ignore"
                                            ]
                                          },
                                          "requestFields": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "examples": [
                                                  "name"
                                                ]
                                              }
                                            },
                                            "required": []
                                          },
                                          "responseDatakey": {
                                            "type": "string"
                                          },
                                          "responseFields": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "examples": [
                                                  "host"
                                                ]
                                              },
                                              "ostype": {
                                                "type": "string",
                                                "examples": [
                                                  "os"
                                                ]
                                              },
                                              "ostypePrefix": {
                                                "type": "string",
                                                "examples": [
                                                  "system-"
                                                ]
                                              },
                                              "ipaddress": {
                                                "type": "string",
                                                "examples": [
                                                  "attributes%2Eipaddr"
                                                ]
                                              },
                                              "port": {
                                                "type": "string",
                                                "examples": [
                                                  "443"
                                                ]
                                              }
                                            },
                                            "required": []
                                          }
                                        },
                                        "required": []
                                      }
                                    },
                                    "getDevicesFiltered": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "path": {
                                            "type": "string",
                                            "examples": [
                                              "/get/devices"
                                            ]
                                          },
                                          "method": {
                                            "type": "string",
                                            "examples": [
                                              "GET"
                                            ]
                                          },
                                          "query": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "body": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "headers": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "handleFailure": {
                                            "type": "string",
                                            "examples": [
                                              "ignore"
                                            ]
                                          },
                                          "requestFields": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "responseDatakey": {
                                            "type": "string"
                                          },
                                          "responseFields": {
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "examples": [
                                                  "host"
                                                ]
                                              },
                                              "ostype": {
                                                "type": "string",
                                                "examples": [
                                                  "os"
                                                ]
                                              },
                                              "ostypePrefix": {
                                                "type": "string",
                                                "examples": [
                                                  "system-"
                                                ]
                                              },
                                              "ipaddress": {
                                                "type": "string",
                                                "examples": [
                                                  "attributes%2Eipaddr"
                                                ]
                                              },
                                              "port": {
                                                "type": "string",
                                                "examples": [
                                                  "443"
                                                ]
                                              }
                                            },
                                            "required": []
                                          }
                                        },
                                        "required": []
                                      }
                                    },
                                    "isAlive": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "path": {
                                            "type": "string",
                                            "examples": [
                                              "/get/devices/{id}/status"
                                            ]
                                          },
                                          "method": {
                                            "type": "string",
                                            "examples": [
                                              "GET"
                                            ]
                                          },
                                          "query": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "body": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "headers": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "handleFailure": {
                                            "type": "string",
                                            "examples": [
                                              "ignore"
                                            ]
                                          },
                                          "requestFields": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "examples": [
                                                  "name"
                                                ]
                                              }
                                            },
                                            "required": []
                                          },
                                          "responseDatakey": {
                                            "type": "string"
                                          },
                                          "responseFields": {
                                            "type": "object",
                                            "properties": {
                                              "status": {
                                                "type": "string",
                                                "examples": [
                                                  "status"
                                                ]
                                              },
                                              "statusValue": {
                                                "type": "string",
                                                "examples": [
                                                  "online"
                                                ]
                                              }
                                            },
                                            "required": []
                                          }
                                        },
                                        "required": []
                                      }
                                    },
                                    "getConfig": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "path": {
                                            "type": "string",
                                            "examples": [
                                              "/get/devices/{id}/configPart1"
                                            ]
                                          },
                                          "method": {
                                            "type": "string",
                                            "examples": [
                                              "GET"
                                            ]
                                          },
                                          "query": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "body": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "headers": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "handleFailure": {
                                            "type": "string",
                                            "examples": [
                                              "ignore"
                                            ]
                                          },
                                          "requestFields": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "type": "string",
                                                "examples": [
                                                  "name"
                                                ]
                                              }
                                            },
                                            "required": []
                                          },
                                          "responseDatakey": {
                                            "type": "string"
                                          },
                                          "responseFields": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          }
                                        },
                                        "required": []
                                      }
                                    },
                                    "getCount": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "path": {
                                            "type": "string",
                                            "examples": [
                                              "/get/devices"
                                            ]
                                          },
                                          "method": {
                                            "type": "string",
                                            "examples": [
                                              "GET"
                                            ]
                                          },
                                          "query": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "body": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "headers": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "handleFailure": {
                                            "type": "string",
                                            "examples": [
                                              "ignore"
                                            ]
                                          },
                                          "requestFields": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          },
                                          "responseDatakey": {
                                            "type": "string"
                                          },
                                          "responseFields": {
                                            "type": "object",
                                            "properties": {},
                                            "required": []
                                          }
                                        },
                                        "required": []
                                      }
                                    }
                                  },
                                  "required": []
                                }
                              },
                              "required": []
                            },
                            "logLevel": {
                              "type": "string",
                              "examples": [
                                "none"
                              ]
                            },
                            "timeout": {
                              "type": "integer",
                              "examples": [
                                120000
                              ]
                            }
                          },
                          "required": []
                        },
                        "isEncrypted": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        },
                        "loggerProps": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "examples": [
                                "Logging"
                              ]
                            },
                            "log_max_files": {
                              "type": "integer",
                              "examples": [
                                10
                              ]
                            },
                            "log_max_file_size": {
                              "type": "integer",
                              "examples": [
                                10485760
                              ]
                            },
                            "log_level": {
                              "type": "string",
                              "examples": [
                                "info"
                              ]
                            },
                            "log_directory": {
                              "type": "string",
                              "examples": [
                                "/opt/itential/logs"
                              ]
                            },
                            "log_filename": {
                              "type": "string",
                              "examples": [
                                "vlocityServiceOrdering%2Elog"
                              ]
                            },
                            "log_timezone_offset": {
                              "type": "integer",
                              "examples": [
                                0
                              ]
                            },
                            "console_level": {
                              "type": "string",
                              "examples": [
                                "info"
                              ]
                            },
                            "syslog": {
                              "type": "object",
                              "properties": {
                                "level": {
                                  "type": "string",
                                  "examples": [
                                    "warning"
                                  ]
                                },
                                "host": {
                                  "type": "string",
                                  "examples": [
                                    "127%2E0%2E0%2E1"
                                  ],
                                  "format": "ipv4"
                                },
                                "port": {
                                  "type": "integer",
                                  "examples": [
                                    514
                                  ]
                                },
                                "protocol": {
                                  "type": "string",
                                  "examples": [
                                    "udp4"
                                  ]
                                },
                                "facility": {
                                  "type": "string",
                                  "examples": [
                                    "local0"
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "BSD"
                                  ]
                                },
                                "path": {
                                  "type": "string"
                                },
                                "pid": {
                                  "type": "string",
                                  "examples": [
                                    "process%2Epid"
                                  ]
                                },
                                "localhost": {
                                  "type": "string"
                                },
                                "app_name": {
                                  "type": "string"
                                },
                                "eol": {
                                  "type": "string"
                                }
                              },
                              "required": []
                            }
                          },
                          "required": []
                        },
                        "virtual": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "thisArg",
                "type": "object",
                "properties": {
                  "0_getIndex return": {
                    "type": [
                      "array",
                      "boolean",
                      "number",
                      "integer",
                      "string",
                      "object",
                      "null"
                    ]
                  }
                },
                "isContext": true,
                "isThis": true,
                "isIndexed": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 2,
                  "col": 1
                },
                "context": "#"
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/data/properties/properties/host"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "thisArg",
                  "ptr": "/0_getIndex return"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                },
                "context": "#"
              }
            ],
            "view": {
              "col": 2,
              "row": 4
            },
            "id": "ƒ_query_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2023-03-22T12:48:03.411Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-22T12:48:03.411Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "63d0456dd341d802366b7c79",
        "name": "TMF Filter Adapter by Model",
        "description": "",
        "incoming": [
          {
            "$id": "adapters",
            "type": "object",
            "properties": {
              "icode": {
                "type": "string",
                "examples": [
                  "AD%2E200"
                ]
              },
              "response": {
                "type": "object",
                "properties": {
                  "results": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "isActive": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            }
                          },
                          "required": []
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "examples": [
                                "AutomationGateway"
                              ]
                            },
                            "model": {
                              "type": "string",
                              "examples": [
                                "@itential/adapter-automation_gateway"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "examples": [
                                "Adapter"
                              ]
                            },
                            "properties": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "examples": [
                                    "AutomationGateway"
                                  ]
                                },
                                "type": {
                                  "type": "string",
                                  "examples": [
                                    "AutomationGateway"
                                  ]
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "host": {
                                      "type": "string",
                                      "examples": [
                                        "automation-gateway"
                                      ]
                                    },
                                    "port": {
                                      "type": "integer",
                                      "examples": [
                                        8083
                                      ]
                                    },
                                    "base_path": {
                                      "type": "string"
                                    },
                                    "version": {
                                      "type": "string",
                                      "examples": [
                                        "v2%2E0"
                                      ]
                                    },
                                    "cache_location": {
                                      "type": "string",
                                      "examples": [
                                        "none"
                                      ]
                                    },
                                    "stub": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "examples": [
                                        "http"
                                      ]
                                    },
                                    "authentication": {
                                      "type": "object",
                                      "properties": {
                                        "auth_method": {
                                          "type": "string",
                                          "examples": [
                                            "request_token"
                                          ]
                                        },
                                        "username": {
                                          "type": "string",
                                          "examples": [
                                            "admin@itential"
                                          ]
                                        },
                                        "password": {
                                          "type": "string",
                                          "examples": [
                                            "admin"
                                          ]
                                        },
                                        "token": {
                                          "type": "string",
                                          "examples": [
                                            "token"
                                          ]
                                        },
                                        "token_user_field": {
                                          "type": "string",
                                          "examples": [
                                            "username"
                                          ]
                                        },
                                        "token_password_field": {
                                          "type": "string",
                                          "examples": [
                                            "password"
                                          ]
                                        },
                                        "token_result_field": {
                                          "type": "string",
                                          "examples": [
                                            "token"
                                          ]
                                        },
                                        "token_URI_path": {
                                          "type": "string",
                                          "examples": [
                                            "/api/v2%2E0/login"
                                          ]
                                        },
                                        "invalid_token_error": {
                                          "type": "integer",
                                          "examples": [
                                            401
                                          ]
                                        },
                                        "token_timeout": {
                                          "type": "integer",
                                          "examples": [
                                            600
                                          ]
                                        },
                                        "token_cache": {
                                          "type": "string",
                                          "examples": [
                                            "local"
                                          ]
                                        },
                                        "auth_field": {
                                          "type": "string",
                                          "examples": [
                                            "header%2Eheaders%2EAuthorization"
                                          ]
                                        },
                                        "auth_field_format": {
                                          "type": "string",
                                          "examples": [
                                            "{token}"
                                          ]
                                        }
                                      },
                                      "required": []
                                    },
                                    "healthcheck": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "examples": [
                                            "intermittent"
                                          ]
                                        },
                                        "frequency": {
                                          "type": "integer",
                                          "examples": [
                                            90000
                                          ]
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "examples": [
                                            "REST"
                                          ]
                                        },
                                        "URI_Path": {
                                          "type": "string",
                                          "examples": [
                                            "/api/v2%2E0/poll"
                                          ]
                                        }
                                      },
                                      "required": []
                                    },
                                    "throttle": {
                                      "type": "object",
                                      "properties": {
                                        "throttle_enabled": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "number_pronghorns": {
                                          "type": "integer",
                                          "examples": [
                                            1
                                          ]
                                        },
                                        "sync_async": {
                                          "type": "string",
                                          "examples": [
                                            "sync"
                                          ]
                                        },
                                        "max_in_queue": {
                                          "type": "integer",
                                          "examples": [
                                            1000
                                          ]
                                        },
                                        "concurrent_max": {
                                          "type": "integer",
                                          "examples": [
                                            1
                                          ]
                                        },
                                        "expire_timeout": {
                                          "type": "integer",
                                          "examples": [
                                            0
                                          ]
                                        },
                                        "avg_runtime": {
                                          "type": "integer",
                                          "examples": [
                                            200
                                          ]
                                        }
                                      },
                                      "required": []
                                    },
                                    "request": {
                                      "type": "object",
                                      "properties": {
                                        "number_redirects": {
                                          "type": "integer",
                                          "examples": [
                                            0
                                          ]
                                        },
                                        "number_retries": {
                                          "type": "integer",
                                          "examples": [
                                            3
                                          ]
                                        },
                                        "limit_retry_error": {
                                          "type": "integer",
                                          "examples": [
                                            0
                                          ]
                                        },
                                        "attempt_timeout": {
                                          "type": "integer",
                                          "examples": [
                                            300000
                                          ]
                                        },
                                        "global_request": {
                                          "type": "object",
                                          "properties": {
                                            "payload": {
                                              "type": "object",
                                              "properties": {},
                                              "required": []
                                            },
                                            "uriOptions": {
                                              "type": "object",
                                              "properties": {},
                                              "required": []
                                            },
                                            "addlHeaders": {
                                              "type": "object",
                                              "properties": {},
                                              "required": []
                                            },
                                            "authData": {
                                              "type": "object",
                                              "properties": {},
                                              "required": []
                                            }
                                          },
                                          "required": []
                                        },
                                        "healthcheck_on_timeout": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "return_raw": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "archiving": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "failover_codes": {
                                          "type": "array"
                                        }
                                      },
                                      "required": []
                                    },
                                    "proxy": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "host": {
                                          "type": "string",
                                          "examples": [
                                            "127%2E0%2E0%2E1"
                                          ],
                                          "format": "ipv4"
                                        },
                                        "port": {
                                          "type": "integer",
                                          "examples": [
                                            8080
                                          ]
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "examples": [
                                            "http"
                                          ]
                                        }
                                      },
                                      "required": []
                                    },
                                    "ssl": {
                                      "type": "object",
                                      "properties": {
                                        "ecdhCurve": {
                                          "type": "string"
                                        },
                                        "enabled": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "accept_invalid_cert": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "ca_file": {
                                          "type": "string"
                                        },
                                        "key_file": {
                                          "type": "string"
                                        },
                                        "cert_file": {
                                          "type": "string"
                                        },
                                        "secure_protocol": {
                                          "type": "string"
                                        },
                                        "ciphers": {
                                          "type": "string"
                                        }
                                      },
                                      "required": []
                                    },
                                    "visibility": {
                                      "type": "object",
                                      "properties": {
                                        "module": {
                                          "type": "string",
                                          "examples": [
                                            "all"
                                          ]
                                        },
                                        "role": {
                                          "type": "string",
                                          "examples": [
                                            "all"
                                          ]
                                        },
                                        "playbook": {
                                          "type": "string",
                                          "examples": [
                                            "all"
                                          ]
                                        },
                                        "script": {
                                          "type": "string",
                                          "examples": [
                                            "all"
                                          ]
                                        },
                                        "terraform": {
                                          "type": "string",
                                          "examples": [
                                            "all"
                                          ]
                                        },
                                        "collection_module": {
                                          "type": "string",
                                          "examples": [
                                            "all"
                                          ]
                                        },
                                        "collection_role": {
                                          "type": "string",
                                          "examples": [
                                            "all"
                                          ]
                                        },
                                        "nornir": {
                                          "type": "string",
                                          "examples": [
                                            "all"
                                          ]
                                        }
                                      },
                                      "required": []
                                    },
                                    "save_metric": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "mongo": {
                                      "type": "object",
                                      "properties": {
                                        "host": {
                                          "type": "string"
                                        },
                                        "port": {
                                          "type": "integer",
                                          "examples": [
                                            443
                                          ]
                                        },
                                        "database": {
                                          "type": "string"
                                        },
                                        "username": {
                                          "type": "string"
                                        },
                                        "password": {
                                          "type": "string"
                                        },
                                        "replSet": {
                                          "type": "string"
                                        },
                                        "db_ssl": {
                                          "type": "object",
                                          "properties": {
                                            "enabled": {
                                              "type": "boolean",
                                              "examples": [
                                                true,
                                                false
                                              ]
                                            },
                                            "accept_invalid_cert": {
                                              "type": "boolean",
                                              "examples": [
                                                true,
                                                false
                                              ]
                                            },
                                            "ca_file": {
                                              "type": "string"
                                            },
                                            "key_file": {
                                              "type": "string"
                                            },
                                            "cert_file": {
                                              "type": "string"
                                            }
                                          },
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    },
                                    "encode_pathvars": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "reference_node": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    }
                                  },
                                  "required": []
                                },
                                "brokers": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "examples": [
                                      "device"
                                    ]
                                  }
                                },
                                "groups": {
                                  "type": "array"
                                }
                              },
                              "required": []
                            },
                            "isEncrypted": {
                              "type": "boolean",
                              "examples": [
                                true,
                                false
                              ]
                            },
                            "loggerProps": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "examples": [
                                    "Logging"
                                  ]
                                },
                                "log_max_files": {
                                  "type": "integer",
                                  "examples": [
                                    99
                                  ]
                                },
                                "log_max_file_size": {
                                  "type": "integer",
                                  "examples": [
                                    1048576
                                  ]
                                },
                                "log_level": {
                                  "type": "string",
                                  "examples": [
                                    "info"
                                  ]
                                },
                                "log_directory": {
                                  "type": "string",
                                  "examples": [
                                    "/opt/itential/logs/"
                                  ],
                                  "format": "regex"
                                },
                                "log_filename": {
                                  "type": "string",
                                  "examples": [
                                    "adapter-automation_gateway%2Elog"
                                  ]
                                },
                                "console_level": {
                                  "type": "string",
                                  "examples": [
                                    "info"
                                  ]
                                }
                              },
                              "required": []
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    }
                  },
                  "total": {
                    "type": "integer",
                    "examples": [
                      14
                    ]
                  }
                },
                "required": []
              },
              "headers": {
                "type": "object",
                "properties": {
                  "content-security-policy": {
                    "type": "string",
                    "examples": [
                      "default-src 'self';script-src 'self' 'unsafe-inline' 'unsafe-eval' blob:;style-src 'self' 'unsafe-inline';img-src 'self' gitlab%2Ecom data:;font-src 'self' data:"
                    ]
                  },
                  "x-dns-prefetch-control": {
                    "type": "string",
                    "examples": [
                      "off"
                    ]
                  },
                  "expect-ct": {
                    "type": "string",
                    "examples": [
                      "max-age=0"
                    ]
                  },
                  "x-frame-options": {
                    "type": "string",
                    "examples": [
                      "SAMEORIGIN"
                    ]
                  },
                  "strict-transport-security": {
                    "type": "string",
                    "examples": [
                      "max-age=31536000; includeSubDomains; preload"
                    ]
                  },
                  "x-download-options": {
                    "type": "string",
                    "examples": [
                      "noopen"
                    ]
                  },
                  "x-content-type-options": {
                    "type": "string",
                    "examples": [
                      "nosniff"
                    ]
                  },
                  "x-permitted-cross-domain-policies": {
                    "type": "string",
                    "examples": [
                      "none"
                    ]
                  },
                  "referrer-policy": {
                    "type": "string",
                    "examples": [
                      "no-referrer"
                    ]
                  },
                  "x-xss-protection": {
                    "type": "string",
                    "examples": [
                      "0"
                    ]
                  },
                  "access-control-allow-origin": {
                    "type": "string",
                    "examples": [
                      "*"
                    ]
                  },
                  "access-control-allow-headers": {
                    "type": "string",
                    "examples": [
                      "Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Origin, X-Requested-With, Content-Type, Accept"
                    ]
                  },
                  "access-control-allow-methods": {
                    "type": "string",
                    "examples": [
                      "GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH"
                    ]
                  },
                  "cache-control": {
                    "type": "string",
                    "examples": [
                      "Private, No-Cache, No-Store, Must-Revalidate"
                    ]
                  },
                  "pragma": {
                    "type": "string",
                    "examples": [
                      "No-Cache"
                    ]
                  },
                  "expires": {
                    "type": "string",
                    "examples": [
                      "0"
                    ]
                  },
                  "if-modified-since": {
                    "type": "string",
                    "examples": [
                      "Mon, 1 Jan 2014 01:00:00 GMT"
                    ]
                  },
                  "content-type": {
                    "type": "string",
                    "examples": [
                      "application/json; charset=utf-8"
                    ]
                  },
                  "content-length": {
                    "type": "string",
                    "examples": [
                      "24958"
                    ]
                  },
                  "etag": {
                    "type": "string",
                    "examples": [
                      "W/\"617e-/mND8eFYPuKky9B3jAdgt06gkyk\""
                    ]
                  },
                  "vary": {
                    "type": "string",
                    "examples": [
                      "Accept-Encoding"
                    ]
                  },
                  "date": {
                    "type": "string",
                    "examples": [
                      "Tue, 24 Jan 2023 20:41:10 GMT"
                    ]
                  },
                  "connection": {
                    "type": "string",
                    "examples": [
                      "close"
                    ]
                  },
                  "set-cookie": {
                    "type": "string",
                    "examples": [
                      "token=OWMwZjZmYTQ2ZDZhY2UxMzBhZGI1OGE0M2Y0NjQ4ZjM="
                    ]
                  }
                },
                "required": []
              },
              "requestCookie": {
                "type": "string",
                "examples": [
                  "token=OWMwZjZmYTQ2ZDZhY2UxMzBhZGI1OGE0M2Y0NjQ4ZjM="
                ]
              },
              "metrics": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "examples": [
                      200
                    ]
                  },
                  "timeouts": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "redirects": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "retries": {
                    "type": "integer",
                    "examples": [
                      0
                    ]
                  },
                  "tripTime": {
                    "type": "integer",
                    "examples": [
                      194
                    ]
                  },
                  "isThrottling": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "capabilityTime": {
                    "type": "string",
                    "examples": [
                      "256ms"
                    ]
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "adapterModel",
            "type": "string",
            "examples": [
              "@itentialopensource/adapter-apiServiceordering"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "filteredAdapters",
            "type": "array"
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "filter",
            "args": [
              null,
              "ƒ_query_1",
              null
            ],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "adapters",
              "ptr": "/response/results"
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "filteredAdapters",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "adapterModel",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "isActive": {
                        "type": "boolean",
                        "examples": [
                          true,
                          false
                        ]
                      }
                    },
                    "required": []
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "examples": [
                          "AutomationGateway"
                        ]
                      },
                      "model": {
                        "type": "string",
                        "examples": [
                          "@itential/adapter-automation_gateway"
                        ]
                      },
                      "type": {
                        "type": "string",
                        "examples": [
                          "Adapter"
                        ]
                      },
                      "properties": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "examples": [
                              "AutomationGateway"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "examples": [
                              "AutomationGateway"
                            ]
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "host": {
                                "type": "string",
                                "examples": [
                                  "automation-gateway"
                                ]
                              },
                              "port": {
                                "type": "integer",
                                "examples": [
                                  8083
                                ]
                              },
                              "base_path": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string",
                                "examples": [
                                  "v2%2E0"
                                ]
                              },
                              "cache_location": {
                                "type": "string",
                                "examples": [
                                  "none"
                                ]
                              },
                              "stub": {
                                "type": "boolean",
                                "examples": [
                                  true,
                                  false
                                ]
                              },
                              "protocol": {
                                "type": "string",
                                "examples": [
                                  "http"
                                ]
                              },
                              "authentication": {
                                "type": "object",
                                "properties": {
                                  "auth_method": {
                                    "type": "string",
                                    "examples": [
                                      "request_token"
                                    ]
                                  },
                                  "username": {
                                    "type": "string",
                                    "examples": [
                                      "admin@itential"
                                    ]
                                  },
                                  "password": {
                                    "type": "string",
                                    "examples": [
                                      "admin"
                                    ]
                                  },
                                  "token": {
                                    "type": "string",
                                    "examples": [
                                      "token"
                                    ]
                                  },
                                  "token_user_field": {
                                    "type": "string",
                                    "examples": [
                                      "username"
                                    ]
                                  },
                                  "token_password_field": {
                                    "type": "string",
                                    "examples": [
                                      "password"
                                    ]
                                  },
                                  "token_result_field": {
                                    "type": "string",
                                    "examples": [
                                      "token"
                                    ]
                                  },
                                  "token_URI_path": {
                                    "type": "string",
                                    "examples": [
                                      "/api/v2%2E0/login"
                                    ]
                                  },
                                  "invalid_token_error": {
                                    "type": "integer",
                                    "examples": [
                                      401
                                    ]
                                  },
                                  "token_timeout": {
                                    "type": "integer",
                                    "examples": [
                                      600
                                    ]
                                  },
                                  "token_cache": {
                                    "type": "string",
                                    "examples": [
                                      "local"
                                    ]
                                  },
                                  "auth_field": {
                                    "type": "string",
                                    "examples": [
                                      "header%2Eheaders%2EAuthorization"
                                    ]
                                  },
                                  "auth_field_format": {
                                    "type": "string",
                                    "examples": [
                                      "{token}"
                                    ]
                                  }
                                },
                                "required": []
                              },
                              "healthcheck": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "examples": [
                                      "intermittent"
                                    ]
                                  },
                                  "frequency": {
                                    "type": "integer",
                                    "examples": [
                                      90000
                                    ]
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "examples": [
                                      "REST"
                                    ]
                                  },
                                  "URI_Path": {
                                    "type": "string",
                                    "examples": [
                                      "/api/v2%2E0/poll"
                                    ]
                                  }
                                },
                                "required": []
                              },
                              "throttle": {
                                "type": "object",
                                "properties": {
                                  "throttle_enabled": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "number_pronghorns": {
                                    "type": "integer",
                                    "examples": [
                                      1
                                    ]
                                  },
                                  "sync_async": {
                                    "type": "string",
                                    "examples": [
                                      "sync"
                                    ]
                                  },
                                  "max_in_queue": {
                                    "type": "integer",
                                    "examples": [
                                      1000
                                    ]
                                  },
                                  "concurrent_max": {
                                    "type": "integer",
                                    "examples": [
                                      1
                                    ]
                                  },
                                  "expire_timeout": {
                                    "type": "integer",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "avg_runtime": {
                                    "type": "integer",
                                    "examples": [
                                      200
                                    ]
                                  }
                                },
                                "required": []
                              },
                              "request": {
                                "type": "object",
                                "properties": {
                                  "number_redirects": {
                                    "type": "integer",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "number_retries": {
                                    "type": "integer",
                                    "examples": [
                                      3
                                    ]
                                  },
                                  "limit_retry_error": {
                                    "type": "integer",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "attempt_timeout": {
                                    "type": "integer",
                                    "examples": [
                                      300000
                                    ]
                                  },
                                  "global_request": {
                                    "type": "object",
                                    "properties": {
                                      "payload": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "uriOptions": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "addlHeaders": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      },
                                      "authData": {
                                        "type": "object",
                                        "properties": {},
                                        "required": []
                                      }
                                    },
                                    "required": []
                                  },
                                  "healthcheck_on_timeout": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "return_raw": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "archiving": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "failover_codes": {
                                    "type": "array"
                                  }
                                },
                                "required": []
                              },
                              "proxy": {
                                "type": "object",
                                "properties": {
                                  "enabled": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "host": {
                                    "type": "string",
                                    "examples": [
                                      "127%2E0%2E0%2E1"
                                    ],
                                    "format": "ipv4"
                                  },
                                  "port": {
                                    "type": "integer",
                                    "examples": [
                                      8080
                                    ]
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "examples": [
                                      "http"
                                    ]
                                  }
                                },
                                "required": []
                              },
                              "ssl": {
                                "type": "object",
                                "properties": {
                                  "ecdhCurve": {
                                    "type": "string"
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "accept_invalid_cert": {
                                    "type": "boolean",
                                    "examples": [
                                      true,
                                      false
                                    ]
                                  },
                                  "ca_file": {
                                    "type": "string"
                                  },
                                  "key_file": {
                                    "type": "string"
                                  },
                                  "cert_file": {
                                    "type": "string"
                                  },
                                  "secure_protocol": {
                                    "type": "string"
                                  },
                                  "ciphers": {
                                    "type": "string"
                                  }
                                },
                                "required": []
                              },
                              "visibility": {
                                "type": "object",
                                "properties": {
                                  "module": {
                                    "type": "string",
                                    "examples": [
                                      "all"
                                    ]
                                  },
                                  "role": {
                                    "type": "string",
                                    "examples": [
                                      "all"
                                    ]
                                  },
                                  "playbook": {
                                    "type": "string",
                                    "examples": [
                                      "all"
                                    ]
                                  },
                                  "script": {
                                    "type": "string",
                                    "examples": [
                                      "all"
                                    ]
                                  },
                                  "terraform": {
                                    "type": "string",
                                    "examples": [
                                      "all"
                                    ]
                                  },
                                  "collection_module": {
                                    "type": "string",
                                    "examples": [
                                      "all"
                                    ]
                                  },
                                  "collection_role": {
                                    "type": "string",
                                    "examples": [
                                      "all"
                                    ]
                                  },
                                  "nornir": {
                                    "type": "string",
                                    "examples": [
                                      "all"
                                    ]
                                  }
                                },
                                "required": []
                              },
                              "save_metric": {
                                "type": "boolean",
                                "examples": [
                                  true,
                                  false
                                ]
                              },
                              "mongo": {
                                "type": "object",
                                "properties": {
                                  "host": {
                                    "type": "string"
                                  },
                                  "port": {
                                    "type": "integer",
                                    "examples": [
                                      443
                                    ]
                                  },
                                  "database": {
                                    "type": "string"
                                  },
                                  "username": {
                                    "type": "string"
                                  },
                                  "password": {
                                    "type": "string"
                                  },
                                  "replSet": {
                                    "type": "string"
                                  },
                                  "db_ssl": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "boolean",
                                        "examples": [
                                          true,
                                          false
                                        ]
                                      },
                                      "accept_invalid_cert": {
                                        "type": "boolean",
                                        "examples": [
                                          true,
                                          false
                                        ]
                                      },
                                      "ca_file": {
                                        "type": "string"
                                      },
                                      "key_file": {
                                        "type": "string"
                                      },
                                      "cert_file": {
                                        "type": "string"
                                      }
                                    },
                                    "required": []
                                  }
                                },
                                "required": []
                              },
                              "encode_pathvars": {
                                "type": "boolean",
                                "examples": [
                                  true,
                                  false
                                ]
                              },
                              "reference_node": {
                                "type": "boolean",
                                "examples": [
                                  true,
                                  false
                                ]
                              }
                            },
                            "required": []
                          },
                          "brokers": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "examples": [
                                "device"
                              ]
                            }
                          },
                          "groups": {
                            "type": "array"
                          }
                        },
                        "required": []
                      },
                      "isEncrypted": {
                        "type": "boolean",
                        "examples": [
                          true,
                          false
                        ]
                      },
                      "loggerProps": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string",
                            "examples": [
                              "Logging"
                            ]
                          },
                          "log_max_files": {
                            "type": "integer",
                            "examples": [
                              99
                            ]
                          },
                          "log_max_file_size": {
                            "type": "integer",
                            "examples": [
                              1048576
                            ]
                          },
                          "log_level": {
                            "type": "string",
                            "examples": [
                              "info"
                            ]
                          },
                          "log_directory": {
                            "type": "string",
                            "examples": [
                              "/opt/itential/logs/"
                            ],
                            "format": "regex"
                          },
                          "log_filename": {
                            "type": "string",
                            "examples": [
                              "adapter-automation_gateway%2Elog"
                            ]
                          },
                          "console_level": {
                            "type": "string",
                            "examples": [
                              "info"
                            ]
                          }
                        },
                        "required": []
                      }
                    },
                    "required": []
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "isActive": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        }
                      },
                      "required": []
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": [
                            "AutomationGateway"
                          ]
                        },
                        "model": {
                          "type": "string",
                          "examples": [
                            "@itential/adapter-automation_gateway"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "examples": [
                            "Adapter"
                          ]
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "examples": [
                                "AutomationGateway"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "examples": [
                                "AutomationGateway"
                              ]
                            },
                            "properties": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "examples": [
                                    "automation-gateway"
                                  ]
                                },
                                "port": {
                                  "type": "integer",
                                  "examples": [
                                    8083
                                  ]
                                },
                                "base_path": {
                                  "type": "string"
                                },
                                "version": {
                                  "type": "string",
                                  "examples": [
                                    "v2%2E0"
                                  ]
                                },
                                "cache_location": {
                                  "type": "string",
                                  "examples": [
                                    "none"
                                  ]
                                },
                                "stub": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "protocol": {
                                  "type": "string",
                                  "examples": [
                                    "http"
                                  ]
                                },
                                "authentication": {
                                  "type": "object",
                                  "properties": {
                                    "auth_method": {
                                      "type": "string",
                                      "examples": [
                                        "request_token"
                                      ]
                                    },
                                    "username": {
                                      "type": "string",
                                      "examples": [
                                        "admin@itential"
                                      ]
                                    },
                                    "password": {
                                      "type": "string",
                                      "examples": [
                                        "admin"
                                      ]
                                    },
                                    "token": {
                                      "type": "string",
                                      "examples": [
                                        "token"
                                      ]
                                    },
                                    "token_user_field": {
                                      "type": "string",
                                      "examples": [
                                        "username"
                                      ]
                                    },
                                    "token_password_field": {
                                      "type": "string",
                                      "examples": [
                                        "password"
                                      ]
                                    },
                                    "token_result_field": {
                                      "type": "string",
                                      "examples": [
                                        "token"
                                      ]
                                    },
                                    "token_URI_path": {
                                      "type": "string",
                                      "examples": [
                                        "/api/v2%2E0/login"
                                      ]
                                    },
                                    "invalid_token_error": {
                                      "type": "integer",
                                      "examples": [
                                        401
                                      ]
                                    },
                                    "token_timeout": {
                                      "type": "integer",
                                      "examples": [
                                        600
                                      ]
                                    },
                                    "token_cache": {
                                      "type": "string",
                                      "examples": [
                                        "local"
                                      ]
                                    },
                                    "auth_field": {
                                      "type": "string",
                                      "examples": [
                                        "header%2Eheaders%2EAuthorization"
                                      ]
                                    },
                                    "auth_field_format": {
                                      "type": "string",
                                      "examples": [
                                        "{token}"
                                      ]
                                    }
                                  },
                                  "required": []
                                },
                                "healthcheck": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "examples": [
                                        "intermittent"
                                      ]
                                    },
                                    "frequency": {
                                      "type": "integer",
                                      "examples": [
                                        90000
                                      ]
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "examples": [
                                        "REST"
                                      ]
                                    },
                                    "URI_Path": {
                                      "type": "string",
                                      "examples": [
                                        "/api/v2%2E0/poll"
                                      ]
                                    }
                                  },
                                  "required": []
                                },
                                "throttle": {
                                  "type": "object",
                                  "properties": {
                                    "throttle_enabled": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "number_pronghorns": {
                                      "type": "integer",
                                      "examples": [
                                        1
                                      ]
                                    },
                                    "sync_async": {
                                      "type": "string",
                                      "examples": [
                                        "sync"
                                      ]
                                    },
                                    "max_in_queue": {
                                      "type": "integer",
                                      "examples": [
                                        1000
                                      ]
                                    },
                                    "concurrent_max": {
                                      "type": "integer",
                                      "examples": [
                                        1
                                      ]
                                    },
                                    "expire_timeout": {
                                      "type": "integer",
                                      "examples": [
                                        0
                                      ]
                                    },
                                    "avg_runtime": {
                                      "type": "integer",
                                      "examples": [
                                        200
                                      ]
                                    }
                                  },
                                  "required": []
                                },
                                "request": {
                                  "type": "object",
                                  "properties": {
                                    "number_redirects": {
                                      "type": "integer",
                                      "examples": [
                                        0
                                      ]
                                    },
                                    "number_retries": {
                                      "type": "integer",
                                      "examples": [
                                        3
                                      ]
                                    },
                                    "limit_retry_error": {
                                      "type": "integer",
                                      "examples": [
                                        0
                                      ]
                                    },
                                    "attempt_timeout": {
                                      "type": "integer",
                                      "examples": [
                                        300000
                                      ]
                                    },
                                    "global_request": {
                                      "type": "object",
                                      "properties": {
                                        "payload": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "uriOptions": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "addlHeaders": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        },
                                        "authData": {
                                          "type": "object",
                                          "properties": {},
                                          "required": []
                                        }
                                      },
                                      "required": []
                                    },
                                    "healthcheck_on_timeout": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "return_raw": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "archiving": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "failover_codes": {
                                      "type": "array"
                                    }
                                  },
                                  "required": []
                                },
                                "proxy": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "host": {
                                      "type": "string",
                                      "examples": [
                                        "127%2E0%2E0%2E1"
                                      ],
                                      "format": "ipv4"
                                    },
                                    "port": {
                                      "type": "integer",
                                      "examples": [
                                        8080
                                      ]
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "examples": [
                                        "http"
                                      ]
                                    }
                                  },
                                  "required": []
                                },
                                "ssl": {
                                  "type": "object",
                                  "properties": {
                                    "ecdhCurve": {
                                      "type": "string"
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "accept_invalid_cert": {
                                      "type": "boolean",
                                      "examples": [
                                        true,
                                        false
                                      ]
                                    },
                                    "ca_file": {
                                      "type": "string"
                                    },
                                    "key_file": {
                                      "type": "string"
                                    },
                                    "cert_file": {
                                      "type": "string"
                                    },
                                    "secure_protocol": {
                                      "type": "string"
                                    },
                                    "ciphers": {
                                      "type": "string"
                                    }
                                  },
                                  "required": []
                                },
                                "visibility": {
                                  "type": "object",
                                  "properties": {
                                    "module": {
                                      "type": "string",
                                      "examples": [
                                        "all"
                                      ]
                                    },
                                    "role": {
                                      "type": "string",
                                      "examples": [
                                        "all"
                                      ]
                                    },
                                    "playbook": {
                                      "type": "string",
                                      "examples": [
                                        "all"
                                      ]
                                    },
                                    "script": {
                                      "type": "string",
                                      "examples": [
                                        "all"
                                      ]
                                    },
                                    "terraform": {
                                      "type": "string",
                                      "examples": [
                                        "all"
                                      ]
                                    },
                                    "collection_module": {
                                      "type": "string",
                                      "examples": [
                                        "all"
                                      ]
                                    },
                                    "collection_role": {
                                      "type": "string",
                                      "examples": [
                                        "all"
                                      ]
                                    },
                                    "nornir": {
                                      "type": "string",
                                      "examples": [
                                        "all"
                                      ]
                                    }
                                  },
                                  "required": []
                                },
                                "save_metric": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "mongo": {
                                  "type": "object",
                                  "properties": {
                                    "host": {
                                      "type": "string"
                                    },
                                    "port": {
                                      "type": "integer",
                                      "examples": [
                                        443
                                      ]
                                    },
                                    "database": {
                                      "type": "string"
                                    },
                                    "username": {
                                      "type": "string"
                                    },
                                    "password": {
                                      "type": "string"
                                    },
                                    "replSet": {
                                      "type": "string"
                                    },
                                    "db_ssl": {
                                      "type": "object",
                                      "properties": {
                                        "enabled": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "accept_invalid_cert": {
                                          "type": "boolean",
                                          "examples": [
                                            true,
                                            false
                                          ]
                                        },
                                        "ca_file": {
                                          "type": "string"
                                        },
                                        "key_file": {
                                          "type": "string"
                                        },
                                        "cert_file": {
                                          "type": "string"
                                        }
                                      },
                                      "required": []
                                    }
                                  },
                                  "required": []
                                },
                                "encode_pathvars": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                },
                                "reference_node": {
                                  "type": "boolean",
                                  "examples": [
                                    true,
                                    false
                                  ]
                                }
                              },
                              "required": []
                            },
                            "brokers": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "examples": [
                                  "device"
                                ]
                              }
                            },
                            "groups": {
                              "type": "array"
                            }
                          },
                          "required": []
                        },
                        "isEncrypted": {
                          "type": "boolean",
                          "examples": [
                            true,
                            false
                          ]
                        },
                        "loggerProps": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "examples": [
                                "Logging"
                              ]
                            },
                            "log_max_files": {
                              "type": "integer",
                              "examples": [
                                99
                              ]
                            },
                            "log_max_file_size": {
                              "type": "integer",
                              "examples": [
                                1048576
                              ]
                            },
                            "log_level": {
                              "type": "string",
                              "examples": [
                                "info"
                              ]
                            },
                            "log_directory": {
                              "type": "string",
                              "examples": [
                                "/opt/itential/logs/"
                              ],
                              "format": "regex"
                            },
                            "log_filename": {
                              "type": "string",
                              "examples": [
                                "adapter-automation_gateway%2Elog"
                              ]
                            },
                            "console_level": {
                              "type": "string",
                              "examples": [
                                "info"
                              ]
                            }
                          },
                          "required": []
                        }
                      },
                      "required": []
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              },
              {
                "$id": "thisArg",
                "type": "object",
                "properties": {
                  "0_adapterModel": {
                    "$id": "adapterModel",
                    "type": "string",
                    "examples": [
                      "@itentialopensource/adapter-apiServiceordering"
                    ]
                  }
                },
                "isContext": true,
                "isThis": true,
                "isIndexed": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/data/model"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "thisArg",
                  "ptr": "/0_adapterModel"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                },
                "context": "#"
              }
            ],
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "ƒ_query_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2023-03-22T12:48:03.397Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-22T12:48:03.397Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "63d1042dd341d802366b7c7a",
        "name": "TMF Set Event Data",
        "description": "",
        "incoming": [
          {
            "$id": "eventType",
            "type": "string",
            "examples": [
              "ServiceOrderCreateEvent"
            ]
          },
          {
            "$id": "orderDetails",
            "type": "object",
            "properties": {},
            "required": []
          },
          {
            "$id": "tmfType",
            "type": "string",
            "examples": [
              "serviceOrder",
              "alarm"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "eventBody",
            "type": "object",
            "properties": {
              "@type": {
                "type": "string",
                "examples": [
                  "string"
                ],
                "default": "event"
              },
              "eventId": {
                "type": "string",
                "examples": [
                  "string"
                ]
              },
              "eventTime": {
                "type": "string",
                "examples": [
                  "2023-01-25T10:19:28%2E203Z"
                ],
                "format": "date-time"
              },
              "eventType": {
                "type": "string",
                "examples": [
                  "string"
                ]
              },
              "correlationId": {
                "type": "string",
                "examples": [
                  "string"
                ]
              },
              "domain": {
                "type": "string",
                "examples": [
                  "string"
                ]
              },
              "title": {
                "type": "string",
                "examples": [
                  "string"
                ]
              },
              "description": {
                "type": "string",
                "examples": [
                  "string"
                ]
              },
              "priority": {
                "type": "string",
                "examples": [
                  "string"
                ],
                "default": "Normal"
              },
              "timeOcurred": {
                "type": "string",
                "examples": [
                  "2023-01-25T10:19:28%2E203Z"
                ],
                "format": "date-time"
              },
              "fieldPath": {
                "type": "string",
                "examples": [
                  "string"
                ]
              },
              "event": {
                "type": "object",
                "properties": {},
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "notificationURL",
            "type": "string",
            "examples": [
              "listener/serviceOrderCreateEvent"
            ]
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "declaration",
            "library": "Date",
            "method": "new Date",
            "args": [],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#",
            "polymorphIndex": 0
          },
          {
            "id": 3,
            "type": "method",
            "library": "Date",
            "method": "toISOString",
            "args": [
              null
            ],
            "view": {
              "row": 1,
              "col": 3
            },
            "context": "#"
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 2,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 3,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "eventBody",
              "ptr": "/eventTime"
            },
            "context": "#"
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "eventBody",
              "ptr": "/timeOcurred"
            },
            "context": "#"
          },
          {
            "id": 7,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              null
            ],
            "view": {
              "row": 4,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 8,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              null,
              null
            ],
            "view": {
              "row": 3,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 7,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "tmfType",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/1/value"
            },
            "context": "#"
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "orderDetails",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 8,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 8,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "eventBody",
              "ptr": "/event"
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "template",
            "library": "String",
            "method": "templateLiteral",
            "template": "listener/${eventType}",
            "args": [
              null
            ],
            "view": {
              "row": 2,
              "col": 3
            },
            "context": "#"
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "template",
              "name": 13,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "notificationURL",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 16,
            "type": "method",
            "library": "String",
            "method": "concat",
            "args": [
              null,
              null
            ],
            "view": {
              "row": 2,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "eventType",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 16,
              "ptr": "/args/1/value"
            },
            "context": "#"
          },
          {
            "id": 19,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 16,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "eventBody",
              "ptr": "/eventType"
            },
            "context": "#"
          },
          {
            "id": 20,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 16,
              "ptr": "/return"
            },
            "to": {
              "location": "template",
              "name": 13,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 21,
            "type": "method",
            "library": "String",
            "method": "toLowerCase",
            "args": [
              null
            ],
            "view": {
              "row": 2,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 22,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "tmfType",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 21,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 23,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 21,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 16,
              "ptr": "/args/0/value"
            },
            "context": "#"
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2023-03-22T12:48:03.387Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-22T12:48:03.387Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "63d13c5ad341d802366b7c7c",
        "name": "TMF Send Notification Vars",
        "description": "Takes the job input parameters and constructs the various objects for DB queries and adapter execution.",
        "incoming": [
          {
            "$id": "tmfType",
            "type": "string",
            "examples": [
              "ServiceOrder",
              "Alarm"
            ]
          },
          {
            "$id": "jobId",
            "type": "string",
            "examples": [
              "6f352bca-6d1a-452b-b25a-915026b67a18"
            ]
          },
          {
            "$id": "tmfTypeModelMap",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tmfType": {
                  "type": "string",
                  "examples": [
                    "ServiceOrder"
                  ]
                },
                "adapterModel": {
                  "type": "string",
                  "examples": [
                    "@itentialopensource/adapter-apiServiceordering"
                  ]
                }
              },
              "required": []
            }
          }
        ],
        "outgoing": [
          {
            "$id": "dbFindOrderQuery",
            "type": "object",
            "properties": {
              "entity": {
                "type": "string",
                "examples": [
                  "tmfServiceOrder"
                ]
              },
              "filter": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "59444ce2d8e44325b8821639"
                    ],
                    "format": "string"
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          {
            "$id": "searchListeners",
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "examples": [
                  "ServiceOrder"
                ]
              }
            },
            "required": []
          },
          {
            "$id": "adapterModel",
            "type": "string",
            "examples": [
              "@itentialopensource/adapter-apiServiceordering"
            ]
          }
        ],
        "steps": [
          {
            "id": 6,
            "type": "method",
            "library": "Array",
            "method": "find",
            "args": [
              null,
              "ƒ_query_1",
              null
            ],
            "view": {
              "row": 3,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "tmfTypeModelMap",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "tmfType",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 9,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "adapterModel"
            ],
            "view": {
              "row": 3,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 9,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 9,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "adapterModel",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "jobId",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "dbFindOrderQuery",
              "ptr": "/filter/id"
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "method",
            "library": "String",
            "method": "concat",
            "args": [
              "@type=",
              null
            ],
            "view": {
              "row": 2,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "tmfType",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 13,
              "ptr": "/args/1/value"
            },
            "context": "#"
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 13,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "searchListeners",
              "ptr": "/query"
            },
            "context": "#"
          },
          {
            "id": 17,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "tmfOrder"
            ],
            "view": {
              "row": 1,
              "col": 3
            },
            "context": "#"
          },
          {
            "id": 18,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 17,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "dbFindOrderQuery",
              "ptr": "/entity"
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "tmfType": {
                    "type": "string",
                    "examples": [
                      "ServiceOrder"
                    ]
                  },
                  "adapterModel": {
                    "type": "string",
                    "examples": [
                      "@itentialopensource/adapter-apiServiceordering"
                    ]
                  }
                },
                "required": [],
                "$id": "element"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "tmfType": {
                      "type": "string",
                      "examples": [
                        "ServiceOrder"
                      ]
                    },
                    "adapterModel": {
                      "type": "string",
                      "examples": [
                        "@itentialopensource/adapter-apiServiceordering"
                      ]
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "thisArg",
                "type": "object",
                "properties": {
                  "0_tmfType": {
                    "$id": "tmfType",
                    "type": "string",
                    "examples": [
                      "ServiceOrder",
                      "Alarm"
                    ]
                  }
                },
                "isContext": true,
                "isThis": true,
                "isIndexed": true
              }
            ],
            "outgoing": [
              {
                "title": "return",
                "type": "boolean",
                "$id": "return"
              }
            ],
            "functions": [],
            "name": "ƒ_query_1",
            "steps": [
              {
                "id": 1,
                "type": "method",
                "library": "Equality",
                "method": "equality",
                "args": [
                  null,
                  null
                ],
                "view": {
                  "row": 1,
                  "col": 2
                },
                "context": "#"
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "element",
                  "ptr": "/tmfType"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/0/value"
                },
                "context": "#"
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "thisArg",
                  "ptr": "/0_tmfType"
                },
                "to": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/args/1/value"
                },
                "context": "#"
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "return",
                  "ptr": ""
                },
                "context": "#"
              }
            ],
            "view": {
              "col": 3,
              "row": 4
            },
            "id": "ƒ_query_1",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2023-03-22T12:48:03.395Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-22T12:48:03.395Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "63d3c93414410e0246e4a3d5",
        "name": "TMF Event Notification - DB Find and Update",
        "description": "Creates the request body required to find and update the MongoDB document.",
        "incoming": [
          {
            "$id": "eventId",
            "type": "string",
            "examples": [
              "6f352bca-6d1a-452b-b25a-915026b67a18"
            ]
          },
          {
            "$id": "result",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "listener": {
                  "type": "string",
                  "examples": [
                    "http://in%2Elistener%2Ecom"
                  ]
                },
                "adapter": {
                  "type": "string",
                  "examples": [
                    "No Linked Adapter"
                  ]
                },
                "postResponse": {
                  "type": [
                    "string",
                    "object"
                  ],
                  "examples": [
                    "Not Sent"
                  ]
                }
              },
              "required": []
            }
          }
        ],
        "outgoing": [
          {
            "$id": "filter",
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "examples": [
                  "59444ce2d8e44325b8821639"
                ],
                "format": "string"
              }
            },
            "required": []
          },
          {
            "$id": "data",
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "examples": [
                  "rejected"
                ]
              },
              "eventId": {
                "type": "string",
                "examples": [
                  "256c42f0-7cae-4cfe-8b96-f5773796f8ff"
                ]
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 11,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "result",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "data",
              "ptr": "/result"
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "eventId",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "filter",
              "ptr": "/_id"
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "eventId",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "data",
              "ptr": "/eventId"
            },
            "context": "#"
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2023-03-22T12:48:03.383Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-22T12:48:03.383Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "63d128e5d341d802366b7c7b",
        "name": "TMF Set State - DB Find and Update",
        "description": "Creates the request body required to find and update the MongoDB document.",
        "incoming": [
          {
            "$id": "jobId",
            "type": "string",
            "examples": [
              "6f352bca-6d1a-452b-b25a-915026b67a18"
            ]
          },
          {
            "$id": "state",
            "type": "string",
            "examples": [
              "inProgress"
            ]
          },
          {
            "$id": "key",
            "type": "string",
            "examples": [
              "serviceOrderItem%2E0%2Eservice%2Estate"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "outgoing",
            "type": "object",
            "properties": {
              "collectionName": {
                "type": "string",
                "examples": [
                  "tmfServiceOrder"
                ]
              },
              "filter": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "examples": [
                      "59444ce2d8e44325b8821639"
                    ]
                  }
                },
                "required": []
              },
              "data": {
                "type": "object",
                "properties": {},
                "required": []
              },
              "multi": {
                "type": "boolean",
                "examples": [
                  true,
                  false
                ],
                "default": false
              },
              "upsert": {
                "type": "boolean",
                "examples": [
                  true,
                  false
                ],
                "default": true
              }
            },
            "required": []
          },
          {
            "$id": "collectionName",
            "type": "string",
            "examples": [
              "tmfServiceOrder"
            ]
          },
          {
            "$id": "filter",
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "examples": [
                  "59444ce2d8e44325b8821639"
                ],
                "format": "string"
              }
            },
            "required": []
          },
          {
            "$id": "data",
            "type": "object",
            "properties": {},
            "required": []
          }
        ],
        "steps": [
          {
            "id": 9,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "jobId",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "outgoing",
              "ptr": "/filter/id"
            },
            "context": "#"
          },
          {
            "id": 10,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "jobId",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "filter",
              "ptr": "/id"
            },
            "context": "#"
          },
          {
            "id": 11,
            "type": "declaration",
            "library": "Object",
            "method": "new Object",
            "args": [
              null
            ],
            "view": {
              "row": 3,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 12,
            "type": "method",
            "library": "Object",
            "method": "setProperty",
            "args": [
              null,
              null,
              null
            ],
            "view": {
              "row": 3,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 13,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 11,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 12,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 14,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "key",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 12,
              "ptr": "/args/1/value"
            },
            "context": "#"
          },
          {
            "id": 15,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "state",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 12,
              "ptr": "/args/2/value"
            },
            "context": "#"
          },
          {
            "id": 16,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 12,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "data",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 17,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 12,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "outgoing",
              "ptr": "/data"
            },
            "context": "#"
          },
          {
            "id": 18,
            "type": "declaration",
            "library": "String",
            "method": "new String",
            "args": [
              "tmfOrder"
            ],
            "view": {
              "row": 1,
              "col": 2
            },
            "context": "#"
          },
          {
            "id": 19,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 18,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "collectionName",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 20,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 18,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "outgoing",
              "ptr": "/collectionName"
            },
            "context": "#"
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2023-03-22T12:48:03.367Z",
        "createdBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2023-03-22T12:48:03.367Z",
        "lastUpdatedBy": {
          "_id": "641741b8faf08e5789e66143",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "3.23.3-2022.1.14",
        "tags": []
      }
    }
  ],
  "readme": "<!-- This is a comment in md (Markdown) format, it will not be visible to the end user -->\n\n<!-- Update the below line with your Pre-Built name -->\n# Pre-Built Name\n\n<!-- Leave TOC intact unless you've added or removed headers -->\n## Table of Contents\n\n* [Overview](#overview)\n* [Installation Prerequisites](#installation-prerequisites)\n* [Requirements](#requirements)\n* [Features](#features)\n* [Future Enhancements](#future-enhancements)\n* [How to Install](#how-to-install)\n* [How to Run](#how-to-run)\n* [Additional Information](#additional-information)\n\n## Overview\n\n<!-- Write a few sentences about the Pre-Built and explain the use case(s) -->\n<!-- Avoid using the word Artifact. Please use Pre-Built, Pre-Built Transformation or Pre-Built Automation -->\n<!-- Ex.: The Migration Wizard enables IAP users to conveniently move their automation use cases between different IAP environments -->\n<!-- (e.g. from Dev to Pre-Production or from Lab to Production). -->\n\n<!-- Workflow(s) Image Placeholder - TO BE ADDED DIRECTLY TO GitLab -->\n<!-- REPLACE COMMENT BELOW WITH IMAGE OF YOUR MAIN WORKFLOW -->\n<!--\n<table><tr><td>\n  <img src=\"./images/workflow.png\" alt=\"workflow\" width=\"800px\">\n</td></tr></table>\n-->\n<!-- REPLACE COMMENT ABOVE WITH IMAGE OF YOUR MAIN WORKFLOW -->\n\n<!-- ADD ESTIMATED RUN TIME HERE -->\n<!-- e.g. Estimated Run Time: 34 min. -->\n_Estimated Run Time_:\n\n## Installation Prerequisites\n\nUsers must satisfy the following pre-requisites:\n\n<!-- Include any other required apps or adapters in this list -->\n<!-- Ex.: EC2 Adapter -->\n* Itential Automation Platform\n  * `^2021.1`\n\n## Requirements\n\nThis Pre-Built requires the following:\n\n<!-- Unordered list highlighting the requirements of the Pre-Built -->\n<!-- EXAMPLE -->\n<!-- * cisco ios device -->\n<!-- * Ansible or NSO (with F5 NED) * -->\n\n## Features\n\nThe main benefits and features of the Pre-Built are outlined below.\n\n<!-- Unordered list highlighting the most exciting features of the Pre-Built -->\n<!-- EXAMPLE -->\n<!-- * Automatically checks for device type -->\n<!-- * Displays dry-run to user (asking for confirmation) prior to pushing config to the device -->\n<!-- * Verifies downloaded file integrity (using md5), will try to download again if failed -->\n\n\n## Future Enhancements\n\n<!-- OPTIONAL - Mention if the Pre-Built will be enhanced with additional features on the road map -->\n<!-- Ex.: This Pre-Built would support Cisco XR and F5 devices -->\n\n## How to Install\n\nTo install the Pre-Built:\n\n* Verify you are running a supported version of the Itential Automation Platform (IAP) as listed above in the [Requirements](#requirements) section in order to install the Pre-Built. \n* The Pre-Built can be installed from within App-Admin_Essential. Simply search for the name of your desired Pre-Built and click the install button (as shown below).\n\n<!-- REPLACE BELOW WITH IMAGE OF YOUR PUBLISHED PRE-BUILT -->\n<!--\n<table><tr><td>\n  <img src=\"./images/install.png\" alt=\"install\" width=\"600px\">\n</td></tr></table>\n-->\n<!-- REPLACE ABOVE WITH IMAGE OF YOUR PUBLISHED PRE-BUILT -->\n\n<!-- OPTIONAL - Explain if external components are required outside of IAP -->\n<!-- Ex.: The Ansible roles required for this Pre-Built can be found in the repository located at https://gitlab.com/itentialopensource/pre-built-automations/hello-world -->\n\n## How to Run\n\nUse the following to run the Pre-Built:\n\n<!-- Explain the main entrypoint(s) for this Pre-Built: Automation Catalog item, Workflow, Postman, etc. -->\n\n## Additional Information\n\nPlease use your Itential Customer Success account if you need support when using this Pre-Built."
}
